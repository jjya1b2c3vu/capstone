
test_mpu9250_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800c2c0  0800c2c0  0001c2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cae0  0800cae0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800cae0  0800cae0  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cae0  0800cae0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae0  0800cae0  0001cae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cae4  0800cae4  0001cae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800cae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  200001f8  0800cce0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  0800cce0  00020a84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f286  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000206a  00000000  00000000  0002f4a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  000324e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c09  00000000  00000000  000333d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a985  00000000  00000000  00048fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076712  00000000  00000000  0005395e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056ec  00000000  00000000  000ca0ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2a8 	.word	0x0800c2a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800c2a8 	.word	0x0800c2a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <_write>:
float get_init_angle();
void MakeVelProfile(float maxVel, float accel);
/*--------------------------------------------------------------------------------*/
//printf
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, ptr, len, 10);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	230a      	movs	r3, #10
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <_write+0x24>)
 80011b2:	f005 ff55 	bl	8007060 <HAL_UART_Transmit>
  return len;
 80011b6:	687b      	ldr	r3, [r7, #4]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000a08 	.word	0x20000a08

080011c4 <MPU9250_Read>:
///
uint8_t MPU9250_Read(uint8_t Address)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data;
  HAL_I2C_Mem_Read(&hi2c1, MPU9250, Address, 1, (uint8_t *)&data, 1, 10);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MPU9250_Read+0x34>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b299      	uxth	r1, r3
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	230a      	movs	r3, #10
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MPU9250_Read+0x38>)
 80011ea:	f002 faef 	bl	80037cc <HAL_I2C_Mem_Read>
  return data;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000878 	.word	0x20000878

08001200 <init_MPU9250>:
   //AK8963_Write_bits(0x0A, 0, 5, 0b10001);   //CNTL1 0001_0010
   HAL_Delay(1000);
}
///
void init_MPU9250(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

   printf("MPU9250 I2C Address is 0x%02X(7bit value)     it has to be 0x68\r\n", MPU9250>>1);
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <init_MPU9250+0x88>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	085b      	lsrs	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	481e      	ldr	r0, [pc, #120]	; (800128c <init_MPU9250+0x8c>)
 8001212:	f006 ff9b 	bl	800814c <iprintf>
   uint8_t temp_MPU = MPU9250_Read(MPU9250_RA_WHO_AM_I); // MPU9250_RA_WHO_AM_I = 0x75
 8001216:	2075      	movs	r0, #117	; 0x75
 8001218:	f7ff ffd4 	bl	80011c4 <MPU9250_Read>
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
   printf("Who am i = 0x%02X  /// it has to be 0x71\r\n", temp_MPU);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4619      	mov	r1, r3
 8001224:	481a      	ldr	r0, [pc, #104]	; (8001290 <init_MPU9250+0x90>)
 8001226:	f006 ff91 	bl	800814c <iprintf>
   printf("MPU9250 Initialize...\r\n");
 800122a:	481a      	ldr	r0, [pc, #104]	; (8001294 <init_MPU9250+0x94>)
 800122c:	f007 f802 	bl	8008234 <puts>
   printf("----------------------------------------------------------------------------------\r\n");
 8001230:	4819      	ldr	r0, [pc, #100]	; (8001298 <init_MPU9250+0x98>)
 8001232:	f006 ffff 	bl	8008234 <puts>

   HAL_Delay(100);
 8001236:	2064      	movs	r0, #100	; 0x64
 8001238:	f000 fb8e 	bl	8001958 <HAL_Delay>
   ///Power Management 1, sleep disable
   MPU9250_Write_bits(MPU9250_RA_PWR_MGMT_1, MPU9250_PWR1_SLEEP_BIT, MPU9250_PWR1_SLEEP_LENGTH, DISABLE);
 800123c:	2300      	movs	r3, #0
 800123e:	2201      	movs	r2, #1
 8001240:	2106      	movs	r1, #6
 8001242:	206b      	movs	r0, #107	; 0x6b
 8001244:	f000 f82a 	bl	800129c <MPU9250_Write_bits>
   HAL_Delay(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f000 fb85 	bl	8001958 <HAL_Delay>
   ///
   MPU9250_Write_bits(MPU9250_RA_PWR_MGMT_1, MPU9250_PWR1_CLKSEL_BIT, MPU9250_PWR1_CLKSEL_LENGTH, MPU9250_CLOCK_INTERNAL);
 800124e:	2300      	movs	r3, #0
 8001250:	2203      	movs	r2, #3
 8001252:	2100      	movs	r1, #0
 8001254:	206b      	movs	r0, #107	; 0x6b
 8001256:	f000 f821 	bl	800129c <MPU9250_Write_bits>
   ///gyro set 250d/s
   MPU9250_Write_bits(MPU9250_RA_GYRO_CONFIG, MPU9250_GCONFIG_FS_SEL_BIT, MPU9250_GCONFIG_FS_SEL_LENGTH, MPU9250_GYRO_FS_250);
 800125a:	2300      	movs	r3, #0
 800125c:	2202      	movs	r2, #2
 800125e:	2103      	movs	r1, #3
 8001260:	201b      	movs	r0, #27
 8001262:	f000 f81b 	bl	800129c <MPU9250_Write_bits>
   ///
   MPU9250_Write_bits(MPU9250_RA_ACCEL_CONFIG, MPU9250_ACONFIG_AFS_SEL_BIT, MPU9250_ACONFIG_AFS_SEL_LENGTH, MPU9250_ACCEL_FS_2);
 8001266:	2300      	movs	r3, #0
 8001268:	2202      	movs	r2, #2
 800126a:	2103      	movs	r1, #3
 800126c:	201c      	movs	r0, #28
 800126e:	f000 f815 	bl	800129c <MPU9250_Write_bits>
   MPU9250_Write_bits(MPU9250_ACCEL_DLPF_CONFIG, MPU9250_ACCEL_DLPF_BIT, MPU9250_ACCEL_DLPF_LENGTH, MPU9250_ACCEL_DLPF_VALUE);
 8001272:	2306      	movs	r3, #6
 8001274:	2203      	movs	r2, #3
 8001276:	2100      	movs	r1, #0
 8001278:	201d      	movs	r0, #29
 800127a:	f000 f80f 	bl	800129c <MPU9250_Write_bits>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000000 	.word	0x20000000
 800128c:	0800c398 	.word	0x0800c398
 8001290:	0800c3dc 	.word	0x0800c3dc
 8001294:	0800c408 	.word	0x0800c408
 8001298:	0800c344 	.word	0x0800c344

0800129c <MPU9250_Write_bits>:
///
void MPU9250_Write_bits(uint8_t Address, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	4604      	mov	r4, r0
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4623      	mov	r3, r4
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	4603      	mov	r3, r0
 80012b0:	71bb      	strb	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	717b      	strb	r3, [r7, #5]
 80012b6:	4613      	mov	r3, r2
 80012b8:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Read(&hi2c1, MPU9250, Address, 1, (uint8_t *)&tmp, 1, 10);
 80012be:	4b36      	ldr	r3, [pc, #216]	; (8001398 <MPU9250_Write_bits+0xfc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b299      	uxth	r1, r3
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	230a      	movs	r3, #10
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2301      	movs	r3, #1
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 030e 	add.w	r3, r7, #14
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	4830      	ldr	r0, [pc, #192]	; (800139c <MPU9250_Write_bits+0x100>)
 80012da:	f002 fa77 	bl	80037cc <HAL_I2C_Mem_Read>
  uint8_t mask = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
  switch(length){
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	d82a      	bhi.n	8001340 <MPU9250_Write_bits+0xa4>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <MPU9250_Write_bits+0x54>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	08001311 	.word	0x08001311
 80012f4:	08001317 	.word	0x08001317
 80012f8:	0800131d 	.word	0x0800131d
 80012fc:	08001323 	.word	0x08001323
 8001300:	08001329 	.word	0x08001329
 8001304:	0800132f 	.word	0x0800132f
 8001308:	08001335 	.word	0x08001335
 800130c:	0800133b 	.word	0x0800133b
    case 1: mask = 0x01; break;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e014      	b.n	8001340 <MPU9250_Write_bits+0xa4>
    case 2: mask = 0x03; break;
 8001316:	2303      	movs	r3, #3
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e011      	b.n	8001340 <MPU9250_Write_bits+0xa4>
    case 3: mask = 0x07; break;
 800131c:	2307      	movs	r3, #7
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e00e      	b.n	8001340 <MPU9250_Write_bits+0xa4>
    case 4: mask = 0x0F; break;
 8001322:	230f      	movs	r3, #15
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e00b      	b.n	8001340 <MPU9250_Write_bits+0xa4>
    case 5: mask = 0x1F; break;
 8001328:	231f      	movs	r3, #31
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e008      	b.n	8001340 <MPU9250_Write_bits+0xa4>
    case 6: mask = 0x3F; break;
 800132e:	233f      	movs	r3, #63	; 0x3f
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e005      	b.n	8001340 <MPU9250_Write_bits+0xa4>
    case 7: mask = 0x7F; break;
 8001334:	237f      	movs	r3, #127	; 0x7f
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e002      	b.n	8001340 <MPU9250_Write_bits+0xa4>
    case 8: mask = 0xFF; break;
 800133a:	23ff      	movs	r3, #255	; 0xff
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	bf00      	nop
  }
  tmp &= ~(mask << bitStart);
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	b25b      	sxtb	r3, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	b25a      	sxtb	r2, r3
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	4013      	ands	r3, r2
 8001354:	b25b      	sxtb	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	73bb      	strb	r3, [r7, #14]
  tmp |= (data << bitStart);
 800135a:	793a      	ldrb	r2, [r7, #4]
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	b25a      	sxtb	r2, r3
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(&hi2c1, MPU9250, Address, 1, (uint8_t *)&tmp, 1, 10);
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MPU9250_Write_bits+0xfc>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b299      	uxth	r1, r3
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	b29a      	uxth	r2, r3
 800137a:	230a      	movs	r3, #10
 800137c:	9302      	str	r3, [sp, #8]
 800137e:	2301      	movs	r3, #1
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	f107 030e 	add.w	r3, r7, #14
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2301      	movs	r3, #1
 800138a:	4804      	ldr	r0, [pc, #16]	; (800139c <MPU9250_Write_bits+0x100>)
 800138c:	f002 f924 	bl	80035d8 <HAL_I2C_Mem_Write>
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000878 	.word	0x20000878

080013a0 <read_MPU9250_data>:
  tmp |= (data << bitStart);
  HAL_I2C_Mem_Write(&hi2c1, AK8963, Address, 1, (uint8_t *)&tmp, 1, 10);
}

void read_MPU9250_data(void)
{
 80013a0:	b598      	push	{r3, r4, r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  Accel_X = (MPU9250_Read(MPU9250_RA_ACCEL_XOUT_H)<<8) | MPU9250_Read(MPU9250_RA_ACCEL_XOUT_L);
 80013a4:	203b      	movs	r0, #59	; 0x3b
 80013a6:	f7ff ff0d 	bl	80011c4 <MPU9250_Read>
 80013aa:	4603      	mov	r3, r0
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21c      	sxth	r4, r3
 80013b0:	203c      	movs	r0, #60	; 0x3c
 80013b2:	f7ff ff07 	bl	80011c4 <MPU9250_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4323      	orrs	r3, r4
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <read_MPU9250_data+0xbc>)
 80013c0:	801a      	strh	r2, [r3, #0]
  Accel_Y = (MPU9250_Read(MPU9250_RA_ACCEL_YOUT_H)<<8) | MPU9250_Read(MPU9250_RA_ACCEL_YOUT_L);
 80013c2:	203d      	movs	r0, #61	; 0x3d
 80013c4:	f7ff fefe 	bl	80011c4 <MPU9250_Read>
 80013c8:	4603      	mov	r3, r0
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21c      	sxth	r4, r3
 80013ce:	203e      	movs	r0, #62	; 0x3e
 80013d0:	f7ff fef8 	bl	80011c4 <MPU9250_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4323      	orrs	r3, r4
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <read_MPU9250_data+0xc0>)
 80013de:	801a      	strh	r2, [r3, #0]
  Accel_Z = (MPU9250_Read(MPU9250_RA_ACCEL_ZOUT_H)<<8) | MPU9250_Read(MPU9250_RA_ACCEL_ZOUT_L);
 80013e0:	203f      	movs	r0, #63	; 0x3f
 80013e2:	f7ff feef 	bl	80011c4 <MPU9250_Read>
 80013e6:	4603      	mov	r3, r0
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21c      	sxth	r4, r3
 80013ec:	2040      	movs	r0, #64	; 0x40
 80013ee:	f7ff fee9 	bl	80011c4 <MPU9250_Read>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4323      	orrs	r3, r4
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <read_MPU9250_data+0xc4>)
 80013fc:	801a      	strh	r2, [r3, #0]
  Gyro_X  = (MPU9250_Read(MPU9250_RA_GYRO_XOUT_H)<<8)  | MPU9250_Read(MPU9250_RA_GYRO_XOUT_L);
 80013fe:	2043      	movs	r0, #67	; 0x43
 8001400:	f7ff fee0 	bl	80011c4 <MPU9250_Read>
 8001404:	4603      	mov	r3, r0
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21c      	sxth	r4, r3
 800140a:	2044      	movs	r0, #68	; 0x44
 800140c:	f7ff feda 	bl	80011c4 <MPU9250_Read>
 8001410:	4603      	mov	r3, r0
 8001412:	b21b      	sxth	r3, r3
 8001414:	4323      	orrs	r3, r4
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <read_MPU9250_data+0xc8>)
 800141a:	801a      	strh	r2, [r3, #0]
  Gyro_Y  = (MPU9250_Read(MPU9250_RA_GYRO_YOUT_H)<<8)  | MPU9250_Read(MPU9250_RA_GYRO_YOUT_L);
 800141c:	2045      	movs	r0, #69	; 0x45
 800141e:	f7ff fed1 	bl	80011c4 <MPU9250_Read>
 8001422:	4603      	mov	r3, r0
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21c      	sxth	r4, r3
 8001428:	2046      	movs	r0, #70	; 0x46
 800142a:	f7ff fecb 	bl	80011c4 <MPU9250_Read>
 800142e:	4603      	mov	r3, r0
 8001430:	b21b      	sxth	r3, r3
 8001432:	4323      	orrs	r3, r4
 8001434:	b21a      	sxth	r2, r3
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <read_MPU9250_data+0xcc>)
 8001438:	801a      	strh	r2, [r3, #0]
  Gyro_Z  = (MPU9250_Read(MPU9250_RA_GYRO_ZOUT_H)<<8)  | MPU9250_Read(MPU9250_RA_GYRO_ZOUT_L);
 800143a:	2047      	movs	r0, #71	; 0x47
 800143c:	f7ff fec2 	bl	80011c4 <MPU9250_Read>
 8001440:	4603      	mov	r3, r0
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21c      	sxth	r4, r3
 8001446:	2048      	movs	r0, #72	; 0x48
 8001448:	f7ff febc 	bl	80011c4 <MPU9250_Read>
 800144c:	4603      	mov	r3, r0
 800144e:	b21b      	sxth	r3, r3
 8001450:	4323      	orrs	r3, r4
 8001452:	b21a      	sxth	r2, r3
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <read_MPU9250_data+0xd0>)
 8001456:	801a      	strh	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	bd98      	pop	{r3, r4, r7, pc}
 800145c:	200008f8 	.word	0x200008f8
 8001460:	20000a00 	.word	0x20000a00
 8001464:	20000870 	.word	0x20000870
 8001468:	20000a70 	.word	0x20000a70
 800146c:	20000a58 	.word	0x20000a58
 8001470:	20000930 	.word	0x20000930
 8001474:	00000000 	.word	0x00000000

08001478 <Sensor_Calculate>:
}
#define BIN2GYR 131.072
#define BIN2MAG 0.15
#define BIN2ACC 16384.0
void Sensor_Calculate()
{
 8001478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800147c:	af00      	add	r7, sp, #0
   Bias_Gy_X = -83.3693; Bias_Gy_Y = 221.402; Bias_Gy_Z = -180.1906;
 800147e:	4bc2      	ldr	r3, [pc, #776]	; (8001788 <Sensor_Calculate+0x310>)
 8001480:	4ac2      	ldr	r2, [pc, #776]	; (800178c <Sensor_Calculate+0x314>)
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	4bc2      	ldr	r3, [pc, #776]	; (8001790 <Sensor_Calculate+0x318>)
 8001486:	4ac3      	ldr	r2, [pc, #780]	; (8001794 <Sensor_Calculate+0x31c>)
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4bc3      	ldr	r3, [pc, #780]	; (8001798 <Sensor_Calculate+0x320>)
 800148c:	4ac3      	ldr	r2, [pc, #780]	; (800179c <Sensor_Calculate+0x324>)
 800148e:	601a      	str	r2, [r3, #0]
      //Offset_Mag_X = 250;   Offset_Mag_Y = 85; Offset_Mag_Z = 320;
      //mag_scale_X = 334.6 * BIN2MAG; mag_scale_Y = 270.0 * BIN2MAG; mag_scale_Z = 340.0 * BIN2MAG;
     // ASAX = 175, ASAY = 176, ASAZ = 92;
     // Mag_AdX = 1.18, Mag_AdY = 1.19, Mag_AdX = 0.86;
      dt = 0.01, alpha = 0.96, beta = 0.92;
 8001490:	4bc3      	ldr	r3, [pc, #780]	; (80017a0 <Sensor_Calculate+0x328>)
 8001492:	4ac4      	ldr	r2, [pc, #784]	; (80017a4 <Sensor_Calculate+0x32c>)
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	4bc4      	ldr	r3, [pc, #784]	; (80017a8 <Sensor_Calculate+0x330>)
 8001498:	4ac4      	ldr	r2, [pc, #784]	; (80017ac <Sensor_Calculate+0x334>)
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	4bc4      	ldr	r3, [pc, #784]	; (80017b0 <Sensor_Calculate+0x338>)
 800149e:	4ac5      	ldr	r2, [pc, #788]	; (80017b4 <Sensor_Calculate+0x33c>)
 80014a0:	601a      	str	r2, [r3, #0]
      //Mg_X1 = Mag_X0 / mag_scale_X;
     /// Mg_Y1 = Mag_Y0 / mag_scale_Y;
      //Mg_Z1 = Mag_Z0 / mag_scale_Z;

      /*  Acc: g, Gyr: °/s, Mag: µT  */
      Ac_X1 = ((float)Accel_X) / BIN2ACC;
 80014a2:	4bc5      	ldr	r3, [pc, #788]	; (80017b8 <Sensor_Calculate+0x340>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fc17 	bl	8000cdc <__aeabi_i2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fd19 	bl	8000eec <__aeabi_fdiv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4bbf      	ldr	r3, [pc, #764]	; (80017bc <Sensor_Calculate+0x344>)
 80014c0:	601a      	str	r2, [r3, #0]
      Ac_Y1 = ((float)Accel_Y) / BIN2ACC;
 80014c2:	4bbf      	ldr	r3, [pc, #764]	; (80017c0 <Sensor_Calculate+0x348>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fc07 	bl	8000cdc <__aeabi_i2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fd09 	bl	8000eec <__aeabi_fdiv>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4bb9      	ldr	r3, [pc, #740]	; (80017c4 <Sensor_Calculate+0x34c>)
 80014e0:	601a      	str	r2, [r3, #0]
      Ac_Z1 = ((float)Accel_Z) / BIN2ACC;
 80014e2:	4bb9      	ldr	r3, [pc, #740]	; (80017c8 <Sensor_Calculate+0x350>)
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fbf7 	bl	8000cdc <__aeabi_i2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fcf9 	bl	8000eec <__aeabi_fdiv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4bb3      	ldr	r3, [pc, #716]	; (80017cc <Sensor_Calculate+0x354>)
 8001500:	601a      	str	r2, [r3, #0]
      Gy_X1 = ((float)Gyro_X - Bias_Gy_X) / BIN2GYR;
 8001502:	4bb3      	ldr	r3, [pc, #716]	; (80017d0 <Sensor_Calculate+0x358>)
 8001504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fbe7 	bl	8000cdc <__aeabi_i2f>
 800150e:	4602      	mov	r2, r0
 8001510:	4b9d      	ldr	r3, [pc, #628]	; (8001788 <Sensor_Calculate+0x310>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f7ff fb2a 	bl	8000b70 <__aeabi_fsub>
 800151c:	4603      	mov	r3, r0
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ff82 	bl	8000428 <__aeabi_f2d>
 8001524:	a394      	add	r3, pc, #592	; (adr r3, 8001778 <Sensor_Calculate+0x300>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f8ff 	bl	800072c <__aeabi_ddiv>
 800152e:	4603      	mov	r3, r0
 8001530:	460c      	mov	r4, r1
 8001532:	4618      	mov	r0, r3
 8001534:	4621      	mov	r1, r4
 8001536:	f7ff fac7 	bl	8000ac8 <__aeabi_d2f>
 800153a:	4602      	mov	r2, r0
 800153c:	4ba5      	ldr	r3, [pc, #660]	; (80017d4 <Sensor_Calculate+0x35c>)
 800153e:	601a      	str	r2, [r3, #0]
      Gy_Y1 = ((float)Gyro_Y - Bias_Gy_Y) / BIN2GYR;
 8001540:	4ba5      	ldr	r3, [pc, #660]	; (80017d8 <Sensor_Calculate+0x360>)
 8001542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fbc8 	bl	8000cdc <__aeabi_i2f>
 800154c:	4602      	mov	r2, r0
 800154e:	4b90      	ldr	r3, [pc, #576]	; (8001790 <Sensor_Calculate+0x318>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	4610      	mov	r0, r2
 8001556:	f7ff fb0b 	bl	8000b70 <__aeabi_fsub>
 800155a:	4603      	mov	r3, r0
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ff63 	bl	8000428 <__aeabi_f2d>
 8001562:	a385      	add	r3, pc, #532	; (adr r3, 8001778 <Sensor_Calculate+0x300>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f8e0 	bl	800072c <__aeabi_ddiv>
 800156c:	4603      	mov	r3, r0
 800156e:	460c      	mov	r4, r1
 8001570:	4618      	mov	r0, r3
 8001572:	4621      	mov	r1, r4
 8001574:	f7ff faa8 	bl	8000ac8 <__aeabi_d2f>
 8001578:	4602      	mov	r2, r0
 800157a:	4b98      	ldr	r3, [pc, #608]	; (80017dc <Sensor_Calculate+0x364>)
 800157c:	601a      	str	r2, [r3, #0]
      Gy_Z1 = ((float)Gyro_Z - Bias_Gy_Z) / BIN2GYR;
 800157e:	4b98      	ldr	r3, [pc, #608]	; (80017e0 <Sensor_Calculate+0x368>)
 8001580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fba9 	bl	8000cdc <__aeabi_i2f>
 800158a:	4602      	mov	r2, r0
 800158c:	4b82      	ldr	r3, [pc, #520]	; (8001798 <Sensor_Calculate+0x320>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4610      	mov	r0, r2
 8001594:	f7ff faec 	bl	8000b70 <__aeabi_fsub>
 8001598:	4603      	mov	r3, r0
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff44 	bl	8000428 <__aeabi_f2d>
 80015a0:	a375      	add	r3, pc, #468	; (adr r3, 8001778 <Sensor_Calculate+0x300>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f8c1 	bl	800072c <__aeabi_ddiv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	4618      	mov	r0, r3
 80015b0:	4621      	mov	r1, r4
 80015b2:	f7ff fa89 	bl	8000ac8 <__aeabi_d2f>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b8a      	ldr	r3, [pc, #552]	; (80017e4 <Sensor_Calculate+0x36c>)
 80015ba:	601a      	str	r2, [r3, #0]


      /* Acc Angle */
      Deg_AX = atan(Ac_Y1 / sqrt(pow(Ac_X1, 2) + pow(Ac_Z1, 2))) * RAD2DEG;
 80015bc:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <Sensor_Calculate+0x34c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff31 	bl	8000428 <__aeabi_f2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <Sensor_Calculate+0x344>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff2a 	bl	8000428 <__aeabi_f2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015dc:	f008 feb8 	bl	800a350 <pow>
 80015e0:	4680      	mov	r8, r0
 80015e2:	4689      	mov	r9, r1
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <Sensor_Calculate+0x354>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff1d 	bl	8000428 <__aeabi_f2d>
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f6:	f008 feab 	bl	800a350 <pow>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7fe fdb3 	bl	800016c <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f008 fffb 	bl	800a608 <sqrt>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4620      	mov	r0, r4
 8001618:	4629      	mov	r1, r5
 800161a:	f7ff f887 	bl	800072c <__aeabi_ddiv>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4618      	mov	r0, r3
 8001624:	4621      	mov	r1, r4
 8001626:	f008 fccb 	bl	8009fc0 <atan>
 800162a:	a355      	add	r3, pc, #340	; (adr r3, 8001780 <Sensor_Calculate+0x308>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe ff52 	bl	80004d8 <__aeabi_dmul>
 8001634:	4603      	mov	r3, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4618      	mov	r0, r3
 800163a:	4621      	mov	r1, r4
 800163c:	f7ff fa44 	bl	8000ac8 <__aeabi_d2f>
 8001640:	4602      	mov	r2, r0
 8001642:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <Sensor_Calculate+0x370>)
 8001644:	601a      	str	r2, [r3, #0]
      Deg_AY = atan(-1 * Ac_X1 / sqrt(pow(Ac_Y1, 2) + pow(Ac_Z1, 2))) * RAD2DEG;
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <Sensor_Calculate+0x344>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe feea 	bl	8000428 <__aeabi_f2d>
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <Sensor_Calculate+0x34c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fee3 	bl	8000428 <__aeabi_f2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166a:	f008 fe71 	bl	800a350 <pow>
 800166e:	4680      	mov	r8, r0
 8001670:	4689      	mov	r9, r1
 8001672:	4b56      	ldr	r3, [pc, #344]	; (80017cc <Sensor_Calculate+0x354>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fed6 	bl	8000428 <__aeabi_f2d>
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001684:	f008 fe64 	bl	800a350 <pow>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7fe fd6c 	bl	800016c <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f008 ffb4 	bl	800a608 <sqrt>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7ff f840 	bl	800072c <__aeabi_ddiv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	460c      	mov	r4, r1
 80016b0:	4618      	mov	r0, r3
 80016b2:	4621      	mov	r1, r4
 80016b4:	f008 fc84 	bl	8009fc0 <atan>
 80016b8:	a331      	add	r3, pc, #196	; (adr r3, 8001780 <Sensor_Calculate+0x308>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ff0b 	bl	80004d8 <__aeabi_dmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	460c      	mov	r4, r1
 80016c6:	4618      	mov	r0, r3
 80016c8:	4621      	mov	r1, r4
 80016ca:	f7ff f9fd 	bl	8000ac8 <__aeabi_d2f>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b46      	ldr	r3, [pc, #280]	; (80017ec <Sensor_Calculate+0x374>)
 80016d2:	601a      	str	r2, [r3, #0]
      Deg_AZ = atan(sqrt(pow(Ac_X1, 2) + pow(Ac_Y1, 2)) / Ac_Z1) * RAD2DEG; // no meaning
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <Sensor_Calculate+0x344>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fea5 	bl	8000428 <__aeabi_f2d>
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e6:	f008 fe33 	bl	800a350 <pow>
 80016ea:	4604      	mov	r4, r0
 80016ec:	460d      	mov	r5, r1
 80016ee:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <Sensor_Calculate+0x34c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fe98 	bl	8000428 <__aeabi_f2d>
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001700:	f008 fe26 	bl	800a350 <pow>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe fd2e 	bl	800016c <__adddf3>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	f008 ff76 	bl	800a608 <sqrt>
 800171c:	4604      	mov	r4, r0
 800171e:	460d      	mov	r5, r1
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <Sensor_Calculate+0x354>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fe7f 	bl	8000428 <__aeabi_f2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fffb 	bl	800072c <__aeabi_ddiv>
 8001736:	4603      	mov	r3, r0
 8001738:	460c      	mov	r4, r1
 800173a:	4618      	mov	r0, r3
 800173c:	4621      	mov	r1, r4
 800173e:	f008 fc3f 	bl	8009fc0 <atan>
 8001742:	a30f      	add	r3, pc, #60	; (adr r3, 8001780 <Sensor_Calculate+0x308>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe fec6 	bl	80004d8 <__aeabi_dmul>
 800174c:	4603      	mov	r3, r0
 800174e:	460c      	mov	r4, r1
 8001750:	4618      	mov	r0, r3
 8001752:	4621      	mov	r1, r4
 8001754:	f7ff f9b8 	bl	8000ac8 <__aeabi_d2f>
 8001758:	4602      	mov	r2, r0
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <Sensor_Calculate+0x378>)
 800175c:	601a      	str	r2, [r3, #0]

      /* Gyro Angle */
      Deg_GX = Roll + Gy_X1 * dt;
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <Sensor_Calculate+0x35c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <Sensor_Calculate+0x328>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	4610      	mov	r0, r2
 800176a:	f7ff fb0b 	bl	8000d84 <__aeabi_fmul>
 800176e:	4603      	mov	r3, r0
 8001770:	e040      	b.n	80017f4 <Sensor_Calculate+0x37c>
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	d2f1a9fc 	.word	0xd2f1a9fc
 800177c:	4060624d 	.word	0x4060624d
 8001780:	1a63c1f8 	.word	0x1a63c1f8
 8001784:	404ca5dc 	.word	0x404ca5dc
 8001788:	200008d4 	.word	0x200008d4
 800178c:	c2a6bd15 	.word	0xc2a6bd15
 8001790:	20000994 	.word	0x20000994
 8001794:	435d66e9 	.word	0x435d66e9
 8001798:	20000998 	.word	0x20000998
 800179c:	c33430cb 	.word	0xc33430cb
 80017a0:	20000014 	.word	0x20000014
 80017a4:	3c23d70a 	.word	0x3c23d70a
 80017a8:	20000a64 	.word	0x20000a64
 80017ac:	3f75c28f 	.word	0x3f75c28f
 80017b0:	200009ac 	.word	0x200009ac
 80017b4:	3f6b851f 	.word	0x3f6b851f
 80017b8:	200008f8 	.word	0x200008f8
 80017bc:	20000924 	.word	0x20000924
 80017c0:	20000a00 	.word	0x20000a00
 80017c4:	20000940 	.word	0x20000940
 80017c8:	20000870 	.word	0x20000870
 80017cc:	20000918 	.word	0x20000918
 80017d0:	20000a70 	.word	0x20000a70
 80017d4:	20000820 	.word	0x20000820
 80017d8:	20000a58 	.word	0x20000a58
 80017dc:	20000914 	.word	0x20000914
 80017e0:	20000930 	.word	0x20000930
 80017e4:	20000a78 	.word	0x20000a78
 80017e8:	200008e8 	.word	0x200008e8
 80017ec:	200008f0 	.word	0x200008f0
 80017f0:	20000988 	.word	0x20000988
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <Sensor_Calculate+0x470>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f7ff f9b9 	bl	8000b74 <__addsf3>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	4b39      	ldr	r3, [pc, #228]	; (80018ec <Sensor_Calculate+0x474>)
 8001808:	601a      	str	r2, [r3, #0]
      Deg_GY = Pitch + Gy_Y1 * dt;
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <Sensor_Calculate+0x478>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <Sensor_Calculate+0x47c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7ff fab5 	bl	8000d84 <__aeabi_fmul>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <Sensor_Calculate+0x480>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4619      	mov	r1, r3
 8001824:	4610      	mov	r0, r2
 8001826:	f7ff f9a5 	bl	8000b74 <__addsf3>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	4b33      	ldr	r3, [pc, #204]	; (80018fc <Sensor_Calculate+0x484>)
 8001830:	601a      	str	r2, [r3, #0]
      Deg_GZ = Yaw + Gy_Z1 * dt;
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <Sensor_Calculate+0x488>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <Sensor_Calculate+0x47c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7ff faa1 	bl	8000d84 <__aeabi_fmul>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <Sensor_Calculate+0x48c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f7ff f991 	bl	8000b74 <__addsf3>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <Sensor_Calculate+0x490>)
 8001858:	601a      	str	r2, [r3, #0]
     // Xm =  (-Mg_Y1 * cos(Roll * DEG2RAD) + Mg_Z1 * sin(Roll * DEG2RAD));
     // Ym =  (Mg_X1 * cos(Pitch * DEG2RAD) + Mg_Y1 * sin(Pitch * DEG2RAD) * sin(Roll * DEG2RAD) + Mg_Z1 * sin(Pitch * DEG2RAD) * cos(Roll * DEG2RAD));
      //Yaw_M = RAD2DEG * atan2(Xm, Ym);  //atan2(분자, 분모)
      //Yaw_G = Deg_GZ;

      Roll = alpha * Deg_GX + (1 - alpha) * Deg_AX;
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <Sensor_Calculate+0x494>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <Sensor_Calculate+0x474>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	4610      	mov	r0, r2
 8001866:	f7ff fa8d 	bl	8000d84 <__aeabi_fmul>
 800186a:	4603      	mov	r3, r0
 800186c:	461c      	mov	r4, r3
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <Sensor_Calculate+0x494>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001878:	f7ff f97a 	bl	8000b70 <__aeabi_fsub>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <Sensor_Calculate+0x498>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f7ff fa7c 	bl	8000d84 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	4620      	mov	r0, r4
 8001892:	f7ff f96f 	bl	8000b74 <__addsf3>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <Sensor_Calculate+0x470>)
 800189c:	601a      	str	r2, [r3, #0]
      Pitch = alpha * Deg_GY + (1 - alpha) * Deg_AY;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <Sensor_Calculate+0x494>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <Sensor_Calculate+0x484>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f7ff fa6b 	bl	8000d84 <__aeabi_fmul>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461c      	mov	r4, r3
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <Sensor_Calculate+0x494>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80018bc:	f7ff f958 	bl	8000b70 <__aeabi_fsub>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <Sensor_Calculate+0x49c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f7ff fa5a 	bl	8000d84 <__aeabi_fmul>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4619      	mov	r1, r3
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff f94d 	bl	8000b74 <__addsf3>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <Sensor_Calculate+0x480>)
 80018e0:	601a      	str	r2, [r3, #0]
      //Yaw = beta * Yaw_G + (1 - beta) * Yaw_M;
}
 80018e2:	bf00      	nop
 80018e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018e8:	20000904 	.word	0x20000904
 80018ec:	2000090c 	.word	0x2000090c
 80018f0:	20000914 	.word	0x20000914
 80018f4:	20000014 	.word	0x20000014
 80018f8:	20000a6c 	.word	0x20000a6c
 80018fc:	2000080c 	.word	0x2000080c
 8001900:	20000a78 	.word	0x20000a78
 8001904:	20000808 	.word	0x20000808
 8001908:	20000990 	.word	0x20000990
 800190c:	20000a64 	.word	0x20000a64
 8001910:	200008e8 	.word	0x200008e8
 8001914:	200008f0 	.word	0x200008f0

08001918 <micros>:
////motor start
uint32_t micros() {
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return (uwTick&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <micros+0x34>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001928:	fb02 f203 	mul.w	r2, r2, r3
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <micros+0x38>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
 8001934:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8001938:	4906      	ldr	r1, [pc, #24]	; (8001954 <micros+0x3c>)
 800193a:	fba1 1303 	umull	r1, r3, r1, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	4413      	add	r3, r2
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000a7c 	.word	0x20000a7c
 8001950:	e000e010 	.word	0xe000e010
 8001954:	38e38e39 	.word	0x38e38e39

08001958 <HAL_Delay>:

void HAL_Delay(__IO uint32_t Delay) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f001 fa06 	bl	8002d70 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

  while((millis() - tickstart) < Delay);
 8001966:	bf00      	nop
 8001968:	f001 fa02 	bl	8002d70 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad2      	subs	r2, r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d3f7      	bcc.n	8001968 <HAL_Delay+0x10>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <delay_us>:

void delay_us(uint32_t us) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t temp = micros();
 8001988:	f7ff ffc6 	bl	8001918 <micros>
 800198c:	6178      	str	r0, [r7, #20]
  uint32_t comp = temp + us;
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  uint8_t  flag = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	74fb      	strb	r3, [r7, #19]
  while(comp > temp){
 800199a:	e017      	b.n	80019cc <delay_us+0x4c>
    if(((uwTick&0x3FFFFF)==0)&&(flag==0)){
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <delay_us+0x5c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d104      	bne.n	80019b2 <delay_us+0x32>
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <delay_us+0x32>
      flag = 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	74fb      	strb	r3, [r7, #19]
    }
    if(flag) temp = micros() + 0x400000UL * 1000;
 80019b2:	7cfb      	ldrb	r3, [r7, #19]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <delay_us+0x46>
 80019b8:	f7ff ffae 	bl	8001918 <micros>
 80019bc:	4603      	mov	r3, r0
 80019be:	f103 437a 	add.w	r3, r3, #4194304000	; 0xfa000000
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e002      	b.n	80019cc <delay_us+0x4c>
    else     temp = micros();
 80019c6:	f7ff ffa7 	bl	8001918 <micros>
 80019ca:	6178      	str	r0, [r7, #20]
  while(comp > temp){
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8e3      	bhi.n	800199c <delay_us+0x1c>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000a7c 	.word	0x20000a7c

080019e0 <motor_control>:
*/
#define num1 3
#define num2 3
#define Time 2000
void motor_control(float roll,float pitch)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    unsigned int step_Roll  = abs( roll  / (num1*ANGLE)) + 0.5;
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fd1c 	bl	8000428 <__aeabi_f2d>
 80019f0:	a347      	add	r3, pc, #284	; (adr r3, 8001b10 <motor_control+0x130>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe99 	bl	800072c <__aeabi_ddiv>
 80019fa:	4603      	mov	r3, r0
 80019fc:	460c      	mov	r4, r1
 80019fe:	4618      	mov	r0, r3
 8001a00:	4621      	mov	r1, r4
 8001a02:	f7ff f819 	bl	8000a38 <__aeabi_d2iz>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bfb8      	it	lt
 8001a0c:	425b      	neglt	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fcf8 	bl	8000404 <__aeabi_i2d>
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <motor_control+0x138>)
 8001a1a:	f7fe fba7 	bl	800016c <__adddf3>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	4618      	mov	r0, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	f7ff f82f 	bl	8000a88 <__aeabi_d2uiz>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	60fb      	str	r3, [r7, #12]
    unsigned int step_Pitch = abs( pitch / (num2*ANGLE)) + 0.5;
 8001a2e:	6838      	ldr	r0, [r7, #0]
 8001a30:	f7fe fcfa 	bl	8000428 <__aeabi_f2d>
 8001a34:	a336      	add	r3, pc, #216	; (adr r3, 8001b10 <motor_control+0x130>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7fe fe77 	bl	800072c <__aeabi_ddiv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460c      	mov	r4, r1
 8001a42:	4618      	mov	r0, r3
 8001a44:	4621      	mov	r1, r4
 8001a46:	f7fe fff7 	bl	8000a38 <__aeabi_d2iz>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bfb8      	it	lt
 8001a50:	425b      	neglt	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fcd6 	bl	8000404 <__aeabi_i2d>
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <motor_control+0x138>)
 8001a5e:	f7fe fb85 	bl	800016c <__adddf3>
 8001a62:	4603      	mov	r3, r0
 8001a64:	460c      	mov	r4, r1
 8001a66:	4618      	mov	r0, r3
 8001a68:	4621      	mov	r1, r4
 8001a6a:	f7ff f80d 	bl	8000a88 <__aeabi_d2uiz>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60bb      	str	r3, [r7, #8]
    unsigned int cnt_Roll = 0, cnt_Pitch =0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
    int dir_Roll,dir_Pitch;
    int max_step=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]

    if(roll>=0) dir_Roll=1;
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fb30 	bl	80010e8 <__aeabi_fcmpge>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <motor_control+0xb4>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e001      	b.n	8001a98 <motor_control+0xb8>
    else dir_Roll=0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
    if(pitch>=0)dir_Pitch=1;
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	6838      	ldr	r0, [r7, #0]
 8001a9e:	f7ff fb23 	bl	80010e8 <__aeabi_fcmpge>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <motor_control+0xce>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	e001      	b.n	8001ab2 <motor_control+0xd2>
    else dir_Pitch=0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]

    if (step_Roll>=step_Pitch) max_step=step_Roll;
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d302      	bcc.n	8001ac0 <motor_control+0xe0>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e001      	b.n	8001ac4 <motor_control+0xe4>
    else max_step=step_Pitch;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	617b      	str	r3, [r7, #20]

    for(int i=0; i<max_step; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	e01a      	b.n	8001b00 <motor_control+0x120>
    {
       if(step_Roll>cnt_Roll)
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d905      	bls.n	8001ade <motor_control+0xfe>
       {
          motor1_Angle(dir_Roll);
 8001ad2:	69f8      	ldr	r0, [r7, #28]
 8001ad4:	f000 f822 	bl	8001b1c <motor1_Angle>
          cnt_Roll++;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3301      	adds	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
       }
       if(step_Pitch>cnt_Pitch)
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d905      	bls.n	8001af2 <motor_control+0x112>
       {
          motor2_Angle(dir_Pitch);
 8001ae6:	69b8      	ldr	r0, [r7, #24]
 8001ae8:	f000 f8c8 	bl	8001c7c <motor2_Angle>
          cnt_Pitch++;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	3301      	adds	r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
       }
       delay_us(Time);
 8001af2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001af6:	f7ff ff43 	bl	8001980 <delay_us>
    for(int i=0; i<max_step; i++)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	3301      	adds	r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbe0      	blt.n	8001aca <motor_control+0xea>
    }

}
 8001b08:	bf00      	nop
 8001b0a:	372c      	adds	r7, #44	; 0x2c
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}
 8001b10:	937fa424 	.word	0x937fa424
 8001b14:	3fdb6db7 	.word	0x3fdb6db7
 8001b18:	3fe00000 	.word	0x3fe00000

08001b1c <motor1_Angle>:
   }
*/


void motor1_Angle(int dir)                                      // motor angle control
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
     if(dir == 1)                                               // ?  방향
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d14b      	bne.n	8001bc2 <motor1_Angle+0xa6>
     {
         htim1.Instance -> CCR1 = Duty_Rate[chan1_1];
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <motor1_Angle+0x14c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a4f      	ldr	r2, [pc, #316]	; (8001c6c <motor1_Angle+0x150>)
 8001b30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b34:	4b4e      	ldr	r3, [pc, #312]	; (8001c70 <motor1_Angle+0x154>)
 8001b36:	681c      	ldr	r4, [r3, #0]
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f7ff fb0f 	bl	800115c <__aeabi_f2uiz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6363      	str	r3, [r4, #52]	; 0x34
         htim1.Instance -> CCR2 = Duty_Rate[chan1_2];
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <motor1_Angle+0x158>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a49      	ldr	r2, [pc, #292]	; (8001c6c <motor1_Angle+0x150>)
 8001b48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <motor1_Angle+0x154>)
 8001b4e:	681c      	ldr	r4, [r3, #0]
 8001b50:	4610      	mov	r0, r2
 8001b52:	f7ff fb03 	bl	800115c <__aeabi_f2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	63a3      	str	r3, [r4, #56]	; 0x38
         htim1.Instance -> CCR3 = Duty_Rate[chan1_3];
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <motor1_Angle+0x15c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a43      	ldr	r2, [pc, #268]	; (8001c6c <motor1_Angle+0x150>)
 8001b60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b64:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <motor1_Angle+0x154>)
 8001b66:	681c      	ldr	r4, [r3, #0]
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f7ff faf7 	bl	800115c <__aeabi_f2uiz>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	63e3      	str	r3, [r4, #60]	; 0x3c


         chan1_1 = chan1_1 + num1;
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <motor1_Angle+0x14c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3303      	adds	r3, #3
 8001b78:	4a3b      	ldr	r2, [pc, #236]	; (8001c68 <motor1_Angle+0x14c>)
 8001b7a:	6013      	str	r3, [r2, #0]
         chan1_2 = chan1_2 + num1;
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <motor1_Angle+0x158>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3303      	adds	r3, #3
 8001b82:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <motor1_Angle+0x158>)
 8001b84:	6013      	str	r3, [r2, #0]
         chan1_3 = chan1_3 + num1;
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <motor1_Angle+0x15c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	4a3a      	ldr	r2, [pc, #232]	; (8001c78 <motor1_Angle+0x15c>)
 8001b8e:	6013      	str	r3, [r2, #0]

         if(chan1_1 >= 360 ) {chan1_1 = 0;}
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <motor1_Angle+0x14c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001b98:	db02      	blt.n	8001ba0 <motor1_Angle+0x84>
 8001b9a:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <motor1_Angle+0x14c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
         if(chan1_2 >= 360 ) {chan1_2 = 0;}
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <motor1_Angle+0x158>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001ba8:	db02      	blt.n	8001bb0 <motor1_Angle+0x94>
 8001baa:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <motor1_Angle+0x158>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
         if(chan1_3 >= 360 ) {chan1_3 = 0;}
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <motor1_Angle+0x15c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001bb8:	db51      	blt.n	8001c5e <motor1_Angle+0x142>
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <motor1_Angle+0x15c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
         if(chan1_2 <= 0 ) {chan1_2 = 360;}
         if(chan1_3 <= 0 ) {chan1_3 = 360;}

      }

}
 8001bc0:	e04d      	b.n	8001c5e <motor1_Angle+0x142>
      else if(dir == 0)                                          // ?  방향
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d14a      	bne.n	8001c5e <motor1_Angle+0x142>
         htim1.Instance -> CCR1 = Duty_Rate[chan1_1];
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <motor1_Angle+0x14c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <motor1_Angle+0x150>)
 8001bce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bd2:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <motor1_Angle+0x154>)
 8001bd4:	681c      	ldr	r4, [r3, #0]
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f7ff fac0 	bl	800115c <__aeabi_f2uiz>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	6363      	str	r3, [r4, #52]	; 0x34
         htim1.Instance -> CCR2 = Duty_Rate[chan1_2];
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <motor1_Angle+0x158>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <motor1_Angle+0x150>)
 8001be6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <motor1_Angle+0x154>)
 8001bec:	681c      	ldr	r4, [r3, #0]
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f7ff fab4 	bl	800115c <__aeabi_f2uiz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	63a3      	str	r3, [r4, #56]	; 0x38
         htim1.Instance -> CCR3 = Duty_Rate[chan1_3];
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <motor1_Angle+0x15c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <motor1_Angle+0x150>)
 8001bfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <motor1_Angle+0x154>)
 8001c04:	681c      	ldr	r4, [r3, #0]
 8001c06:	4610      	mov	r0, r2
 8001c08:	f7ff faa8 	bl	800115c <__aeabi_f2uiz>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	63e3      	str	r3, [r4, #60]	; 0x3c
         chan1_1 = chan1_1 - num1;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <motor1_Angle+0x14c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <motor1_Angle+0x14c>)
 8001c18:	6013      	str	r3, [r2, #0]
         chan1_2 = chan1_2 - num1;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <motor1_Angle+0x158>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3b03      	subs	r3, #3
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <motor1_Angle+0x158>)
 8001c22:	6013      	str	r3, [r2, #0]
         chan1_3 = chan1_3 - num1;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <motor1_Angle+0x15c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <motor1_Angle+0x15c>)
 8001c2c:	6013      	str	r3, [r2, #0]
         if(chan1_1 <= 0 ) {chan1_1 = 360;}
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <motor1_Angle+0x14c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	dc03      	bgt.n	8001c3e <motor1_Angle+0x122>
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <motor1_Angle+0x14c>)
 8001c38:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001c3c:	601a      	str	r2, [r3, #0]
         if(chan1_2 <= 0 ) {chan1_2 = 360;}
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <motor1_Angle+0x158>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dc03      	bgt.n	8001c4e <motor1_Angle+0x132>
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <motor1_Angle+0x158>)
 8001c48:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001c4c:	601a      	str	r2, [r3, #0]
         if(chan1_3 <= 0 ) {chan1_3 = 360;}
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <motor1_Angle+0x15c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	dc03      	bgt.n	8001c5e <motor1_Angle+0x142>
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <motor1_Angle+0x15c>)
 8001c58:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200007bc 	.word	0x200007bc
 8001c6c:	2000021c 	.word	0x2000021c
 8001c70:	20000948 	.word	0x20000948
 8001c74:	20000004 	.word	0x20000004
 8001c78:	20000008 	.word	0x20000008

08001c7c <motor2_Angle>:

void motor2_Angle(int dir)                                      // motor angle control
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

      if(dir==1)            // ?  방향
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d14b      	bne.n	8001d22 <motor2_Angle+0xa6>
      {
         htim2.Instance -> CCR1 = Duty_Rate[chan2_1];
 8001c8a:	4b4f      	ldr	r3, [pc, #316]	; (8001dc8 <motor2_Angle+0x14c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <motor2_Angle+0x150>)
 8001c90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c94:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <motor2_Angle+0x154>)
 8001c96:	681c      	ldr	r4, [r3, #0]
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7ff fa5f 	bl	800115c <__aeabi_f2uiz>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6363      	str	r3, [r4, #52]	; 0x34
         htim2.Instance -> CCR2 = Duty_Rate[chan2_2];
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <motor2_Angle+0x158>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a49      	ldr	r2, [pc, #292]	; (8001dcc <motor2_Angle+0x150>)
 8001ca8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cac:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <motor2_Angle+0x154>)
 8001cae:	681c      	ldr	r4, [r3, #0]
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f7ff fa53 	bl	800115c <__aeabi_f2uiz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	63a3      	str	r3, [r4, #56]	; 0x38
         htim2.Instance -> CCR3 = Duty_Rate[chan2_3];
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <motor2_Angle+0x15c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a43      	ldr	r2, [pc, #268]	; (8001dcc <motor2_Angle+0x150>)
 8001cc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cc4:	4b42      	ldr	r3, [pc, #264]	; (8001dd0 <motor2_Angle+0x154>)
 8001cc6:	681c      	ldr	r4, [r3, #0]
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f7ff fa47 	bl	800115c <__aeabi_f2uiz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	63e3      	str	r3, [r4, #60]	; 0x3c


         chan2_1 = chan2_1 + num2;
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <motor2_Angle+0x14c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <motor2_Angle+0x14c>)
 8001cda:	6013      	str	r3, [r2, #0]
         chan2_2 = chan2_2 + num2;
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <motor2_Angle+0x158>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	4a3c      	ldr	r2, [pc, #240]	; (8001dd4 <motor2_Angle+0x158>)
 8001ce4:	6013      	str	r3, [r2, #0]
         chan2_3 = chan2_3 + num2;
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <motor2_Angle+0x15c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3303      	adds	r3, #3
 8001cec:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <motor2_Angle+0x15c>)
 8001cee:	6013      	str	r3, [r2, #0]

         if(chan2_1 >= 360 ) {chan2_1 = 0;}
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <motor2_Angle+0x14c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001cf8:	db02      	blt.n	8001d00 <motor2_Angle+0x84>
 8001cfa:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <motor2_Angle+0x14c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
         if(chan2_2 >= 360 ) {chan2_2 = 0;}
 8001d00:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <motor2_Angle+0x158>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001d08:	db02      	blt.n	8001d10 <motor2_Angle+0x94>
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <motor2_Angle+0x158>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
         if(chan2_3 >= 360 ) {chan2_3 = 0;}
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <motor2_Angle+0x15c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001d18:	db51      	blt.n	8001dbe <motor2_Angle+0x142>
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <motor2_Angle+0x15c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
         if(chan2_2 <= 0 ) {chan2_2 = 360;}
         if(chan2_3 <= 0 ) {chan2_3 = 360;}

      }

}
 8001d20:	e04d      	b.n	8001dbe <motor2_Angle+0x142>
      else if(dir==0)      // ?  방향
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d14a      	bne.n	8001dbe <motor2_Angle+0x142>
         htim2.Instance -> CCR1 = Duty_Rate[chan2_1];
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <motor2_Angle+0x14c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <motor2_Angle+0x150>)
 8001d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <motor2_Angle+0x154>)
 8001d34:	681c      	ldr	r4, [r3, #0]
 8001d36:	4610      	mov	r0, r2
 8001d38:	f7ff fa10 	bl	800115c <__aeabi_f2uiz>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	6363      	str	r3, [r4, #52]	; 0x34
         htim2.Instance -> CCR2 = Duty_Rate[chan2_2];
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <motor2_Angle+0x158>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <motor2_Angle+0x150>)
 8001d46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <motor2_Angle+0x154>)
 8001d4c:	681c      	ldr	r4, [r3, #0]
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f7ff fa04 	bl	800115c <__aeabi_f2uiz>
 8001d54:	4603      	mov	r3, r0
 8001d56:	63a3      	str	r3, [r4, #56]	; 0x38
         htim2.Instance -> CCR3 = Duty_Rate[chan2_3];
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <motor2_Angle+0x15c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <motor2_Angle+0x150>)
 8001d5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <motor2_Angle+0x154>)
 8001d64:	681c      	ldr	r4, [r3, #0]
 8001d66:	4610      	mov	r0, r2
 8001d68:	f7ff f9f8 	bl	800115c <__aeabi_f2uiz>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	63e3      	str	r3, [r4, #60]	; 0x3c
         chan2_1 = chan2_1 - num2;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <motor2_Angle+0x14c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <motor2_Angle+0x14c>)
 8001d78:	6013      	str	r3, [r2, #0]
         chan2_2 = chan2_2 - num2;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <motor2_Angle+0x158>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3b03      	subs	r3, #3
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <motor2_Angle+0x158>)
 8001d82:	6013      	str	r3, [r2, #0]
         chan2_3 = chan2_3 - num2;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <motor2_Angle+0x15c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <motor2_Angle+0x15c>)
 8001d8c:	6013      	str	r3, [r2, #0]
         if(chan2_1 <= 0 ) {chan2_1 = 360;}
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <motor2_Angle+0x14c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	dc03      	bgt.n	8001d9e <motor2_Angle+0x122>
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <motor2_Angle+0x14c>)
 8001d98:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001d9c:	601a      	str	r2, [r3, #0]
         if(chan2_2 <= 0 ) {chan2_2 = 360;}
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <motor2_Angle+0x158>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dc03      	bgt.n	8001dae <motor2_Angle+0x132>
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <motor2_Angle+0x158>)
 8001da8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001dac:	601a      	str	r2, [r3, #0]
         if(chan2_3 <= 0 ) {chan2_3 = 360;}
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <motor2_Angle+0x15c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	dc03      	bgt.n	8001dbe <motor2_Angle+0x142>
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <motor2_Angle+0x15c>)
 8001db8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001dbc:	601a      	str	r2, [r3, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd90      	pop	{r4, r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200007c0 	.word	0x200007c0
 8001dcc:	2000021c 	.word	0x2000021c
 8001dd0:	200009c0 	.word	0x200009c0
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	20000010 	.word	0x20000010
 8001ddc:	00000000 	.word	0x00000000

08001de0 <DoFullPID1>:
float Output =0 , Error = 0, Error2 = 0;
float P_term = 0, I_term = 0, D_term = 0;
float P_term2 = 0, I_term2 = 0, D_term2 = 0;

float DoFullPID1()
{
 8001de0:	b598      	push	{r3, r4, r7, lr}
 8001de2:	af00      	add	r7, sp, #0


  Error = avg_Roll - Roll;  Error_Sum += Error*dt;
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <DoFullPID1+0x120>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <DoFullPID1+0x124>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f7fe febe 	bl	8000b70 <__aeabi_fsub>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <DoFullPID1+0x128>)
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <DoFullPID1+0x128>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <DoFullPID1+0x12c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f7fe ffbc 	bl	8000d84 <__aeabi_fmul>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <DoFullPID1+0x130>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f7fe feac 	bl	8000b74 <__addsf3>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <DoFullPID1+0x130>)
 8001e22:	601a      	str	r2, [r3, #0]
  //if( Error > -5 && Error < 5 )

  P_term = Kp_r * Error;
 8001e24:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <DoFullPID1+0x128>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <DoFullPID1+0x134>)
 8001e2a:	6013      	str	r3, [r2, #0]
  I_term = Ki_r * Error_Sum;
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <DoFullPID1+0x130>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe faf9 	bl	8000428 <__aeabi_f2d>
 8001e36:	a32e      	add	r3, pc, #184	; (adr r3, 8001ef0 <DoFullPID1+0x110>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fb4c 	bl	80004d8 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4618      	mov	r0, r3
 8001e46:	4621      	mov	r1, r4
 8001e48:	f7fe fe3e 	bl	8000ac8 <__aeabi_d2f>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <DoFullPID1+0x138>)
 8001e50:	601a      	str	r2, [r3, #0]
  D_term = Kd_r * ((Error - PrevError_C)/dt);
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <DoFullPID1+0x128>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <DoFullPID1+0x13c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f7fe fe87 	bl	8000b70 <__aeabi_fsub>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <DoFullPID1+0x12c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	f7ff f83d 	bl	8000eec <__aeabi_fdiv>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fad7 	bl	8000428 <__aeabi_f2d>
 8001e7a:	a31f      	add	r3, pc, #124	; (adr r3, 8001ef8 <DoFullPID1+0x118>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fb2a 	bl	80004d8 <__aeabi_dmul>
 8001e84:	4603      	mov	r3, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	f7fe fe1c 	bl	8000ac8 <__aeabi_d2f>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <DoFullPID1+0x140>)
 8001e94:	601a      	str	r2, [r3, #0]

  Output = P_term + I_term + D_term;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <DoFullPID1+0x134>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <DoFullPID1+0x138>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7fe fe67 	bl	8000b74 <__addsf3>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <DoFullPID1+0x140>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	f7fe fe5f 	bl	8000b74 <__addsf3>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <DoFullPID1+0x144>)
 8001ebc:	601a      	str	r2, [r3, #0]
  if (abs(Output)>5) Output=5;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <DoFullPID1+0x144>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f924 	bl	8001110 <__aeabi_f2iz>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bfb8      	it	lt
 8001ece:	425b      	neglt	r3, r3
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	dd02      	ble.n	8001eda <DoFullPID1+0xfa>
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <DoFullPID1+0x144>)
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <DoFullPID1+0x148>)
 8001ed8:	601a      	str	r2, [r3, #0]
  PrevError_C = Error;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <DoFullPID1+0x128>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <DoFullPID1+0x13c>)
 8001ee0:	6013      	str	r3, [r2, #0]

  return (Output);
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <DoFullPID1+0x144>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd98      	pop	{r3, r4, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	f3af 8000 	nop.w
 8001ef0:	47ae147b 	.word	0x47ae147b
 8001ef4:	3f847ae1 	.word	0x3f847ae1
 8001ef8:	47ae147b 	.word	0x47ae147b
 8001efc:	3f947ae1 	.word	0x3f947ae1
 8001f00:	20000218 	.word	0x20000218
 8001f04:	20000904 	.word	0x20000904
 8001f08:	200007d0 	.word	0x200007d0
 8001f0c:	20000014 	.word	0x20000014
 8001f10:	200007c8 	.word	0x200007c8
 8001f14:	200007d8 	.word	0x200007d8
 8001f18:	200007dc 	.word	0x200007dc
 8001f1c:	200007c4 	.word	0x200007c4
 8001f20:	200007e0 	.word	0x200007e0
 8001f24:	200007cc 	.word	0x200007cc
 8001f28:	40a00000 	.word	0x40a00000
 8001f2c:	00000000 	.word	0x00000000

08001f30 <DoFullPID2>:
float avg_Pitch = 0;
float Prev_input2 = 0;
float Output2 = 0;
float dInput;
float DoFullPID2()
{
 8001f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f34:	af00      	add	r7, sp, #0

  Error2 = avg_Pitch - Pitch;  //Error_Sum2 += Error2*dt;
 8001f36:	4b44      	ldr	r3, [pc, #272]	; (8002048 <DoFullPID2+0x118>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <DoFullPID2+0x11c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4610      	mov	r0, r2
 8001f42:	f7fe fe15 	bl	8000b70 <__aeabi_fsub>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <DoFullPID2+0x120>)
 8001f4c:	601a      	str	r2, [r3, #0]
  dInput= Pitch-Prev_input2;
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <DoFullPID2+0x11c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b40      	ldr	r3, [pc, #256]	; (8002054 <DoFullPID2+0x124>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4610      	mov	r0, r2
 8001f5a:	f7fe fe09 	bl	8000b70 <__aeabi_fsub>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <DoFullPID2+0x128>)
 8001f64:	601a      	str	r2, [r3, #0]
  Prev_input2= Pitch;
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <DoFullPID2+0x11c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <DoFullPID2+0x124>)
 8001f6c:	6013      	str	r3, [r2, #0]
  P_term2 = Kp_p * Error2;
 8001f6e:	4b38      	ldr	r3, [pc, #224]	; (8002050 <DoFullPID2+0x120>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a3a      	ldr	r2, [pc, #232]	; (800205c <DoFullPID2+0x12c>)
 8001f74:	6013      	str	r3, [r2, #0]
  I_term2 += Ki_p * Error2 * dt;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <DoFullPID2+0x130>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fa54 	bl	8000428 <__aeabi_f2d>
 8001f80:	4604      	mov	r4, r0
 8001f82:	460d      	mov	r5, r1
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <DoFullPID2+0x120>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fa4d 	bl	8000428 <__aeabi_f2d>
 8001f8e:	4680      	mov	r8, r0
 8001f90:	4689      	mov	r9, r1
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <DoFullPID2+0x134>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fa46 	bl	8000428 <__aeabi_f2d>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4640      	mov	r0, r8
 8001fa2:	4649      	mov	r1, r9
 8001fa4:	f7fe fa98 	bl	80004d8 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4620      	mov	r0, r4
 8001fae:	4629      	mov	r1, r5
 8001fb0:	f7fe f8dc 	bl	800016c <__adddf3>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	4618      	mov	r0, r3
 8001fba:	4621      	mov	r1, r4
 8001fbc:	f7fe fd84 	bl	8000ac8 <__aeabi_d2f>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <DoFullPID2+0x130>)
 8001fc4:	601a      	str	r2, [r3, #0]
  D_term2 = -Kd_p * dInput / dt;
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <DoFullPID2+0x128>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa2c 	bl	8000428 <__aeabi_f2d>
 8001fd0:	a31b      	add	r3, pc, #108	; (adr r3, 8002040 <DoFullPID2+0x110>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fa7f 	bl	80004d8 <__aeabi_dmul>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460c      	mov	r4, r1
 8001fde:	4625      	mov	r5, r4
 8001fe0:	461c      	mov	r4, r3
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <DoFullPID2+0x134>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fa1e 	bl	8000428 <__aeabi_f2d>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe fb9a 	bl	800072c <__aeabi_ddiv>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4621      	mov	r1, r4
 8002000:	f7fe fd62 	bl	8000ac8 <__aeabi_d2f>
 8002004:	4602      	mov	r2, r0
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <DoFullPID2+0x138>)
 8002008:	601a      	str	r2, [r3, #0]

  Output2 = P_term2 + I_term2 + D_term2;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <DoFullPID2+0x12c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <DoFullPID2+0x130>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4619      	mov	r1, r3
 8002014:	4610      	mov	r0, r2
 8002016:	f7fe fdad 	bl	8000b74 <__addsf3>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <DoFullPID2+0x138>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	4610      	mov	r0, r2
 8002026:	f7fe fda5 	bl	8000b74 <__addsf3>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <DoFullPID2+0x13c>)
 8002030:	601a      	str	r2, [r3, #0]

  return (Output2);
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <DoFullPID2+0x13c>)
 8002034:	681b      	ldr	r3, [r3, #0]
}
 8002036:	4618      	mov	r0, r3
 8002038:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	9999999a 	.word	0x9999999a
 8002044:	bfa99999 	.word	0xbfa99999
 8002048:	200007f0 	.word	0x200007f0
 800204c:	20000a6c 	.word	0x20000a6c
 8002050:	200007d4 	.word	0x200007d4
 8002054:	200007f4 	.word	0x200007f4
 8002058:	2000091c 	.word	0x2000091c
 800205c:	200007e4 	.word	0x200007e4
 8002060:	200007e8 	.word	0x200007e8
 8002064:	20000014 	.word	0x20000014
 8002068:	200007ec 	.word	0x200007ec
 800206c:	200007f8 	.word	0x200007f8

08002070 <HAL_TIM_PeriodElapsedCallback>:

////motor end
//ISP_func
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) ///new
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM4)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d113      	bne.n	80020aa <HAL_TIM_PeriodElapsedCallback+0x3a>
   {
      flag = 0;
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
      //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_SET);
      //read_AK8963_data();
      read_MPU9250_data();
 8002088:	f7ff f98a 	bl	80013a0 <read_MPU9250_data>
      Sensor_Calculate();
 800208c:	f7ff f9f4 	bl	8001478 <Sensor_Calculate>
      temp_gap = DoFullPID1();
 8002090:	f7ff fea6 	bl	8001de0 <DoFullPID1>
 8002094:	4602      	mov	r2, r0
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002098:	601a      	str	r2, [r3, #0]
      temp_gap2 = DoFullPID2();
 800209a:	f7ff ff49 	bl	8001f30 <DoFullPID2>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80020a2:	601a      	str	r2, [r3, #0]
      //printf("%5.2f\r\n",temp_gap);
      //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_RESET);
      flag = 1;
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
   }
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40000800 	.word	0x40000800
 80020b8:	20000214 	.word	0x20000214
 80020bc:	200008ec 	.word	0x200008ec
 80020c0:	200008f4 	.word	0x200008f4
 80020c4:	00000000 	.word	0x00000000

080020c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   float si;
   for(int i = 0; i <360; i++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	e034      	b.n	800213e <main+0x76>
   {
       si = 180 + 180*sin((2*PI*i)/360);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe f995 	bl	8000404 <__aeabi_i2d>
 80020da:	a33b      	add	r3, pc, #236	; (adr r3, 80021c8 <main+0x100>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe f9fa 	bl	80004d8 <__aeabi_dmul>
 80020e4:	4603      	mov	r3, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	4618      	mov	r0, r3
 80020ea:	4621      	mov	r1, r4
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <main+0x108>)
 80020f2:	f7fe fb1b 	bl	800072c <__aeabi_ddiv>
 80020f6:	4603      	mov	r3, r0
 80020f8:	460c      	mov	r4, r1
 80020fa:	4618      	mov	r0, r3
 80020fc:	4621      	mov	r1, r4
 80020fe:	f008 f8ed 	bl	800a2dc <sin>
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <main+0x10c>)
 8002108:	f7fe f9e6 	bl	80004d8 <__aeabi_dmul>
 800210c:	4603      	mov	r3, r0
 800210e:	460c      	mov	r4, r1
 8002110:	4618      	mov	r0, r3
 8002112:	4621      	mov	r1, r4
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <main+0x10c>)
 800211a:	f7fe f827 	bl	800016c <__adddf3>
 800211e:	4603      	mov	r3, r0
 8002120:	460c      	mov	r4, r1
 8002122:	4618      	mov	r0, r3
 8002124:	4621      	mov	r1, r4
 8002126:	f7fe fccf 	bl	8000ac8 <__aeabi_d2f>
 800212a:	4603      	mov	r3, r0
 800212c:	603b      	str	r3, [r7, #0]
       Duty_Rate[i] = si;
 800212e:	492a      	ldr	r1, [pc, #168]	; (80021d8 <main+0x110>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(int i = 0; i <360; i++)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3301      	adds	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002144:	dbc6      	blt.n	80020d4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002146:	f000 fdbb 	bl	8002cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800214a:	f000 f853 	bl	80021f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800214e:	f000 fa47 	bl	80025e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002152:	f000 f895 	bl	8002280 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002156:	f000 fa19 	bl	800258c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800215a:	f000 f9c9 	bl	80024f0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800215e:	f000 f8bd 	bl	80022dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8002162:	f000 f957 	bl	8002414 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);          // motor1
 8002166:	2100      	movs	r1, #0
 8002168:	481c      	ldr	r0, [pc, #112]	; (80021dc <main+0x114>)
 800216a:	f004 f905 	bl	8006378 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800216e:	2104      	movs	r1, #4
 8002170:	481a      	ldr	r0, [pc, #104]	; (80021dc <main+0x114>)
 8002172:	f004 f901 	bl	8006378 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002176:	2108      	movs	r1, #8
 8002178:	4818      	ldr	r0, [pc, #96]	; (80021dc <main+0x114>)
 800217a:	f004 f8fd 	bl	8006378 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);          // motor2
 800217e:	2100      	movs	r1, #0
 8002180:	4817      	ldr	r0, [pc, #92]	; (80021e0 <main+0x118>)
 8002182:	f004 f8f9 	bl	8006378 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002186:	2104      	movs	r1, #4
 8002188:	4815      	ldr	r0, [pc, #84]	; (80021e0 <main+0x118>)
 800218a:	f004 f8f5 	bl	8006378 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800218e:	2108      	movs	r1, #8
 8002190:	4813      	ldr	r0, [pc, #76]	; (80021e0 <main+0x118>)
 8002192:	f004 f8f1 	bl	8006378 <HAL_TIM_PWM_Start>
  init_MPU9250();
 8002196:	f7ff f833 	bl	8001200 <init_MPU9250>
  //init_AK8963();
  //MPU9250_Calibration();
  //AK8963_Offset();
  HAL_TIM_Base_Start_IT(&htim4);///Timer On
 800219a:	4812      	ldr	r0, [pc, #72]	; (80021e4 <main+0x11c>)
 800219c:	f004 f89d 	bl	80062da <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     while(flag == 1)
 80021a0:	e00a      	b.n	80021b8 <main+0xf0>
     {
//    	if (abs(temp_gap)<5 && abs(temp_gap2)<5) motor_control(0,0);
//    	else
    	motor_control(temp_gap,temp_gap2);
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <main+0x120>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <main+0x124>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f7ff fc17 	bl	80019e0 <motor_control>
        //printf("%5.2f, %5.2f\r\n",temp_gap , temp_gap2);
        flag = 0;
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <main+0x128>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
     while(flag == 1)
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <main+0x128>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d0f0      	beq.n	80021a2 <main+0xda>
 80021c0:	e7fa      	b.n	80021b8 <main+0xf0>
 80021c2:	bf00      	nop
 80021c4:	f3af 8000 	nop.w
 80021c8:	54411744 	.word	0x54411744
 80021cc:	401921fb 	.word	0x401921fb
 80021d0:	40768000 	.word	0x40768000
 80021d4:	40668000 	.word	0x40668000
 80021d8:	2000021c 	.word	0x2000021c
 80021dc:	20000948 	.word	0x20000948
 80021e0:	200009c0 	.word	0x200009c0
 80021e4:	20000830 	.word	0x20000830
 80021e8:	200008ec 	.word	0x200008ec
 80021ec:	200008f4 	.word	0x200008f4
 80021f0:	20000214 	.word	0x20000214

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b090      	sub	sp, #64	; 0x40
 80021f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	2228      	movs	r2, #40	; 0x28
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f005 fb4a 	bl	800789c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002216:	2301      	movs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800221a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800221e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002224:	2301      	movs	r3, #1
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002228:	2302      	movs	r3, #2
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800222c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002232:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fc05 	bl	8005a4c <HAL_RCC_OscConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002248:	f000 fa54 	bl	80026f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224c:	230f      	movs	r3, #15
 800224e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002250:	2302      	movs	r3, #2
 8002252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800225c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2102      	movs	r1, #2
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fe70 	bl	8005f4c <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002272:	f000 fa3f 	bl	80026f4 <Error_Handler>
  }
}
 8002276:	bf00      	nop
 8002278:	3740      	adds	r7, #64	; 0x40
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <MX_I2C1_Init+0x50>)
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <MX_I2C1_Init+0x54>)
 8002288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_I2C1_Init+0x50>)
 800228c:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <MX_I2C1_Init+0x58>)
 800228e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <MX_I2C1_Init+0x50>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 208;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_I2C1_Init+0x50>)
 8002298:	22d0      	movs	r2, #208	; 0xd0
 800229a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <MX_I2C1_Init+0x50>)
 800229e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MX_I2C1_Init+0x50>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 24;
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <MX_I2C1_Init+0x50>)
 80022ac:	2218      	movs	r2, #24
 80022ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <MX_I2C1_Init+0x50>)
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_I2C1_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022bc:	4804      	ldr	r0, [pc, #16]	; (80022d0 <MX_I2C1_Init+0x50>)
 80022be:	f001 f863 	bl	8003388 <HAL_I2C_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022c8:	f000 fa14 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000878 	.word	0x20000878
 80022d4:	40005400 	.word	0x40005400
 80022d8:	00061a80 	.word	0x00061a80

080022dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b092      	sub	sp, #72	; 0x48
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
 80022fc:	615a      	str	r2, [r3, #20]
 80022fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2220      	movs	r2, #32
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f005 fac8 	bl	800789c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <MX_TIM1_Init+0x130>)
 800230e:	4a40      	ldr	r2, [pc, #256]	; (8002410 <MX_TIM1_Init+0x134>)
 8002310:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <MX_TIM1_Init+0x130>)
 8002314:	2209      	movs	r2, #9
 8002316:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <MX_TIM1_Init+0x130>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 360-1;
 800231e:	4b3b      	ldr	r3, [pc, #236]	; (800240c <MX_TIM1_Init+0x130>)
 8002320:	f240 1267 	movw	r2, #359	; 0x167
 8002324:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <MX_TIM1_Init+0x130>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800232c:	4b37      	ldr	r3, [pc, #220]	; (800240c <MX_TIM1_Init+0x130>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <MX_TIM1_Init+0x130>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002338:	4834      	ldr	r0, [pc, #208]	; (800240c <MX_TIM1_Init+0x130>)
 800233a:	f003 fff1 	bl	8006320 <HAL_TIM_PWM_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002344:	f000 f9d6 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002350:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002354:	4619      	mov	r1, r3
 8002356:	482d      	ldr	r0, [pc, #180]	; (800240c <MX_TIM1_Init+0x130>)
 8002358:	f004 fd8e 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002362:	f000 f9c7 	bl	80026f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002366:	2360      	movs	r3, #96	; 0x60
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002372:	2300      	movs	r3, #0
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002386:	2200      	movs	r2, #0
 8002388:	4619      	mov	r1, r3
 800238a:	4820      	ldr	r0, [pc, #128]	; (800240c <MX_TIM1_Init+0x130>)
 800238c:	f004 f92e 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002396:	f000 f9ad 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800239a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239e:	2204      	movs	r2, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	481a      	ldr	r0, [pc, #104]	; (800240c <MX_TIM1_Init+0x130>)
 80023a4:	f004 f922 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80023ae:	f000 f9a1 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b6:	2208      	movs	r2, #8
 80023b8:	4619      	mov	r1, r3
 80023ba:	4814      	ldr	r0, [pc, #80]	; (800240c <MX_TIM1_Init+0x130>)
 80023bc:	f004 f916 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80023c6:	f000 f995 	bl	80026f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <MX_TIM1_Init+0x130>)
 80023ee:	f004 fd87 	bl	8006f00 <HAL_TIMEx_ConfigBreakDeadTime>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80023f8:	f000 f97c 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <MX_TIM1_Init+0x130>)
 80023fe:	f000 fa67 	bl	80028d0 <HAL_TIM_MspPostInit>

}
 8002402:	bf00      	nop
 8002404:	3748      	adds	r7, #72	; 0x48
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000948 	.word	0x20000948
 8002410:	40012c00 	.word	0x40012c00

08002414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241a:	f107 0320 	add.w	r3, r7, #32
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	615a      	str	r2, [r3, #20]
 8002434:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <MX_TIM2_Init+0xd8>)
 8002438:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800243c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <MX_TIM2_Init+0xd8>)
 8002440:	2209      	movs	r2, #9
 8002442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <MX_TIM2_Init+0xd8>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 360-1;
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <MX_TIM2_Init+0xd8>)
 800244c:	f240 1267 	movw	r2, #359	; 0x167
 8002450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <MX_TIM2_Init+0xd8>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <MX_TIM2_Init+0xd8>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800245e:	4823      	ldr	r0, [pc, #140]	; (80024ec <MX_TIM2_Init+0xd8>)
 8002460:	f003 ff5e 	bl	8006320 <HAL_TIM_PWM_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800246a:	f000 f943 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002476:	f107 0320 	add.w	r3, r7, #32
 800247a:	4619      	mov	r1, r3
 800247c:	481b      	ldr	r0, [pc, #108]	; (80024ec <MX_TIM2_Init+0xd8>)
 800247e:	f004 fcfb 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002488:	f000 f934 	bl	80026f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800248c:	2360      	movs	r3, #96	; 0x60
 800248e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	4619      	mov	r1, r3
 80024a2:	4812      	ldr	r0, [pc, #72]	; (80024ec <MX_TIM2_Init+0xd8>)
 80024a4:	f004 f8a2 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80024ae:	f000 f921 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2204      	movs	r2, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	480c      	ldr	r0, [pc, #48]	; (80024ec <MX_TIM2_Init+0xd8>)
 80024ba:	f004 f897 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024c4:	f000 f916 	bl	80026f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2208      	movs	r2, #8
 80024cc:	4619      	mov	r1, r3
 80024ce:	4807      	ldr	r0, [pc, #28]	; (80024ec <MX_TIM2_Init+0xd8>)
 80024d0:	f004 f88c 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80024da:	f000 f90b 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <MX_TIM2_Init+0xd8>)
 80024e0:	f000 f9f6 	bl	80028d0 <HAL_TIM_MspPostInit>

}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200009c0 	.word	0x200009c0

080024f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0308 	add.w	r3, r7, #8
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	463b      	mov	r3, r7
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <MX_TIM4_Init+0x94>)
 800250e:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <MX_TIM4_Init+0x98>)
 8002510:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <MX_TIM4_Init+0x94>)
 8002514:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002518:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_TIM4_Init+0x94>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_TIM4_Init+0x94>)
 8002522:	2263      	movs	r2, #99	; 0x63
 8002524:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <MX_TIM4_Init+0x94>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_TIM4_Init+0x94>)
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002532:	4814      	ldr	r0, [pc, #80]	; (8002584 <MX_TIM4_Init+0x94>)
 8002534:	f003 fea6 	bl	8006284 <HAL_TIM_Base_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800253e:	f000 f8d9 	bl	80026f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	4619      	mov	r1, r3
 800254e:	480d      	ldr	r0, [pc, #52]	; (8002584 <MX_TIM4_Init+0x94>)
 8002550:	f004 f912 	bl	8006778 <HAL_TIM_ConfigClockSource>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800255a:	f000 f8cb 	bl	80026f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002566:	463b      	mov	r3, r7
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <MX_TIM4_Init+0x94>)
 800256c:	f004 fc84 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002576:	f000 f8bd 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000830 	.word	0x20000830
 8002588:	40000800 	.word	0x40000800

0800258c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <MX_USART2_UART_Init+0x50>)
 8002594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 8002598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800259c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 80025b2:	220c      	movs	r2, #12
 80025b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MX_USART2_UART_Init+0x4c>)
 80025c4:	f004 fcff 	bl	8006fc6 <HAL_UART_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025ce:	f000 f891 	bl	80026f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000a08 	.word	0x20000a08
 80025dc:	40004400 	.word	0x40004400

080025e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f4:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <MX_GPIO_Init+0x100>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a39      	ldr	r2, [pc, #228]	; (80026e0 <MX_GPIO_Init+0x100>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <MX_GPIO_Init+0x100>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800260c:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <MX_GPIO_Init+0x100>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4a33      	ldr	r2, [pc, #204]	; (80026e0 <MX_GPIO_Init+0x100>)
 8002612:	f043 0320 	orr.w	r3, r3, #32
 8002616:	6193      	str	r3, [r2, #24]
 8002618:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <MX_GPIO_Init+0x100>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <MX_GPIO_Init+0x100>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <MX_GPIO_Init+0x100>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6193      	str	r3, [r2, #24]
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <MX_GPIO_Init+0x100>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <MX_GPIO_Init+0x100>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <MX_GPIO_Init+0x100>)
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	6193      	str	r3, [r2, #24]
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <MX_GPIO_Init+0x100>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8002654:	2201      	movs	r2, #1
 8002656:	2103      	movs	r1, #3
 8002658:	4822      	ldr	r0, [pc, #136]	; (80026e4 <MX_GPIO_Init+0x104>)
 800265a:	f000 fe7d 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800265e:	2201      	movs	r2, #1
 8002660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002664:	4820      	ldr	r0, [pc, #128]	; (80026e8 <MX_GPIO_Init+0x108>)
 8002666:	f000 fe77 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800266a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <MX_GPIO_Init+0x10c>)
 8002672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4619      	mov	r1, r3
 800267e:	4819      	ldr	r0, [pc, #100]	; (80026e4 <MX_GPIO_Init+0x104>)
 8002680:	f000 fd10 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002684:	2303      	movs	r3, #3
 8002686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	2301      	movs	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2302      	movs	r3, #2
 8002692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	4619      	mov	r1, r3
 800269a:	4812      	ldr	r0, [pc, #72]	; (80026e4 <MX_GPIO_Init+0x104>)
 800269c:	f000 fd02 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026a0:	23f0      	movs	r3, #240	; 0xf0
 80026a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	4619      	mov	r1, r3
 80026b2:	480f      	ldr	r0, [pc, #60]	; (80026f0 <MX_GPIO_Init+0x110>)
 80026b4:	f000 fcf6 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80026b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	4619      	mov	r1, r3
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_GPIO_Init+0x108>)
 80026d2:	f000 fce7 	bl	80030a4 <HAL_GPIO_Init>

}
 80026d6:	bf00      	nop
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40011000 	.word	0x40011000
 80026e8:	40010c00 	.word	0x40010c00
 80026ec:	10110000 	.word	0x10110000
 80026f0:	40010800 	.word	0x40010800

080026f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_MspInit+0x5c>)
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_MspInit+0x5c>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6193      	str	r3, [r2, #24]
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_MspInit+0x5c>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <HAL_MspInit+0x5c>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_MspInit+0x5c>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	61d3      	str	r3, [r2, #28]
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_MspInit+0x5c>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_MspInit+0x60>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_MspInit+0x60>)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000
 8002760:	40010000 	.word	0x40010000

08002764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_I2C_MspInit+0xb0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d142      	bne.n	800280a <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_I2C_MspInit+0xb4>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <HAL_I2C_MspInit+0xb4>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_I2C_MspInit+0xb4>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800279c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a2:	2312      	movs	r3, #18
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	481a      	ldr	r0, [pc, #104]	; (800281c <HAL_I2C_MspInit+0xb8>)
 80027b2:	f000 fc77 	bl	80030a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_I2C_MspInit+0xbc>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <HAL_I2C_MspInit+0xbc>)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_I2C_MspInit+0xb4>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_I2C_MspInit+0xb4>)
 80027d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_I2C_MspInit+0xb4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	201f      	movs	r0, #31
 80027f0:	f000 fb9f 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027f4:	201f      	movs	r0, #31
 80027f6:	f000 fbb8 	bl	8002f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2020      	movs	r0, #32
 8002800:	f000 fb97 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002804:	2020      	movs	r0, #32
 8002806:	f000 fbb0 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40005400 	.word	0x40005400
 8002818:	40021000 	.word	0x40021000
 800281c:	40010c00 	.word	0x40010c00
 8002820:	40010000 	.word	0x40010000

08002824 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a12      	ldr	r2, [pc, #72]	; (800287c <HAL_TIM_PWM_MspInit+0x58>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10c      	bne.n	8002850 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_TIM_PWM_MspInit+0x5c>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	4a11      	ldr	r2, [pc, #68]	; (8002880 <HAL_TIM_PWM_MspInit+0x5c>)
 800283c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002840:	6193      	str	r3, [r2, #24]
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_TIM_PWM_MspInit+0x5c>)
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800284e:	e010      	b.n	8002872 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d10b      	bne.n	8002872 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_TIM_PWM_MspInit+0x5c>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_TIM_PWM_MspInit+0x5c>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	61d3      	str	r3, [r2, #28]
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_TIM_PWM_MspInit+0x5c>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_TIM_Base_MspInit+0x44>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d113      	bne.n	80028be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_TIM_Base_MspInit+0x48>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_TIM_Base_MspInit+0x48>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_TIM_Base_MspInit+0x48>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	201e      	movs	r0, #30
 80028b4:	f000 fb3d 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028b8:	201e      	movs	r0, #30
 80028ba:	f000 fb56 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40021000 	.word	0x40021000

080028d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a34      	ldr	r2, [pc, #208]	; (80029bc <HAL_TIM_MspPostInit+0xec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d119      	bne.n	8002924 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4a32      	ldr	r2, [pc, #200]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b30      	ldr	r3, [pc, #192]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002908:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800290c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2302      	movs	r3, #2
 8002914:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	4619      	mov	r1, r3
 800291c:	4829      	ldr	r0, [pc, #164]	; (80029c4 <HAL_TIM_MspPostInit+0xf4>)
 800291e:	f000 fbc1 	bl	80030a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002922:	e047      	b.n	80029b4 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d142      	bne.n	80029b4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6193      	str	r3, [r2, #24]
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6193      	str	r3, [r2, #24]
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_TIM_MspPostInit+0xf0>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800295e:	2303      	movs	r3, #3
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2302      	movs	r3, #2
 8002968:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4814      	ldr	r0, [pc, #80]	; (80029c4 <HAL_TIM_MspPostInit+0xf4>)
 8002972:	f000 fb97 	bl	80030a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2302      	movs	r3, #2
 8002982:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	480f      	ldr	r0, [pc, #60]	; (80029c8 <HAL_TIM_MspPostInit+0xf8>)
 800298c:	f000 fb8a 	bl	80030a4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_TIM_MspPostInit+0xfc>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_TIM_MspPostInit+0xfc>)
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	6053      	str	r3, [r2, #4]
}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40010800 	.word	0x40010800
 80029c8:	40010c00 	.word	0x40010c00
 80029cc:	40010000 	.word	0x40010000

080029d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_UART_MspInit+0x98>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d137      	bne.n	8002a60 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <HAL_UART_MspInit+0x9c>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_UART_MspInit+0x9c>)
 80029f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fa:	61d3      	str	r3, [r2, #28]
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_UART_MspInit+0x9c>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_UART_MspInit+0x9c>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <HAL_UART_MspInit+0x9c>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	6193      	str	r3, [r2, #24]
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_UART_MspInit+0x9c>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a20:	2304      	movs	r3, #4
 8002a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	f107 0310 	add.w	r3, r7, #16
 8002a30:	4619      	mov	r1, r3
 8002a32:	480f      	ldr	r0, [pc, #60]	; (8002a70 <HAL_UART_MspInit+0xa0>)
 8002a34:	f000 fb36 	bl	80030a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4809      	ldr	r0, [pc, #36]	; (8002a70 <HAL_UART_MspInit+0xa0>)
 8002a4c:	f000 fb2a 	bl	80030a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2026      	movs	r0, #38	; 0x26
 8002a56:	f000 fa6c 	bl	8002f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a5a:	2026      	movs	r0, #38	; 0x26
 8002a5c:	f000 fa85 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40004400 	.word	0x40004400
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010800 	.word	0x40010800

08002a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <HardFault_Handler+0x4>

08002a86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a8a:	e7fe      	b.n	8002a8a <MemManage_Handler+0x4>

08002a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <BusFault_Handler+0x4>

08002a92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a96:	e7fe      	b.n	8002a96 <UsageFault_Handler+0x4>

08002a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac0:	f000 f944 	bl	8002d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <TIM4_IRQHandler+0x10>)
 8002ace:	f003 fc85 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000830 	.word	0x20000830

08002adc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <I2C1_EV_IRQHandler+0x10>)
 8002ae2:	f001 f8a9 	bl	8003c38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000878 	.word	0x20000878

08002af0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <I2C1_ER_IRQHandler+0x10>)
 8002af6:	f001 fa05 	bl	8003f04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000878 	.word	0x20000878

08002b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <USART2_IRQHandler+0x10>)
 8002b0a:	f004 fb43 	bl	8007194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000a08 	.word	0x20000a08

08002b18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e00a      	b.n	8002b40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b2a:	f3af 8000 	nop.w
 8002b2e:	4601      	mov	r1, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	60ba      	str	r2, [r7, #8]
 8002b36:	b2ca      	uxtb	r2, r1
 8002b38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	dbf0      	blt.n	8002b2a <_read+0x12>
	}

return len;
 8002b48:	687b      	ldr	r3, [r7, #4]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
	return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b78:	605a      	str	r2, [r3, #4]
	return 0;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <_isatty>:

int _isatty(int file)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
	return 0;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
	...

08002bb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <_sbrk+0x50>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <_sbrk+0x16>
		heap_end = &end;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <_sbrk+0x50>)
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <_sbrk+0x54>)
 8002bc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <_sbrk+0x50>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <_sbrk+0x50>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	466a      	mov	r2, sp
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d907      	bls.n	8002bee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bde:	f004 fe33 	bl	8007848 <__errno>
 8002be2:	4602      	mov	r2, r0
 8002be4:	230c      	movs	r3, #12
 8002be6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	e006      	b.n	8002bfc <_sbrk+0x48>
	}

	heap_end += incr;
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <_sbrk+0x50>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <_sbrk+0x50>)
 8002bf8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200007fc 	.word	0x200007fc
 8002c08:	20000a88 	.word	0x20000a88

08002c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <SystemInit+0x5c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <SystemInit+0x5c>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <SystemInit+0x5c>)
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	4911      	ldr	r1, [pc, #68]	; (8002c68 <SystemInit+0x5c>)
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <SystemInit+0x60>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <SystemInit+0x5c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <SystemInit+0x5c>)
 8002c2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <SystemInit+0x5c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <SystemInit+0x5c>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <SystemInit+0x5c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <SystemInit+0x5c>)
 8002c4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002c4e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <SystemInit+0x5c>)
 8002c52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c56:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <SystemInit+0x64>)
 8002c5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c5e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	f8ff0000 	.word	0xf8ff0000
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c76:	e003      	b.n	8002c80 <LoopCopyDataInit>

08002c78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c7e:	3104      	adds	r1, #4

08002c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c80:	480a      	ldr	r0, [pc, #40]	; (8002cac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c88:	d3f6      	bcc.n	8002c78 <CopyDataInit>
  ldr r2, =_sbss
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c8c:	e002      	b.n	8002c94 <LoopFillZerobss>

08002c8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c90:	f842 3b04 	str.w	r3, [r2], #4

08002c94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c98:	d3f9      	bcc.n	8002c8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c9a:	f7ff ffb7 	bl	8002c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f004 fdd9 	bl	8007854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ca2:	f7ff fa11 	bl	80020c8 <main>
  bx lr
 8002ca6:	4770      	bx	lr
  ldr r3, =_sidata
 8002ca8:	0800cae8 	.word	0x0800cae8
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002cb0:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 8002cb4:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002cb8:	20000a84 	.word	0x20000a84

08002cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cbc:	e7fe      	b.n	8002cbc <ADC1_2_IRQHandler>
	...

08002cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_Init+0x28>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_Init+0x28>)
 8002cca:	f043 0310 	orr.w	r3, r3, #16
 8002cce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f000 f923 	bl	8002f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f000 f808 	bl	8002cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cdc:	f7ff fd10 	bl	8002700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40022000 	.word	0x40022000

08002cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x54>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_InitTick+0x58>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f93b 	bl	8002f86 <HAL_SYSTICK_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00e      	b.n	8002d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d80a      	bhi.n	8002d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d20:	2200      	movs	r2, #0
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f000 f903 	bl	8002f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d2c:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <HAL_InitTick+0x5c>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000018 	.word	0x20000018
 8002d44:	20000020 	.word	0x20000020
 8002d48:	2000001c 	.word	0x2000001c

08002d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_IncTick+0x1c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_IncTick+0x20>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a03      	ldr	r2, [pc, #12]	; (8002d6c <HAL_IncTick+0x20>)
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	20000020 	.word	0x20000020
 8002d6c:	20000a7c 	.word	0x20000a7c

08002d70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return uwTick;
 8002d74:	4b02      	ldr	r3, [pc, #8]	; (8002d80 <HAL_GetTick+0x10>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	20000a7c 	.word	0x20000a7c

08002d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db6:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60d3      	str	r3, [r2, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4906      	ldr	r1, [pc, #24]	; (8002e1c <__NVIC_EnableIRQ+0x34>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	; (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee8:	d301      	bcc.n	8002eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00f      	b.n	8002f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <SysTick_Config+0x40>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f7ff ff90 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <SysTick_Config+0x40>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f06:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <SysTick_Config+0x40>)
 8002f08:	2207      	movs	r2, #7
 8002f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	e000e010 	.word	0xe000e010

08002f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff2d 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f44:	f7ff ff42 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff90 	bl	8002e74 <NVIC_EncodePriority>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff5f 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff35 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ffa2 	bl	8002ed8 <SysTick_Config>
 8002f94:	4603      	mov	r3, r0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d005      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e051      	b.n	8003066 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 020e 	bic.w	r2, r2, #14
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a22      	ldr	r2, [pc, #136]	; (8003070 <HAL_DMA_Abort_IT+0xd0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d029      	beq.n	8003040 <HAL_DMA_Abort_IT+0xa0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	; (8003074 <HAL_DMA_Abort_IT+0xd4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d022      	beq.n	800303c <HAL_DMA_Abort_IT+0x9c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <HAL_DMA_Abort_IT+0xd8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d01a      	beq.n	8003036 <HAL_DMA_Abort_IT+0x96>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <HAL_DMA_Abort_IT+0xdc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d012      	beq.n	8003030 <HAL_DMA_Abort_IT+0x90>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_DMA_Abort_IT+0xe0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00a      	beq.n	800302a <HAL_DMA_Abort_IT+0x8a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1a      	ldr	r2, [pc, #104]	; (8003084 <HAL_DMA_Abort_IT+0xe4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d102      	bne.n	8003024 <HAL_DMA_Abort_IT+0x84>
 800301e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003022:	e00e      	b.n	8003042 <HAL_DMA_Abort_IT+0xa2>
 8003024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003028:	e00b      	b.n	8003042 <HAL_DMA_Abort_IT+0xa2>
 800302a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800302e:	e008      	b.n	8003042 <HAL_DMA_Abort_IT+0xa2>
 8003030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003034:	e005      	b.n	8003042 <HAL_DMA_Abort_IT+0xa2>
 8003036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800303a:	e002      	b.n	8003042 <HAL_DMA_Abort_IT+0xa2>
 800303c:	2310      	movs	r3, #16
 800303e:	e000      	b.n	8003042 <HAL_DMA_Abort_IT+0xa2>
 8003040:	2301      	movs	r3, #1
 8003042:	4a11      	ldr	r2, [pc, #68]	; (8003088 <HAL_DMA_Abort_IT+0xe8>)
 8003044:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
    } 
  }
  return status;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40020008 	.word	0x40020008
 8003074:	4002001c 	.word	0x4002001c
 8003078:	40020030 	.word	0x40020030
 800307c:	40020044 	.word	0x40020044
 8003080:	40020058 	.word	0x40020058
 8003084:	4002006c 	.word	0x4002006c
 8003088:	40020000 	.word	0x40020000

0800308c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b08b      	sub	sp, #44	; 0x2c
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030b2:	2300      	movs	r3, #0
 80030b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b6:	e127      	b.n	8003308 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030b8:	2201      	movs	r2, #1
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	f040 8116 	bne.w	8003302 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d034      	beq.n	8003148 <HAL_GPIO_Init+0xa4>
 80030de:	2b12      	cmp	r3, #18
 80030e0:	d80d      	bhi.n	80030fe <HAL_GPIO_Init+0x5a>
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d02b      	beq.n	800313e <HAL_GPIO_Init+0x9a>
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d804      	bhi.n	80030f4 <HAL_GPIO_Init+0x50>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d031      	beq.n	8003152 <HAL_GPIO_Init+0xae>
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d01c      	beq.n	800312c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030f2:	e048      	b.n	8003186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d043      	beq.n	8003180 <HAL_GPIO_Init+0xdc>
 80030f8:	2b11      	cmp	r3, #17
 80030fa:	d01b      	beq.n	8003134 <HAL_GPIO_Init+0x90>
          break;
 80030fc:	e043      	b.n	8003186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030fe:	4a89      	ldr	r2, [pc, #548]	; (8003324 <HAL_GPIO_Init+0x280>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d026      	beq.n	8003152 <HAL_GPIO_Init+0xae>
 8003104:	4a87      	ldr	r2, [pc, #540]	; (8003324 <HAL_GPIO_Init+0x280>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d806      	bhi.n	8003118 <HAL_GPIO_Init+0x74>
 800310a:	4a87      	ldr	r2, [pc, #540]	; (8003328 <HAL_GPIO_Init+0x284>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d020      	beq.n	8003152 <HAL_GPIO_Init+0xae>
 8003110:	4a86      	ldr	r2, [pc, #536]	; (800332c <HAL_GPIO_Init+0x288>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01d      	beq.n	8003152 <HAL_GPIO_Init+0xae>
          break;
 8003116:	e036      	b.n	8003186 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003118:	4a85      	ldr	r2, [pc, #532]	; (8003330 <HAL_GPIO_Init+0x28c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <HAL_GPIO_Init+0xae>
 800311e:	4a85      	ldr	r2, [pc, #532]	; (8003334 <HAL_GPIO_Init+0x290>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d016      	beq.n	8003152 <HAL_GPIO_Init+0xae>
 8003124:	4a84      	ldr	r2, [pc, #528]	; (8003338 <HAL_GPIO_Init+0x294>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0xae>
          break;
 800312a:	e02c      	b.n	8003186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	623b      	str	r3, [r7, #32]
          break;
 8003132:	e028      	b.n	8003186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	3304      	adds	r3, #4
 800313a:	623b      	str	r3, [r7, #32]
          break;
 800313c:	e023      	b.n	8003186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	3308      	adds	r3, #8
 8003144:	623b      	str	r3, [r7, #32]
          break;
 8003146:	e01e      	b.n	8003186 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	330c      	adds	r3, #12
 800314e:	623b      	str	r3, [r7, #32]
          break;
 8003150:	e019      	b.n	8003186 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800315a:	2304      	movs	r3, #4
 800315c:	623b      	str	r3, [r7, #32]
          break;
 800315e:	e012      	b.n	8003186 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003168:	2308      	movs	r3, #8
 800316a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	611a      	str	r2, [r3, #16]
          break;
 8003172:	e008      	b.n	8003186 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003174:	2308      	movs	r3, #8
 8003176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	615a      	str	r2, [r3, #20]
          break;
 800317e:	e002      	b.n	8003186 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003180:	2300      	movs	r3, #0
 8003182:	623b      	str	r3, [r7, #32]
          break;
 8003184:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2bff      	cmp	r3, #255	; 0xff
 800318a:	d801      	bhi.n	8003190 <HAL_GPIO_Init+0xec>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	e001      	b.n	8003194 <HAL_GPIO_Init+0xf0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2bff      	cmp	r3, #255	; 0xff
 800319a:	d802      	bhi.n	80031a2 <HAL_GPIO_Init+0xfe>
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_Init+0x104>
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	3b08      	subs	r3, #8
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	210f      	movs	r1, #15
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	401a      	ands	r2, r3
 80031ba:	6a39      	ldr	r1, [r7, #32]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	431a      	orrs	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8096 	beq.w	8003302 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031d6:	4b59      	ldr	r3, [pc, #356]	; (800333c <HAL_GPIO_Init+0x298>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	4a58      	ldr	r2, [pc, #352]	; (800333c <HAL_GPIO_Init+0x298>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6193      	str	r3, [r2, #24]
 80031e2:	4b56      	ldr	r3, [pc, #344]	; (800333c <HAL_GPIO_Init+0x298>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031ee:	4a54      	ldr	r2, [pc, #336]	; (8003340 <HAL_GPIO_Init+0x29c>)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_GPIO_Init+0x2a0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0x19e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <HAL_GPIO_Init+0x2a4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00d      	beq.n	800323e <HAL_GPIO_Init+0x19a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a49      	ldr	r2, [pc, #292]	; (800334c <HAL_GPIO_Init+0x2a8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x196>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a48      	ldr	r2, [pc, #288]	; (8003350 <HAL_GPIO_Init+0x2ac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_GPIO_Init+0x192>
 8003232:	2303      	movs	r3, #3
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x1a0>
 8003236:	2304      	movs	r3, #4
 8003238:	e004      	b.n	8003244 <HAL_GPIO_Init+0x1a0>
 800323a:	2302      	movs	r3, #2
 800323c:	e002      	b.n	8003244 <HAL_GPIO_Init+0x1a0>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0x1a0>
 8003242:	2300      	movs	r3, #0
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	f002 0203 	and.w	r2, r2, #3
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	4093      	lsls	r3, r2
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003254:	493a      	ldr	r1, [pc, #232]	; (8003340 <HAL_GPIO_Init+0x29c>)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	3302      	adds	r3, #2
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4938      	ldr	r1, [pc, #224]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
 800327a:	e006      	b.n	800328a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800327c:	4b35      	ldr	r3, [pc, #212]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	43db      	mvns	r3, r3
 8003284:	4933      	ldr	r1, [pc, #204]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 8003286:	4013      	ands	r3, r2
 8003288:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d006      	beq.n	80032a4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	492e      	ldr	r1, [pc, #184]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
 80032a2:	e006      	b.n	80032b2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	4929      	ldr	r1, [pc, #164]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	4924      	ldr	r1, [pc, #144]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
 80032ca:	e006      	b.n	80032da <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	491f      	ldr	r1, [pc, #124]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d006      	beq.n	80032f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	491a      	ldr	r1, [pc, #104]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60cb      	str	r3, [r1, #12]
 80032f2:	e006      	b.n	8003302 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4915      	ldr	r1, [pc, #84]	; (8003354 <HAL_GPIO_Init+0x2b0>)
 80032fe:	4013      	ands	r3, r2
 8003300:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	3301      	adds	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	f47f aed0 	bne.w	80030b8 <HAL_GPIO_Init+0x14>
  }
}
 8003318:	bf00      	nop
 800331a:	372c      	adds	r7, #44	; 0x2c
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	10210000 	.word	0x10210000
 8003328:	10110000 	.word	0x10110000
 800332c:	10120000 	.word	0x10120000
 8003330:	10310000 	.word	0x10310000
 8003334:	10320000 	.word	0x10320000
 8003338:	10220000 	.word	0x10220000
 800333c:	40021000 	.word	0x40021000
 8003340:	40010000 	.word	0x40010000
 8003344:	40010800 	.word	0x40010800
 8003348:	40010c00 	.word	0x40010c00
 800334c:	40011000 	.word	0x40011000
 8003350:	40011400 	.word	0x40011400
 8003354:	40010400 	.word	0x40010400

08003358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
 8003364:	4613      	mov	r3, r2
 8003366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003368:	787b      	ldrb	r3, [r7, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003374:	e003      	b.n	800337e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	041a      	lsls	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e10f      	b.n	80035ba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff f9d8 	bl	8002764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033cc:	f002 ff14 	bl	80061f8 <HAL_RCC_GetPCLK1Freq>
 80033d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4a7b      	ldr	r2, [pc, #492]	; (80035c4 <HAL_I2C_Init+0x23c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d807      	bhi.n	80033ec <HAL_I2C_Init+0x64>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a7a      	ldr	r2, [pc, #488]	; (80035c8 <HAL_I2C_Init+0x240>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	bf94      	ite	ls
 80033e4:	2301      	movls	r3, #1
 80033e6:	2300      	movhi	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	e006      	b.n	80033fa <HAL_I2C_Init+0x72>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a77      	ldr	r2, [pc, #476]	; (80035cc <HAL_I2C_Init+0x244>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bf94      	ite	ls
 80033f4:	2301      	movls	r3, #1
 80033f6:	2300      	movhi	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0db      	b.n	80035ba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4a72      	ldr	r2, [pc, #456]	; (80035d0 <HAL_I2C_Init+0x248>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0c9b      	lsrs	r3, r3, #18
 800340c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a64      	ldr	r2, [pc, #400]	; (80035c4 <HAL_I2C_Init+0x23c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d802      	bhi.n	800343c <HAL_I2C_Init+0xb4>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3301      	adds	r3, #1
 800343a:	e009      	b.n	8003450 <HAL_I2C_Init+0xc8>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	4a63      	ldr	r2, [pc, #396]	; (80035d4 <HAL_I2C_Init+0x24c>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	099b      	lsrs	r3, r3, #6
 800344e:	3301      	adds	r3, #1
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	430b      	orrs	r3, r1
 8003456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4956      	ldr	r1, [pc, #344]	; (80035c4 <HAL_I2C_Init+0x23c>)
 800346c:	428b      	cmp	r3, r1
 800346e:	d80d      	bhi.n	800348c <HAL_I2C_Init+0x104>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e59      	subs	r1, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fbb1 f3f3 	udiv	r3, r1, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003484:	2b04      	cmp	r3, #4
 8003486:	bf38      	it	cc
 8003488:	2304      	movcc	r3, #4
 800348a:	e04f      	b.n	800352c <HAL_I2C_Init+0x1a4>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d111      	bne.n	80034b8 <HAL_I2C_Init+0x130>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1e58      	subs	r0, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	440b      	add	r3, r1
 80034a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e012      	b.n	80034de <HAL_I2C_Init+0x156>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	0099      	lsls	r1, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ce:	3301      	adds	r3, #1
 80034d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Init+0x15e>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e022      	b.n	800352c <HAL_I2C_Init+0x1a4>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10e      	bne.n	800350c <HAL_I2C_Init+0x184>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1e58      	subs	r0, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6859      	ldr	r1, [r3, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	440b      	add	r3, r1
 80034fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003500:	3301      	adds	r3, #1
 8003502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350a:	e00f      	b.n	800352c <HAL_I2C_Init+0x1a4>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1e58      	subs	r0, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	0099      	lsls	r1, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003522:	3301      	adds	r3, #1
 8003524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	6809      	ldr	r1, [r1, #0]
 8003530:	4313      	orrs	r3, r2
 8003532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800355a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6911      	ldr	r1, [r2, #16]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68d2      	ldr	r2, [r2, #12]
 8003566:	4311      	orrs	r1, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	430b      	orrs	r3, r1
 800356e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	000186a0 	.word	0x000186a0
 80035c8:	001e847f 	.word	0x001e847f
 80035cc:	003d08ff 	.word	0x003d08ff
 80035d0:	431bde83 	.word	0x431bde83
 80035d4:	10624dd3 	.word	0x10624dd3

080035d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	4608      	mov	r0, r1
 80035e2:	4611      	mov	r1, r2
 80035e4:	461a      	mov	r2, r3
 80035e6:	4603      	mov	r3, r0
 80035e8:	817b      	strh	r3, [r7, #10]
 80035ea:	460b      	mov	r3, r1
 80035ec:	813b      	strh	r3, [r7, #8]
 80035ee:	4613      	mov	r3, r2
 80035f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035f2:	f7ff fbbd 	bl	8002d70 <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b20      	cmp	r3, #32
 8003602:	f040 80d9 	bne.w	80037b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2319      	movs	r3, #25
 800360c:	2201      	movs	r2, #1
 800360e:	496d      	ldr	r1, [pc, #436]	; (80037c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f002 f824 	bl	800565e <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	e0cc      	b.n	80037ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_I2C_Mem_Write+0x56>
 800362a:	2302      	movs	r3, #2
 800362c:	e0c5      	b.n	80037ba <HAL_I2C_Mem_Write+0x1e2>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d007      	beq.n	8003654 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003662:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2221      	movs	r2, #33	; 0x21
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a3a      	ldr	r2, [r7, #32]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a4d      	ldr	r2, [pc, #308]	; (80037c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003696:	88f8      	ldrh	r0, [r7, #6]
 8003698:	893a      	ldrh	r2, [r7, #8]
 800369a:	8979      	ldrh	r1, [r7, #10]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4603      	mov	r3, r0
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f001 fe10 	bl	80052cc <I2C_RequestMemoryWrite>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d052      	beq.n	8003758 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e081      	b.n	80037ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f002 f8a5 	bl	800580a <I2C_WaitOnTXEFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d107      	bne.n	80036de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06b      	b.n	80037ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d11b      	bne.n	8003758 <HAL_I2C_Mem_Write+0x180>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d017      	beq.n	8003758 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1aa      	bne.n	80036b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f002 f891 	bl	800588c <I2C_WaitOnBTFFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00d      	beq.n	800378c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b04      	cmp	r3, #4
 8003776:	d107      	bne.n	8003788 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003786:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e016      	b.n	80037ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	00100002 	.word	0x00100002
 80037c8:	ffff0000 	.word	0xffff0000

080037cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	; 0x30
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	460b      	mov	r3, r1
 80037e0:	813b      	strh	r3, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e6:	f7ff fac3 	bl	8002d70 <HAL_GetTick>
 80037ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	f040 8218 	bne.w	8003c2a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2319      	movs	r3, #25
 8003800:	2201      	movs	r2, #1
 8003802:	4981      	ldr	r1, [pc, #516]	; (8003a08 <HAL_I2C_Mem_Read+0x23c>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f001 ff2a 	bl	800565e <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
 8003812:	e20b      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_I2C_Mem_Read+0x56>
 800381e:	2302      	movs	r3, #2
 8003820:	e204      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d007      	beq.n	8003848 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003856:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2222      	movs	r2, #34	; 0x22
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2240      	movs	r2, #64	; 0x40
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a61      	ldr	r2, [pc, #388]	; (8003a0c <HAL_I2C_Mem_Read+0x240>)
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800388a:	88f8      	ldrh	r0, [r7, #6]
 800388c:	893a      	ldrh	r2, [r7, #8]
 800388e:	8979      	ldrh	r1, [r7, #10]
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	4603      	mov	r3, r0
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f001 fda0 	bl	80053e0 <I2C_RequestMemoryRead>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e1c0      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	623b      	str	r3, [r7, #32]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	623b      	str	r3, [r7, #32]
 80038c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e194      	b.n	8003c04 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d11d      	bne.n	800391e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038f2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003918:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800391a:	b662      	cpsie	i
 800391c:	e172      	b.n	8003c04 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	2b02      	cmp	r3, #2
 8003924:	d11d      	bne.n	8003962 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003934:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003936:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800395e:	b662      	cpsie	i
 8003960:	e150      	b.n	8003c04 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003970:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003988:	e13c      	b.n	8003c04 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	2b03      	cmp	r3, #3
 8003990:	f200 80f5 	bhi.w	8003b7e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b01      	cmp	r3, #1
 800399a:	d123      	bne.n	80039e4 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f001 ffb4 	bl	800590e <I2C_WaitOnRXNEFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e13d      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039e2:	e10f      	b.n	8003c04 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d150      	bne.n	8003a8e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	2200      	movs	r2, #0
 80039f4:	4906      	ldr	r1, [pc, #24]	; (8003a10 <HAL_I2C_Mem_Read+0x244>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f001 fe31 	bl	800565e <I2C_WaitOnFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e112      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
 8003a06:	bf00      	nop
 8003a08:	00100002 	.word	0x00100002
 8003a0c:	ffff0000 	.word	0xffff0000
 8003a10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a14:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a24:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a58:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a8c:	e0ba      	b.n	8003c04 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	2200      	movs	r2, #0
 8003a96:	4967      	ldr	r1, [pc, #412]	; (8003c34 <HAL_I2C_Mem_Read+0x468>)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f001 fde0 	bl	800565e <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0c1      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	2200      	movs	r2, #0
 8003af4:	494f      	ldr	r1, [pc, #316]	; (8003c34 <HAL_I2C_Mem_Read+0x468>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f001 fdb1 	bl	800565e <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e092      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b14:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b48:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b7c:	e042      	b.n	8003c04 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f001 fec3 	bl	800590e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e04c      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d118      	bne.n	8003c04 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f aebe 	bne.w	800398a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3728      	adds	r7, #40	; 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	00010004 	.word	0x00010004

08003c38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d003      	beq.n	8003c70 <HAL_I2C_EV_IRQHandler+0x38>
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	f040 80b6 	bne.w	8003ddc <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10d      	bne.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c90:	d003      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x62>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c98:	d101      	bne.n	8003c9e <HAL_I2C_EV_IRQHandler+0x66>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x68>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f000 8127 	beq.w	8003ef4 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <HAL_I2C_EV_IRQHandler+0x92>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	0a5b      	lsrs	r3, r3, #9
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d006      	beq.n	8003cca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f001 feaa 	bl	8005a16 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fd03 	bl	80046ce <I2C_Master_SB>
 8003cc8:	e087      	b.n	8003dda <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_I2C_EV_IRQHandler+0xb2>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	0a5b      	lsrs	r3, r3, #9
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fd78 	bl	80047d8 <I2C_Master_ADD10>
 8003ce8:	e077      	b.n	8003dda <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_I2C_EV_IRQHandler+0xd2>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	0a5b      	lsrs	r3, r3, #9
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fd91 	bl	800482a <I2C_Master_ADDR>
 8003d08:	e067      	b.n	8003dda <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d030      	beq.n	8003d78 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d24:	f000 80e8 	beq.w	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	09db      	lsrs	r3, r3, #7
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00f      	beq.n	8003d54 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	0a9b      	lsrs	r3, r3, #10
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f9e4 	bl	800411a <I2C_MasterTransmit_TXE>
 8003d52:	e042      	b.n	8003dda <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80cb 	beq.w	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	0a5b      	lsrs	r3, r3, #9
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80c4 	beq.w	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 faca 	bl	800430a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d76:	e0bf      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	f000 80b7 	beq.w	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00f      	beq.n	8003db6 <HAL_I2C_EV_IRQHandler+0x17e>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	0a9b      	lsrs	r3, r3, #10
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_I2C_EV_IRQHandler+0x17e>
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fb21 	bl	80043f6 <I2C_MasterReceive_RXNE>
 8003db4:	e011      	b.n	8003dda <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	089b      	lsrs	r3, r3, #2
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 809a 	beq.w	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	0a5b      	lsrs	r3, r3, #9
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8093 	beq.w	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fb91 	bl	80044fa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd8:	e08e      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003dda:	e08d      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e007      	b.n	8003dfe <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d012      	beq.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	0a5b      	lsrs	r3, r3, #9
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e26:	69b9      	ldr	r1, [r7, #24]
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 ff55 	bl	8004cd8 <I2C_Slave_ADDR>
 8003e2e:	e066      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_I2C_EV_IRQHandler+0x218>
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	0a5b      	lsrs	r3, r3, #9
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 ff89 	bl	8004d60 <I2C_Slave_STOPF>
 8003e4e:	e056      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e50:	7bbb      	ldrb	r3, [r7, #14]
 8003e52:	2b21      	cmp	r3, #33	; 0x21
 8003e54:	d002      	beq.n	8003e5c <HAL_I2C_EV_IRQHandler+0x224>
 8003e56:	7bbb      	ldrb	r3, [r7, #14]
 8003e58:	2b29      	cmp	r3, #41	; 0x29
 8003e5a:	d125      	bne.n	8003ea8 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	09db      	lsrs	r3, r3, #7
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00f      	beq.n	8003e88 <HAL_I2C_EV_IRQHandler+0x250>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_I2C_EV_IRQHandler+0x250>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fe6d 	bl	8004b60 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e86:	e039      	b.n	8003efc <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d033      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x2c4>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	0a5b      	lsrs	r3, r3, #9
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02d      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fe9a 	bl	8004bda <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ea6:	e029      	b.n	8003efc <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00f      	beq.n	8003ed4 <HAL_I2C_EV_IRQHandler+0x29c>
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	0a9b      	lsrs	r3, r3, #10
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <HAL_I2C_EV_IRQHandler+0x29c>
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fea4 	bl	8004c1a <I2C_SlaveReceive_RXNE>
 8003ed2:	e014      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00e      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0x2c6>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	0a5b      	lsrs	r3, r3, #9
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fed2 	bl	8004c96 <I2C_SlaveReceive_BTF>
 8003ef2:	e004      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003ef4:	bf00      	nop
 8003ef6:	e002      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003efc:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d016      	beq.n	8003f5a <HAL_I2C_ER_IRQHandler+0x56>
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d010      	beq.n	8003f5a <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f48:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f58:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	0a5b      	lsrs	r3, r3, #9
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00e      	beq.n	8003f84 <HAL_I2C_ER_IRQHandler+0x80>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003f82:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	0a9b      	lsrs	r3, r3, #10
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d041      	beq.n	8004014 <HAL_I2C_ER_IRQHandler+0x110>
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d03b      	beq.n	8004014 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa2:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003fba:	7efb      	ldrb	r3, [r7, #27]
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d112      	bne.n	8003fe6 <HAL_I2C_ER_IRQHandler+0xe2>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_I2C_ER_IRQHandler+0xe2>
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b21      	cmp	r3, #33	; 0x21
 8003fca:	d008      	beq.n	8003fde <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b29      	cmp	r3, #41	; 0x29
 8003fd0:	d005      	beq.n	8003fde <HAL_I2C_ER_IRQHandler+0xda>
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	2b28      	cmp	r3, #40	; 0x28
 8003fd6:	d106      	bne.n	8003fe6 <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b21      	cmp	r3, #33	; 0x21
 8003fdc:	d103      	bne.n	8003fe6 <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 ffee 	bl	8004fc0 <I2C_Slave_AF>
 8003fe4:	e016      	b.n	8004014 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fee:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b10      	cmp	r3, #16
 8004002:	d107      	bne.n	8004014 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004012:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	0adb      	lsrs	r3, r3, #11
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00e      	beq.n	800403e <HAL_I2C_ER_IRQHandler+0x13a>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	f043 0308 	orr.w	r3, r3, #8
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800403c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f001 f825 	bl	80050a0 <I2C_ITError>
  }
}
 8004056:	bf00      	nop
 8004058:	3728      	adds	r7, #40	; 0x28
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr

08004070 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
 80040b2:	4613      	mov	r3, r2
 80040b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004130:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d150      	bne.n	80041e2 <I2C_MasterTransmit_TXE+0xc8>
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b21      	cmp	r3, #33	; 0x21
 8004144:	d14d      	bne.n	80041e2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d01d      	beq.n	8004188 <I2C_MasterTransmit_TXE+0x6e>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b20      	cmp	r3, #32
 8004150:	d01a      	beq.n	8004188 <I2C_MasterTransmit_TXE+0x6e>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004158:	d016      	beq.n	8004188 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004168:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2211      	movs	r2, #17
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff6c 	bl	800405e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004186:	e0bc      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004196:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d107      	bne.n	80041d2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ff81 	bl	80040d2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041d0:	e097      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ff3f 	bl	800405e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041e0:	e08f      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b21      	cmp	r3, #33	; 0x21
 80041e6:	d007      	beq.n	80041f8 <I2C_MasterTransmit_TXE+0xde>
 80041e8:	7bbb      	ldrb	r3, [r7, #14]
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	f040 8089 	bne.w	8004302 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b22      	cmp	r3, #34	; 0x22
 80041f4:	f040 8085 	bne.w	8004302 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004210:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004212:	e076      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d15d      	bne.n	80042dc <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11d      	bne.n	8004264 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d10b      	bne.n	8004248 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	b2da      	uxtb	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004246:	e05c      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424c:	b29b      	uxth	r3, r3
 800424e:	121b      	asrs	r3, r3, #8
 8004250:	b2da      	uxtb	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004262:	e04e      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10b      	bne.n	8004284 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	b2da      	uxtb	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004282:	e03e      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	2b02      	cmp	r3, #2
 800428a:	d13a      	bne.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b22      	cmp	r3, #34	; 0x22
 8004296:	d108      	bne.n	80042aa <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	e02b      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b21      	cmp	r3, #33	; 0x21
 80042b4:	d125      	bne.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042da:	e012      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004300:	e7ff      	b.n	8004302 <I2C_MasterTransmit_TXE+0x1e8>
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b21      	cmp	r3, #33	; 0x21
 8004322:	d164      	bne.n	80043ee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d012      	beq.n	8004354 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8004352:	e04c      	b.n	80043ee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b08      	cmp	r3, #8
 8004358:	d01d      	beq.n	8004396 <I2C_MasterTransmit_BTF+0x8c>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b20      	cmp	r3, #32
 800435e:	d01a      	beq.n	8004396 <I2C_MasterTransmit_BTF+0x8c>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004366:	d016      	beq.n	8004396 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004376:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2211      	movs	r2, #17
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fe65 	bl	800405e <HAL_I2C_MasterTxCpltCallback>
}
 8004394:	e02b      	b.n	80043ee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d107      	bne.n	80043e0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fe7a 	bl	80040d2 <HAL_I2C_MemTxCpltCallback>
}
 80043de:	e006      	b.n	80043ee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fe38 	bl	800405e <HAL_I2C_MasterTxCpltCallback>
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b22      	cmp	r3, #34	; 0x22
 8004408:	d173      	bne.n	80044f2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d920      	bls.n	800445a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b03      	cmp	r3, #3
 8004446:	d154      	bne.n	80044f2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004456:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004458:	e04b      	b.n	80044f2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	2b02      	cmp	r3, #2
 8004460:	d047      	beq.n	80044f2 <I2C_MasterReceive_RXNE+0xfc>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d002      	beq.n	800446e <I2C_MasterReceive_RXNE+0x78>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d141      	bne.n	80044f2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800448c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d10a      	bne.n	80044de <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fe04 	bl	80040e4 <HAL_I2C_MemRxCpltCallback>
}
 80044dc:	e009      	b.n	80044f2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2212      	movs	r2, #18
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff fdbf 	bl	8004070 <HAL_I2C_MasterRxCpltCallback>
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b04      	cmp	r3, #4
 8004510:	d11b      	bne.n	800454a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004520:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004548:	e0bd      	b.n	80046c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d129      	bne.n	80045a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004562:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b04      	cmp	r3, #4
 8004568:	d00a      	beq.n	8004580 <I2C_MasterReceive_BTF+0x86>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d007      	beq.n	8004580 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045a6:	e08e      	b.n	80046c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d176      	bne.n	80046a0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d002      	beq.n	80045be <I2C_MasterReceive_BTF+0xc4>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	d108      	bne.n	80045d0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e019      	b.n	8004604 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d002      	beq.n	80045dc <I2C_MasterReceive_BTF+0xe2>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d108      	bne.n	80045ee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e00a      	b.n	8004604 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d007      	beq.n	8004604 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800465e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d10a      	bne.n	800468a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fd2e 	bl	80040e4 <HAL_I2C_MemRxCpltCallback>
}
 8004688:	e01d      	b.n	80046c6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2212      	movs	r2, #18
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff fce9 	bl	8004070 <HAL_I2C_MasterRxCpltCallback>
}
 800469e:	e012      	b.n	80046c6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d117      	bne.n	8004712 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80046fc:	e067      	b.n	80047ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]
}
 8004710:	e05d      	b.n	80047ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800471a:	d133      	bne.n	8004784 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b21      	cmp	r3, #33	; 0x21
 8004726:	d109      	bne.n	800473c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004738:	611a      	str	r2, [r3, #16]
 800473a:	e008      	b.n	800474e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	b2da      	uxtb	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <I2C_Master_SB+0x90>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	2b00      	cmp	r3, #0
 800475c:	d037      	beq.n	80047ce <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <I2C_Master_SB+0xa4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02d      	beq.n	80047ce <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004780:	605a      	str	r2, [r3, #4]
}
 8004782:	e024      	b.n	80047ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10e      	bne.n	80047aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	b29b      	uxth	r3, r3
 8004792:	11db      	asrs	r3, r3, #7
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0306 	and.w	r3, r3, #6
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f063 030f 	orn	r3, r3, #15
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	611a      	str	r2, [r3, #16]
}
 80047a8:	e011      	b.n	80047ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10d      	bne.n	80047ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	11db      	asrs	r3, r3, #7
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 0306 	and.w	r3, r3, #6
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f063 030e 	orn	r3, r3, #14
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	611a      	str	r2, [r3, #16]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <I2C_Master_ADD10+0x24>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d011      	beq.n	8004820 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <I2C_Master_ADD10+0x38>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800482a:	b480      	push	{r7}
 800482c:	b091      	sub	sp, #68	; 0x44
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004838:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b22      	cmp	r3, #34	; 0x22
 8004852:	f040 8174 	bne.w	8004b3e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <I2C_Master_ADDR+0x54>
 800485e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004862:	2b40      	cmp	r3, #64	; 0x40
 8004864:	d10b      	bne.n	800487e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004866:	2300      	movs	r3, #0
 8004868:	633b      	str	r3, [r7, #48]	; 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	633b      	str	r3, [r7, #48]	; 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	633b      	str	r3, [r7, #48]	; 0x30
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	e16b      	b.n	8004b56 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004882:	2b00      	cmp	r3, #0
 8004884:	d11d      	bne.n	80048c2 <I2C_Master_ADDR+0x98>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800488e:	d118      	bne.n	80048c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004890:	2300      	movs	r3, #0
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	651a      	str	r2, [r3, #80]	; 0x50
 80048c0:	e149      	b.n	8004b56 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d113      	bne.n	80048f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048cc:	2300      	movs	r3, #0
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e120      	b.n	8004b36 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	f040 808a 	bne.w	8004a14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004906:	d137      	bne.n	8004978 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004926:	d113      	bne.n	8004950 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004936:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	e0f2      	b.n	8004b36 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004950:	2300      	movs	r3, #0
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	623b      	str	r3, [r7, #32]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	623b      	str	r3, [r7, #32]
 8004964:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e0de      	b.n	8004b36 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	2b08      	cmp	r3, #8
 800497c:	d02e      	beq.n	80049dc <I2C_Master_ADDR+0x1b2>
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	2b20      	cmp	r3, #32
 8004982:	d02b      	beq.n	80049dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	2b12      	cmp	r3, #18
 8004988:	d102      	bne.n	8004990 <I2C_Master_ADDR+0x166>
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b01      	cmp	r3, #1
 800498e:	d125      	bne.n	80049dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	2b04      	cmp	r3, #4
 8004994:	d00e      	beq.n	80049b4 <I2C_Master_ADDR+0x18a>
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	2b02      	cmp	r3, #2
 800499a:	d00b      	beq.n	80049b4 <I2C_Master_ADDR+0x18a>
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d008      	beq.n	80049b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e007      	b.n	80049c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	e0ac      	b.n	8004b36 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e090      	b.n	8004b36 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d158      	bne.n	8004ad0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d021      	beq.n	8004a68 <I2C_Master_ADDR+0x23e>
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d01e      	beq.n	8004a68 <I2C_Master_ADDR+0x23e>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d01b      	beq.n	8004a68 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a3e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e012      	b.n	8004a8e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9c:	d14b      	bne.n	8004b36 <I2C_Master_ADDR+0x30c>
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aa4:	d00b      	beq.n	8004abe <I2C_Master_ADDR+0x294>
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d008      	beq.n	8004abe <I2C_Master_ADDR+0x294>
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d005      	beq.n	8004abe <I2C_Master_ADDR+0x294>
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d002      	beq.n	8004abe <I2C_Master_ADDR+0x294>
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d13b      	bne.n	8004b36 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	e032      	b.n	8004b36 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ade:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aee:	d117      	bne.n	8004b20 <I2C_Master_ADDR+0x2f6>
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af6:	d00b      	beq.n	8004b10 <I2C_Master_ADDR+0x2e6>
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d008      	beq.n	8004b10 <I2C_Master_ADDR+0x2e6>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d005      	beq.n	8004b10 <I2C_Master_ADDR+0x2e6>
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d002      	beq.n	8004b10 <I2C_Master_ADDR+0x2e6>
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d107      	bne.n	8004b20 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b1e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b3c:	e00b      	b.n	8004b56 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68bb      	ldr	r3, [r7, #8]
}
 8004b54:	e7ff      	b.n	8004b56 <I2C_Master_ADDR+0x32c>
 8004b56:	bf00      	nop
 8004b58:	3744      	adds	r7, #68	; 0x44
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d02b      	beq.n	8004bd2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	781a      	ldrb	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d114      	bne.n	8004bd2 <I2C_SlaveTransmit_TXE+0x72>
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b29      	cmp	r3, #41	; 0x29
 8004bac:	d111      	bne.n	8004bd2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2221      	movs	r2, #33	; 0x21
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2228      	movs	r2, #40	; 0x28
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fa58 	bl	8004082 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d011      	beq.n	8004c10 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02c      	beq.n	8004c8e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d114      	bne.n	8004c8e <I2C_SlaveReceive_RXNE+0x74>
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b2a      	cmp	r3, #42	; 0x2a
 8004c68:	d111      	bne.n	8004c8e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2222      	movs	r2, #34	; 0x22
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2228      	movs	r2, #40	; 0x28
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fa03 	bl	8004094 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr

08004cd8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cf2:	2b28      	cmp	r3, #40	; 0x28
 8004cf4:	d127      	bne.n	8004d46 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d04:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	09db      	lsrs	r3, r3, #7
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	81bb      	strh	r3, [r7, #12]
 8004d28:	e002      	b.n	8004d30 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d38:	89ba      	ldrh	r2, [r7, #12]
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff f9b1 	bl	80040a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d44:	e008      	b.n	8004d58 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0202 	mvn.w	r2, #2
 8004d4e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d80:	2300      	movs	r3, #0
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbc:	d172      	bne.n	8004ea4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b22      	cmp	r3, #34	; 0x22
 8004dc2:	d002      	beq.n	8004dca <I2C_Slave_STOPF+0x6a>
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc8:	d135      	bne.n	8004e36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f043 0204 	orr.w	r2, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe f942 	bl	800308c <HAL_DMA_GetState>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d049      	beq.n	8004ea2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	4a69      	ldr	r2, [pc, #420]	; (8004fb8 <I2C_Slave_STOPF+0x258>)
 8004e14:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe f8c0 	bl	8002fa0 <HAL_DMA_Abort_IT>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d03d      	beq.n	8004ea2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e34:	e035      	b.n	8004ea2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f043 0204 	orr.w	r2, r3, #4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe f90c 	bl	800308c <HAL_DMA_GetState>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d014      	beq.n	8004ea4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7e:	4a4e      	ldr	r2, [pc, #312]	; (8004fb8 <I2C_Slave_STOPF+0x258>)
 8004e80:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe f88a 	bl	8002fa0 <HAL_DMA_Abort_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
 8004ea0:	e000      	b.n	8004ea4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ea2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d03e      	beq.n	8004f2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d112      	bne.n	8004ee2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d112      	bne.n	8004f16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f043 0204 	orr.w	r2, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8b3 	bl	80050a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f3a:	e039      	b.n	8004fb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f40:	d109      	bne.n	8004f56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2228      	movs	r2, #40	; 0x28
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff f89f 	bl	8004094 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b28      	cmp	r3, #40	; 0x28
 8004f60:	d111      	bne.n	8004f86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <I2C_Slave_STOPF+0x25c>)
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff f89e 	bl	80040c0 <HAL_I2C_ListenCpltCallback>
}
 8004f84:	e014      	b.n	8004fb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	2b22      	cmp	r3, #34	; 0x22
 8004f8c:	d002      	beq.n	8004f94 <I2C_Slave_STOPF+0x234>
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b22      	cmp	r3, #34	; 0x22
 8004f92:	d10d      	bne.n	8004fb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff f872 	bl	8004094 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08005581 	.word	0x08005581
 8004fbc:	ffff0000 	.word	0xffff0000

08004fc0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d002      	beq.n	8004fe2 <I2C_Slave_AF+0x22>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d129      	bne.n	8005036 <I2C_Slave_AF+0x76>
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b28      	cmp	r3, #40	; 0x28
 8004fe6:	d126      	bne.n	8005036 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a2c      	ldr	r2, [pc, #176]	; (800509c <I2C_Slave_AF+0xdc>)
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ffc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005006:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff f846 	bl	80040c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005034:	e02e      	b.n	8005094 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b21      	cmp	r3, #33	; 0x21
 800503a:	d126      	bne.n	800508a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a17      	ldr	r2, [pc, #92]	; (800509c <I2C_Slave_AF+0xdc>)
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2221      	movs	r2, #33	; 0x21
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005066:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005070:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005080:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fe fffd 	bl	8004082 <HAL_I2C_SlaveTxCpltCallback>
}
 8005088:	e004      	b.n	8005094 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005092:	615a      	str	r2, [r3, #20]
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	ffff0000 	.word	0xffff0000

080050a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ae:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d10a      	bne.n	80050d2 <I2C_ITError+0x32>
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b22      	cmp	r3, #34	; 0x22
 80050c0:	d107      	bne.n	80050d2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050d8:	2b28      	cmp	r3, #40	; 0x28
 80050da:	d107      	bne.n	80050ec <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2228      	movs	r2, #40	; 0x28
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050ea:	e015      	b.n	8005118 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fa:	d006      	beq.n	800510a <I2C_ITError+0x6a>
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b60      	cmp	r3, #96	; 0x60
 8005100:	d003      	beq.n	800510a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d161      	bne.n	80051ec <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005136:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005140:	2b01      	cmp	r3, #1
 8005142:	d020      	beq.n	8005186 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	4a5e      	ldr	r2, [pc, #376]	; (80052c4 <I2C_ITError+0x224>)
 800514a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	4618      	mov	r0, r3
 8005152:	f7fd ff25 	bl	8002fa0 <HAL_DMA_Abort_IT>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8089 	beq.w	8005270 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
 8005184:	e074      	b.n	8005270 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	4a4e      	ldr	r2, [pc, #312]	; (80052c4 <I2C_ITError+0x224>)
 800518c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd ff04 	bl	8002fa0 <HAL_DMA_Abort_IT>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d068      	beq.n	8005270 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d10b      	bne.n	80051c4 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e6:	4610      	mov	r0, r2
 80051e8:	4798      	blx	r3
 80051ea:	e041      	b.n	8005270 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b60      	cmp	r3, #96	; 0x60
 80051f6:	d125      	bne.n	8005244 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d10b      	bne.n	800522c <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0201 	bic.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7fe ff63 	bl	8004108 <HAL_I2C_AbortCpltCallback>
 8005242:	e015      	b.n	8005270 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d10b      	bne.n	800526a <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fe ff43 	bl	80040f6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005276:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b04      	cmp	r3, #4
 8005282:	d11b      	bne.n	80052bc <I2C_ITError+0x21c>
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b28      	cmp	r3, #40	; 0x28
 8005288:	d118      	bne.n	80052bc <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005298:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <I2C_ITError+0x228>)
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fe ff02 	bl	80040c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	08005581 	.word	0x08005581
 80052c8:	ffff0000 	.word	0xffff0000

080052cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	4608      	mov	r0, r1
 80052d6:	4611      	mov	r1, r2
 80052d8:	461a      	mov	r2, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	817b      	strh	r3, [r7, #10]
 80052de:	460b      	mov	r3, r1
 80052e0:	813b      	strh	r3, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f9ab 	bl	800565e <I2C_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e05f      	b.n	80053d2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005312:	897b      	ldrh	r3, [r7, #10]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	492d      	ldr	r1, [pc, #180]	; (80053dc <I2C_RequestMemoryWrite+0x110>)
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f9ef 	bl	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e04c      	b.n	80053d2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	6a39      	ldr	r1, [r7, #32]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fa59 	bl	800580a <I2C_WaitOnTXEFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b04      	cmp	r3, #4
 8005364:	d107      	bne.n	8005376 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e02b      	b.n	80053d2 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d105      	bne.n	800538c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005380:	893b      	ldrh	r3, [r7, #8]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	611a      	str	r2, [r3, #16]
 800538a:	e021      	b.n	80053d0 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800538c:	893b      	ldrh	r3, [r7, #8]
 800538e:	0a1b      	lsrs	r3, r3, #8
 8005390:	b29b      	uxth	r3, r3
 8005392:	b2da      	uxtb	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800539a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539c:	6a39      	ldr	r1, [r7, #32]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fa33 	bl	800580a <I2C_WaitOnTXEFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d107      	bne.n	80053c2 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e005      	b.n	80053d2 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c6:	893b      	ldrh	r3, [r7, #8]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	00010002 	.word	0x00010002

080053e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	817b      	strh	r3, [r7, #10]
 80053f2:	460b      	mov	r3, r1
 80053f4:	813b      	strh	r3, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005408:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	2200      	movs	r2, #0
 8005422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f919 	bl	800565e <I2C_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e09e      	b.n	8005574 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005436:	897b      	ldrh	r3, [r7, #10]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	494c      	ldr	r1, [pc, #304]	; (800557c <I2C_RequestMemoryRead+0x19c>)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f95d 	bl	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e08b      	b.n	8005574 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005474:	6a39      	ldr	r1, [r7, #32]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f9c7 	bl	800580a <I2C_WaitOnTXEFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2b04      	cmp	r3, #4
 8005488:	d107      	bne.n	800549a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e06a      	b.n	8005574 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d105      	bne.n	80054b0 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a4:	893b      	ldrh	r3, [r7, #8]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	e021      	b.n	80054f4 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054b0:	893b      	ldrh	r3, [r7, #8]
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	6a39      	ldr	r1, [r7, #32]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f9a1 	bl	800580a <I2C_WaitOnTXEFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d107      	bne.n	80054e6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e044      	b.n	8005574 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ea:	893b      	ldrh	r3, [r7, #8]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f6:	6a39      	ldr	r1, [r7, #32]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f986 	bl	800580a <I2C_WaitOnTXEFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	2b04      	cmp	r3, #4
 800550a:	d107      	bne.n	800551c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e029      	b.n	8005574 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	2200      	movs	r2, #0
 8005538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f88e 	bl	800565e <I2C_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e013      	b.n	8005574 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800554c:	897b      	ldrh	r3, [r7, #10]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	b2da      	uxtb	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	6a3a      	ldr	r2, [r7, #32]
 8005560:	4906      	ldr	r1, [pc, #24]	; (800557c <I2C_RequestMemoryRead+0x19c>)
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f8d2 	bl	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	00010002 	.word	0x00010002

08005580 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	2200      	movs	r2, #0
 800559c:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	2200      	movs	r2, #0
 80055a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	2200      	movs	r2, #0
 80055c2:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	2200      	movs	r2, #0
 80055ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b60      	cmp	r3, #96	; 0x60
 80055e6:	d10e      	bne.n	8005606 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7fe fd82 	bl	8004108 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005604:	e027      	b.n	8005656 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800560c:	2b28      	cmp	r3, #40	; 0x28
 800560e:	d117      	bne.n	8005640 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800562e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2228      	movs	r2, #40	; 0x28
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800563e:	e007      	b.n	8005650 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7fe fd50 	bl	80040f6 <HAL_I2C_ErrorCallback>
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	4613      	mov	r3, r2
 800566c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800566e:	e025      	b.n	80056bc <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d021      	beq.n	80056bc <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005678:	f7fd fb7a 	bl	8002d70 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d302      	bcc.n	800568e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d116      	bne.n	80056bc <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e023      	b.n	8005704 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	0c1b      	lsrs	r3, r3, #16
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d10d      	bne.n	80056e2 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	43da      	mvns	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4013      	ands	r3, r2
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	e00c      	b.n	80056fc <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	43da      	mvns	r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4013      	ands	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d0b6      	beq.n	8005670 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800571a:	e051      	b.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572a:	d123      	bne.n	8005774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f043 0204 	orr.w	r2, r3, #4
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e046      	b.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d021      	beq.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577c:	f7fd faf8 	bl	8002d70 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d116      	bne.n	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f043 0220 	orr.w	r2, r3, #32
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e020      	b.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	0c1b      	lsrs	r3, r3, #16
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d10c      	bne.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	43da      	mvns	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4013      	ands	r3, r2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e00b      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	43da      	mvns	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d18d      	bne.n	800571c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005816:	e02d      	b.n	8005874 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f8ce 	bl	80059ba <I2C_IsAcknowledgeFailed>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e02d      	b.n	8005884 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d021      	beq.n	8005874 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005830:	f7fd fa9e 	bl	8002d70 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d116      	bne.n	8005874 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	f043 0220 	orr.w	r2, r3, #32
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e007      	b.n	8005884 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d1ca      	bne.n	8005818 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005898:	e02d      	b.n	80058f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f88d 	bl	80059ba <I2C_IsAcknowledgeFailed>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e02d      	b.n	8005906 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d021      	beq.n	80058f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b2:	f7fd fa5d 	bl	8002d70 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d302      	bcc.n	80058c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d116      	bne.n	80058f6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e007      	b.n	8005906 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b04      	cmp	r3, #4
 8005902:	d1ca      	bne.n	800589a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800591a:	e042      	b.n	80059a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b10      	cmp	r3, #16
 8005928:	d119      	bne.n	800595e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f06f 0210 	mvn.w	r2, #16
 8005932:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e029      	b.n	80059b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595e:	f7fd fa07 	bl	8002d70 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d116      	bne.n	80059a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e007      	b.n	80059b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d1b5      	bne.n	800591c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d0:	d11b      	bne.n	8005a0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0204 	orr.w	r2, r3, #4
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a26:	d103      	bne.n	8005a30 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a2e:	e007      	b.n	8005a40 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a38:	d102      	bne.n	8005a40 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
	...

08005a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e26c      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8087 	beq.w	8005b7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a6c:	4b92      	ldr	r3, [pc, #584]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 030c 	and.w	r3, r3, #12
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d00c      	beq.n	8005a92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a78:	4b8f      	ldr	r3, [pc, #572]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d112      	bne.n	8005aaa <HAL_RCC_OscConfig+0x5e>
 8005a84:	4b8c      	ldr	r3, [pc, #560]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d10b      	bne.n	8005aaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a92:	4b89      	ldr	r3, [pc, #548]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d06c      	beq.n	8005b78 <HAL_RCC_OscConfig+0x12c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d168      	bne.n	8005b78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e246      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab2:	d106      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x76>
 8005ab4:	4b80      	ldr	r3, [pc, #512]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a7f      	ldr	r2, [pc, #508]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	e02e      	b.n	8005b20 <HAL_RCC_OscConfig+0xd4>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x98>
 8005aca:	4b7b      	ldr	r3, [pc, #492]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a7a      	ldr	r2, [pc, #488]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	4b78      	ldr	r3, [pc, #480]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a77      	ldr	r2, [pc, #476]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e01d      	b.n	8005b20 <HAL_RCC_OscConfig+0xd4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aec:	d10c      	bne.n	8005b08 <HAL_RCC_OscConfig+0xbc>
 8005aee:	4b72      	ldr	r3, [pc, #456]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a71      	ldr	r2, [pc, #452]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4b6f      	ldr	r3, [pc, #444]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6e      	ldr	r2, [pc, #440]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e00b      	b.n	8005b20 <HAL_RCC_OscConfig+0xd4>
 8005b08:	4b6b      	ldr	r3, [pc, #428]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6a      	ldr	r2, [pc, #424]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	4b68      	ldr	r3, [pc, #416]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a67      	ldr	r2, [pc, #412]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d013      	beq.n	8005b50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b28:	f7fd f922 	bl	8002d70 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fd f91e 	bl	8002d70 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	; 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e1fa      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b42:	4b5d      	ldr	r3, [pc, #372]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0xe4>
 8005b4e:	e014      	b.n	8005b7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b50:	f7fd f90e 	bl	8002d70 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b58:	f7fd f90a 	bl	8002d70 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	; 0x64
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e1e6      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6a:	4b53      	ldr	r3, [pc, #332]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x10c>
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d063      	beq.n	8005c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b86:	4b4c      	ldr	r3, [pc, #304]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b92:	4b49      	ldr	r3, [pc, #292]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d11c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x18c>
 8005b9e:	4b46      	ldr	r3, [pc, #280]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d116      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005baa:	4b43      	ldr	r3, [pc, #268]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x176>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d001      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e1ba      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc2:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	4939      	ldr	r1, [pc, #228]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bd6:	e03a      	b.n	8005c4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d020      	beq.n	8005c22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be0:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be6:	f7fd f8c3 	bl	8002d70 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bee:	f7fd f8bf 	bl	8002d70 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e19b      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c00:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4927      	ldr	r1, [pc, #156]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	600b      	str	r3, [r1, #0]
 8005c20:	e015      	b.n	8005c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c22:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fd f8a2 	bl	8002d70 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c30:	f7fd f89e 	bl	8002d70 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e17a      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c42:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d03a      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d019      	beq.n	8005c96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c62:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <HAL_RCC_OscConfig+0x274>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c68:	f7fd f882 	bl	8002d70 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c70:	f7fd f87e 	bl	8002d70 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e15a      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c82:	4b0d      	ldr	r3, [pc, #52]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c8e:	2001      	movs	r0, #1
 8005c90:	f000 fada 	bl	8006248 <RCC_Delay>
 8005c94:	e01c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <HAL_RCC_OscConfig+0x274>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c9c:	f7fd f868 	bl	8002d70 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca2:	e00f      	b.n	8005cc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca4:	f7fd f864 	bl	8002d70 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d908      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e140      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	42420000 	.word	0x42420000
 8005cc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc4:	4b9e      	ldr	r3, [pc, #632]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e9      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80a6 	beq.w	8005e2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce2:	4b97      	ldr	r3, [pc, #604]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cee:	4b94      	ldr	r3, [pc, #592]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	4a93      	ldr	r2, [pc, #588]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf8:	61d3      	str	r3, [r2, #28]
 8005cfa:	4b91      	ldr	r3, [pc, #580]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0a:	4b8e      	ldr	r3, [pc, #568]	; (8005f44 <HAL_RCC_OscConfig+0x4f8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d118      	bne.n	8005d48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d16:	4b8b      	ldr	r3, [pc, #556]	; (8005f44 <HAL_RCC_OscConfig+0x4f8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a8a      	ldr	r2, [pc, #552]	; (8005f44 <HAL_RCC_OscConfig+0x4f8>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d22:	f7fd f825 	bl	8002d70 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2a:	f7fd f821 	bl	8002d70 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b64      	cmp	r3, #100	; 0x64
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e0fd      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3c:	4b81      	ldr	r3, [pc, #516]	; (8005f44 <HAL_RCC_OscConfig+0x4f8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d106      	bne.n	8005d5e <HAL_RCC_OscConfig+0x312>
 8005d50:	4b7b      	ldr	r3, [pc, #492]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	4a7a      	ldr	r2, [pc, #488]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	6213      	str	r3, [r2, #32]
 8005d5c:	e02d      	b.n	8005dba <HAL_RCC_OscConfig+0x36e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0x334>
 8005d66:	4b76      	ldr	r3, [pc, #472]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4a75      	ldr	r2, [pc, #468]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d6c:	f023 0301 	bic.w	r3, r3, #1
 8005d70:	6213      	str	r3, [r2, #32]
 8005d72:	4b73      	ldr	r3, [pc, #460]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4a72      	ldr	r2, [pc, #456]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	6213      	str	r3, [r2, #32]
 8005d7e:	e01c      	b.n	8005dba <HAL_RCC_OscConfig+0x36e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d10c      	bne.n	8005da2 <HAL_RCC_OscConfig+0x356>
 8005d88:	4b6d      	ldr	r3, [pc, #436]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	4a6c      	ldr	r2, [pc, #432]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d8e:	f043 0304 	orr.w	r3, r3, #4
 8005d92:	6213      	str	r3, [r2, #32]
 8005d94:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	4a69      	ldr	r2, [pc, #420]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6213      	str	r3, [r2, #32]
 8005da0:	e00b      	b.n	8005dba <HAL_RCC_OscConfig+0x36e>
 8005da2:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	4a66      	ldr	r2, [pc, #408]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	6213      	str	r3, [r2, #32]
 8005dae:	4b64      	ldr	r3, [pc, #400]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	4a63      	ldr	r2, [pc, #396]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005db4:	f023 0304 	bic.w	r3, r3, #4
 8005db8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d015      	beq.n	8005dee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc2:	f7fc ffd5 	bl	8002d70 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc8:	e00a      	b.n	8005de0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dca:	f7fc ffd1 	bl	8002d70 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e0ab      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	4b57      	ldr	r3, [pc, #348]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0ee      	beq.n	8005dca <HAL_RCC_OscConfig+0x37e>
 8005dec:	e014      	b.n	8005e18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dee:	f7fc ffbf 	bl	8002d70 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df4:	e00a      	b.n	8005e0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df6:	f7fc ffbb 	bl	8002d70 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e095      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e0c:	4b4c      	ldr	r3, [pc, #304]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1ee      	bne.n	8005df6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d105      	bne.n	8005e2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e1e:	4b48      	ldr	r3, [pc, #288]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	4a47      	ldr	r2, [pc, #284]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8081 	beq.w	8005f36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e34:	4b42      	ldr	r3, [pc, #264]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 030c 	and.w	r3, r3, #12
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d061      	beq.n	8005f04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d146      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e48:	4b3f      	ldr	r3, [pc, #252]	; (8005f48 <HAL_RCC_OscConfig+0x4fc>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4e:	f7fc ff8f 	bl	8002d70 <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e56:	f7fc ff8b 	bl	8002d70 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e067      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e68:	4b35      	ldr	r3, [pc, #212]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f0      	bne.n	8005e56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d108      	bne.n	8005e90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e7e:	4b30      	ldr	r3, [pc, #192]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	492d      	ldr	r1, [pc, #180]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e90:	4b2b      	ldr	r3, [pc, #172]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a19      	ldr	r1, [r3, #32]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	4927      	ldr	r1, [pc, #156]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ea8:	4b27      	ldr	r3, [pc, #156]	; (8005f48 <HAL_RCC_OscConfig+0x4fc>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eae:	f7fc ff5f 	bl	8002d70 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb6:	f7fc ff5b 	bl	8002d70 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e037      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x46a>
 8005ed4:	e02f      	b.n	8005f36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <HAL_RCC_OscConfig+0x4fc>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005edc:	f7fc ff48 	bl	8002d70 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee4:	f7fc ff44 	bl	8002d70 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e020      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x498>
 8005f02:	e018      	b.n	8005f36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e013      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_RCC_OscConfig+0x4f4>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d106      	bne.n	8005f32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d001      	beq.n	8005f36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40007000 	.word	0x40007000
 8005f48:	42420060 	.word	0x42420060

08005f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0d0      	b.n	8006102 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f60:	4b6a      	ldr	r3, [pc, #424]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d910      	bls.n	8005f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6e:	4b67      	ldr	r3, [pc, #412]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 0207 	bic.w	r2, r3, #7
 8005f76:	4965      	ldr	r1, [pc, #404]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7e:	4b63      	ldr	r3, [pc, #396]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0b8      	b.n	8006102 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d020      	beq.n	8005fde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fa8:	4b59      	ldr	r3, [pc, #356]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4a58      	ldr	r2, [pc, #352]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 8005fae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fc0:	4b53      	ldr	r3, [pc, #332]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a52      	ldr	r2, [pc, #328]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fcc:	4b50      	ldr	r3, [pc, #320]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	494d      	ldr	r1, [pc, #308]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d040      	beq.n	800606c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d107      	bne.n	8006002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff2:	4b47      	ldr	r3, [pc, #284]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d115      	bne.n	800602a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e07f      	b.n	8006102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d107      	bne.n	800601a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800600a:	4b41      	ldr	r3, [pc, #260]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e073      	b.n	8006102 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800601a:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e06b      	b.n	8006102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800602a:	4b39      	ldr	r3, [pc, #228]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f023 0203 	bic.w	r2, r3, #3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	4936      	ldr	r1, [pc, #216]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 8006038:	4313      	orrs	r3, r2
 800603a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800603c:	f7fc fe98 	bl	8002d70 <HAL_GetTick>
 8006040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006042:	e00a      	b.n	800605a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006044:	f7fc fe94 	bl	8002d70 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e053      	b.n	8006102 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	4b2d      	ldr	r3, [pc, #180]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f003 020c 	and.w	r2, r3, #12
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	429a      	cmp	r2, r3
 800606a:	d1eb      	bne.n	8006044 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800606c:	4b27      	ldr	r3, [pc, #156]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d210      	bcs.n	800609c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f023 0207 	bic.w	r2, r3, #7
 8006082:	4922      	ldr	r1, [pc, #136]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	4313      	orrs	r3, r2
 8006088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800608a:	4b20      	ldr	r3, [pc, #128]	; (800610c <HAL_RCC_ClockConfig+0x1c0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e032      	b.n	8006102 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060a8:	4b19      	ldr	r3, [pc, #100]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4916      	ldr	r1, [pc, #88]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d009      	beq.n	80060da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060c6:	4b12      	ldr	r3, [pc, #72]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	490e      	ldr	r1, [pc, #56]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060da:	f000 f821 	bl	8006120 <HAL_RCC_GetSysClockFreq>
 80060de:	4601      	mov	r1, r0
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <HAL_RCC_ClockConfig+0x1c4>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <HAL_RCC_ClockConfig+0x1c8>)
 80060ec:	5cd3      	ldrb	r3, [r2, r3]
 80060ee:	fa21 f303 	lsr.w	r3, r1, r3
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <HAL_RCC_ClockConfig+0x1cc>)
 80060f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_RCC_ClockConfig+0x1d0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fc fdf6 	bl	8002cec <HAL_InitTick>

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40022000 	.word	0x40022000
 8006110:	40021000 	.word	0x40021000
 8006114:	0800c5a0 	.word	0x0800c5a0
 8006118:	20000018 	.word	0x20000018
 800611c:	2000001c 	.word	0x2000001c

08006120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006120:	b490      	push	{r4, r7}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006126:	4b2a      	ldr	r3, [pc, #168]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006128:	1d3c      	adds	r4, r7, #4
 800612a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800612c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006130:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	2300      	movs	r3, #0
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	2300      	movs	r3, #0
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800614a:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	2b04      	cmp	r3, #4
 8006158:	d002      	beq.n	8006160 <HAL_RCC_GetSysClockFreq+0x40>
 800615a:	2b08      	cmp	r3, #8
 800615c:	d003      	beq.n	8006166 <HAL_RCC_GetSysClockFreq+0x46>
 800615e:	e02d      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006162:	623b      	str	r3, [r7, #32]
      break;
 8006164:	e02d      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	0c9b      	lsrs	r3, r3, #18
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006172:	4413      	add	r3, r2
 8006174:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006178:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d013      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006184:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	0c5b      	lsrs	r3, r3, #17
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006192:	4413      	add	r3, r2
 8006194:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006198:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4a0f      	ldr	r2, [pc, #60]	; (80061dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800619e:	fb02 f203 	mul.w	r2, r2, r3
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
 80061aa:	e004      	b.n	80061b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4a0c      	ldr	r2, [pc, #48]	; (80061e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	623b      	str	r3, [r7, #32]
      break;
 80061ba:	e002      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b07      	ldr	r3, [pc, #28]	; (80061dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80061be:	623b      	str	r3, [r7, #32]
      break;
 80061c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c2:	6a3b      	ldr	r3, [r7, #32]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3728      	adds	r7, #40	; 0x28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc90      	pop	{r4, r7}
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	0800c58c 	.word	0x0800c58c
 80061d4:	0800c59c 	.word	0x0800c59c
 80061d8:	40021000 	.word	0x40021000
 80061dc:	007a1200 	.word	0x007a1200
 80061e0:	003d0900 	.word	0x003d0900

080061e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e8:	4b02      	ldr	r3, [pc, #8]	; (80061f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80061ea:	681b      	ldr	r3, [r3, #0]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr
 80061f4:	20000018 	.word	0x20000018

080061f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061fc:	f7ff fff2 	bl	80061e4 <HAL_RCC_GetHCLKFreq>
 8006200:	4601      	mov	r1, r0
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	4a03      	ldr	r2, [pc, #12]	; (800621c <HAL_RCC_GetPCLK1Freq+0x24>)
 800620e:	5cd3      	ldrb	r3, [r2, r3]
 8006210:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40021000 	.word	0x40021000
 800621c:	0800c5b0 	.word	0x0800c5b0

08006220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006224:	f7ff ffde 	bl	80061e4 <HAL_RCC_GetHCLKFreq>
 8006228:	4601      	mov	r1, r0
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	0adb      	lsrs	r3, r3, #11
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	4a03      	ldr	r2, [pc, #12]	; (8006244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006236:	5cd3      	ldrb	r3, [r2, r3]
 8006238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021000 	.word	0x40021000
 8006244:	0800c5b0 	.word	0x0800c5b0

08006248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006250:	4b0a      	ldr	r3, [pc, #40]	; (800627c <RCC_Delay+0x34>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <RCC_Delay+0x38>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	0a5b      	lsrs	r3, r3, #9
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006264:	bf00      	nop
  }
  while (Delay --);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1e5a      	subs	r2, r3, #1
 800626a:	60fa      	str	r2, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f9      	bne.n	8006264 <RCC_Delay+0x1c>
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000018 	.word	0x20000018
 8006280:	10624dd3 	.word	0x10624dd3

08006284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e01d      	b.n	80062d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fc faea 	bl	8002884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f000 fb34 	bl	8006930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b06      	cmp	r3, #6
 8006302:	d007      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e01d      	b.n	800636e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fc fa6c 	bl	8002824 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f000 fae6 	bl	8006930 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2201      	movs	r2, #1
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fd50 	bl	8006e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a10      	ldr	r2, [pc, #64]	; (80063d8 <HAL_TIM_PWM_Start+0x60>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d107      	bne.n	80063aa <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b06      	cmp	r3, #6
 80063ba:	d007      	beq.n	80063cc <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40012c00 	.word	0x40012c00

080063dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0202 	mvn.w	r2, #2
 8006408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa6a 	bl	80068f8 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa5d 	bl	80068e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa6c 	bl	800690a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b04      	cmp	r3, #4
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0204 	mvn.w	r2, #4
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa40 	bl	80068f8 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa33 	bl	80068e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa42 	bl	800690a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0208 	mvn.w	r2, #8
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2204      	movs	r2, #4
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa16 	bl	80068f8 <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa09 	bl	80068e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fa18 	bl	800690a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0210 	mvn.w	r2, #16
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2208      	movs	r2, #8
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9ec 	bl	80068f8 <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9df 	bl	80068e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f9ee 	bl	800690a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0201 	mvn.w	r2, #1
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fb fd88 	bl	8002070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d10e      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d107      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fd14 	bl	8006fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d10e      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d107      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9b2 	bl	800691c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d10e      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d107      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0220 	mvn.w	r2, #32
 80065dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fcdf 	bl	8006fa2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006602:	2302      	movs	r3, #2
 8006604:	e0b4      	b.n	8006770 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b0c      	cmp	r3, #12
 800661a:	f200 809f 	bhi.w	800675c <HAL_TIM_PWM_ConfigChannel+0x170>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006659 	.word	0x08006659
 8006628:	0800675d 	.word	0x0800675d
 800662c:	0800675d 	.word	0x0800675d
 8006630:	0800675d 	.word	0x0800675d
 8006634:	08006699 	.word	0x08006699
 8006638:	0800675d 	.word	0x0800675d
 800663c:	0800675d 	.word	0x0800675d
 8006640:	0800675d 	.word	0x0800675d
 8006644:	080066db 	.word	0x080066db
 8006648:	0800675d 	.word	0x0800675d
 800664c:	0800675d 	.word	0x0800675d
 8006650:	0800675d 	.word	0x0800675d
 8006654:	0800671b 	.word	0x0800671b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 f9c8 	bl	80069f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0208 	orr.w	r2, r2, #8
 8006672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0204 	bic.w	r2, r2, #4
 8006682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6999      	ldr	r1, [r3, #24]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	619a      	str	r2, [r3, #24]
      break;
 8006696:	e062      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa0e 	bl	8006ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6999      	ldr	r1, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	021a      	lsls	r2, r3, #8
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	619a      	str	r2, [r3, #24]
      break;
 80066d8:	e041      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fa57 	bl	8006b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0208 	orr.w	r2, r2, #8
 80066f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0204 	bic.w	r2, r2, #4
 8006704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69d9      	ldr	r1, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	61da      	str	r2, [r3, #28]
      break;
 8006718:	e021      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 faa1 	bl	8006c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	021a      	lsls	r2, r3, #8
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	61da      	str	r2, [r3, #28]
      break;
 800675a:	e000      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800675c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_TIM_ConfigClockSource+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e0a6      	b.n	80068de <HAL_TIM_ConfigClockSource+0x166>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d067      	beq.n	8006898 <HAL_TIM_ConfigClockSource+0x120>
 80067c8:	2b40      	cmp	r3, #64	; 0x40
 80067ca:	d80b      	bhi.n	80067e4 <HAL_TIM_ConfigClockSource+0x6c>
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d073      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0x140>
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d802      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x62>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d06f      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80067d8:	e078      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d06c      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0x140>
 80067de:	2b30      	cmp	r3, #48	; 0x30
 80067e0:	d06a      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80067e2:	e073      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067e4:	2b70      	cmp	r3, #112	; 0x70
 80067e6:	d00d      	beq.n	8006804 <HAL_TIM_ConfigClockSource+0x8c>
 80067e8:	2b70      	cmp	r3, #112	; 0x70
 80067ea:	d804      	bhi.n	80067f6 <HAL_TIM_ConfigClockSource+0x7e>
 80067ec:	2b50      	cmp	r3, #80	; 0x50
 80067ee:	d033      	beq.n	8006858 <HAL_TIM_ConfigClockSource+0xe0>
 80067f0:	2b60      	cmp	r3, #96	; 0x60
 80067f2:	d041      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80067f4:	e06a      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	d066      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x152>
 80067fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006800:	d017      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006802:	e063      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	6899      	ldr	r1, [r3, #8]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f000 faed 	bl	8006df2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006826:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	609a      	str	r2, [r3, #8]
      break;
 8006830:	e04c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6899      	ldr	r1, [r3, #8]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f000 fad6 	bl	8006df2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006854:	609a      	str	r2, [r3, #8]
      break;
 8006856:	e039      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	6859      	ldr	r1, [r3, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	461a      	mov	r2, r3
 8006866:	f000 fa4d 	bl	8006d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2150      	movs	r1, #80	; 0x50
 8006870:	4618      	mov	r0, r3
 8006872:	f000 faa4 	bl	8006dbe <TIM_ITRx_SetConfig>
      break;
 8006876:	e029      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6859      	ldr	r1, [r3, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	461a      	mov	r2, r3
 8006886:	f000 fa6b 	bl	8006d60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2160      	movs	r1, #96	; 0x60
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fa94 	bl	8006dbe <TIM_ITRx_SetConfig>
      break;
 8006896:	e019      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6859      	ldr	r1, [r3, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	461a      	mov	r2, r3
 80068a6:	f000 fa2d 	bl	8006d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2140      	movs	r1, #64	; 0x40
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fa84 	bl	8006dbe <TIM_ITRx_SetConfig>
      break;
 80068b6:	e009      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f000 fa7b 	bl	8006dbe <TIM_ITRx_SetConfig>
      break;
 80068c8:	e000      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80068ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006912:	bf00      	nop
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	bc80      	pop	{r7}
 800691a:	4770      	bx	lr

0800691c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
	...

08006930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a29      	ldr	r2, [pc, #164]	; (80069e8 <TIM_Base_SetConfig+0xb8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00b      	beq.n	8006960 <TIM_Base_SetConfig+0x30>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694e:	d007      	beq.n	8006960 <TIM_Base_SetConfig+0x30>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a26      	ldr	r2, [pc, #152]	; (80069ec <TIM_Base_SetConfig+0xbc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_Base_SetConfig+0x30>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <TIM_Base_SetConfig+0xc0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d108      	bne.n	8006972 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1c      	ldr	r2, [pc, #112]	; (80069e8 <TIM_Base_SetConfig+0xb8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <TIM_Base_SetConfig+0x62>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006980:	d007      	beq.n	8006992 <TIM_Base_SetConfig+0x62>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <TIM_Base_SetConfig+0xbc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_Base_SetConfig+0x62>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <TIM_Base_SetConfig+0xc0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d108      	bne.n	80069a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <TIM_Base_SetConfig+0xb8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d103      	bne.n	80069d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	615a      	str	r2, [r3, #20]
}
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800

080069f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0201 	bic.w	r2, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 0302 	bic.w	r3, r3, #2
 8006a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a1c      	ldr	r2, [pc, #112]	; (8006abc <TIM_OC1_SetConfig+0xc8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10c      	bne.n	8006a6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0308 	bic.w	r3, r3, #8
 8006a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 0304 	bic.w	r3, r3, #4
 8006a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a13      	ldr	r2, [pc, #76]	; (8006abc <TIM_OC1_SetConfig+0xc8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d111      	bne.n	8006a96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40012c00 	.word	0x40012c00

08006ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f023 0210 	bic.w	r2, r3, #16
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0320 	bic.w	r3, r3, #32
 8006b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <TIM_OC2_SetConfig+0xd0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d10d      	bne.n	8006b3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a14      	ldr	r2, [pc, #80]	; (8006b90 <TIM_OC2_SetConfig+0xd0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d113      	bne.n	8006b6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr
 8006b90:	40012c00 	.word	0x40012c00

08006b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <TIM_OC3_SetConfig+0xd0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d10d      	bne.n	8006c0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a14      	ldr	r2, [pc, #80]	; (8006c64 <TIM_OC3_SetConfig+0xd0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d113      	bne.n	8006c3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	621a      	str	r2, [r3, #32]
}
 8006c58:	bf00      	nop
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	40012c00 	.word	0x40012c00

08006c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	031b      	lsls	r3, r3, #12
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a0f      	ldr	r2, [pc, #60]	; (8006d00 <TIM_OC4_SetConfig+0x98>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d109      	bne.n	8006cdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	019b      	lsls	r3, r3, #6
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc80      	pop	{r7}
 8006cfe:	4770      	bx	lr
 8006d00:	40012c00 	.word	0x40012c00

08006d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f023 030a 	bic.w	r3, r3, #10
 8006d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	f023 0210 	bic.w	r2, r3, #16
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	031b      	lsls	r3, r3, #12
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	621a      	str	r2, [r3, #32]
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr

08006dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f043 0307 	orr.w	r3, r3, #7
 8006de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	609a      	str	r2, [r3, #8]
}
 8006de8:	bf00      	nop
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b087      	sub	sp, #28
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	021a      	lsls	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	609a      	str	r2, [r3, #8]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr

08006e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	2201      	movs	r2, #1
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	43db      	mvns	r3, r3
 8006e52:	401a      	ands	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1a      	ldr	r2, [r3, #32]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e032      	b.n	8006ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e03d      	b.n	8006f98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e03f      	b.n	8007058 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7fb fcef 	bl	80029d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2224      	movs	r2, #36	; 0x24
 8006ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007008:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fb42 	bl	8007694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800701e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800702e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800703e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	4613      	mov	r3, r2
 800706e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b20      	cmp	r3, #32
 800707e:	f040 8083 	bne.w	8007188 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <HAL_UART_Transmit+0x2e>
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e07b      	b.n	800718a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_UART_Transmit+0x40>
 800709c:	2302      	movs	r3, #2
 800709e:	e074      	b.n	800718a <HAL_UART_Transmit+0x12a>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2221      	movs	r2, #33	; 0x21
 80070b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80070b6:	f7fb fe5b 	bl	8002d70 <HAL_GetTick>
 80070ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	88fa      	ldrh	r2, [r7, #6]
 80070c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070c8:	e042      	b.n	8007150 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e0:	d122      	bne.n	8007128 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2200      	movs	r2, #0
 80070ea:	2180      	movs	r1, #128	; 0x80
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f968 	bl	80073c2 <UART_WaitOnFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e046      	b.n	800718a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800710e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3302      	adds	r3, #2
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	e017      	b.n	8007150 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	3301      	adds	r3, #1
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	e013      	b.n	8007150 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2200      	movs	r2, #0
 8007130:	2180      	movs	r1, #128	; 0x80
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f945 	bl	80073c2 <UART_WaitOnFlagUntilTimeout>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e023      	b.n	800718a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	60ba      	str	r2, [r7, #8]
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1b7      	bne.n	80070ca <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2200      	movs	r2, #0
 8007162:	2140      	movs	r1, #64	; 0x40
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f92c 	bl	80073c2 <UART_WaitOnFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e00a      	b.n	800718a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2220      	movs	r2, #32
 8007178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	e000      	b.n	800718a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007188:	2302      	movs	r3, #2
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10d      	bne.n	80071e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <HAL_UART_IRQHandler+0x52>
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f9d7 	bl	8007592 <UART_Receive_IT>
      return;
 80071e4:	e0cc      	b.n	8007380 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80ab 	beq.w	8007344 <HAL_UART_IRQHandler+0x1b0>
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <HAL_UART_IRQHandler+0x70>
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 80a0 	beq.w	8007344 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_UART_IRQHandler+0x90>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721c:	f043 0201 	orr.w	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <HAL_UART_IRQHandler+0xb0>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723c:	f043 0202 	orr.w	r2, r3, #2
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_UART_IRQHandler+0xd0>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725c:	f043 0204 	orr.w	r2, r3, #4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <HAL_UART_IRQHandler+0xf0>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727c:	f043 0208 	orr.w	r2, r3, #8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d078      	beq.n	800737e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d007      	beq.n	80072a6 <HAL_UART_IRQHandler+0x112>
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f976 	bl	8007592 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf14      	ite	ne
 80072b4:	2301      	movne	r3, #1
 80072b6:	2300      	moveq	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <HAL_UART_IRQHandler+0x13a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d031      	beq.n	8007332 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8c1 	bl	8007456 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d023      	beq.n	800732a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d013      	beq.n	8007322 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fe:	4a22      	ldr	r2, [pc, #136]	; (8007388 <HAL_UART_IRQHandler+0x1f4>)
 8007300:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	4618      	mov	r0, r3
 8007308:	f7fb fe4a 	bl	8002fa0 <HAL_DMA_Abort_IT>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	e00e      	b.n	8007340 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f844 	bl	80073b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	e00a      	b.n	8007340 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f840 	bl	80073b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	e006      	b.n	8007340 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f83c 	bl	80073b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800733e:	e01e      	b.n	800737e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007340:	bf00      	nop
    return;
 8007342:	e01c      	b.n	800737e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734a:	2b00      	cmp	r3, #0
 800734c:	d008      	beq.n	8007360 <HAL_UART_IRQHandler+0x1cc>
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f8ad 	bl	80074b8 <UART_Transmit_IT>
    return;
 800735e:	e00f      	b.n	8007380 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <HAL_UART_IRQHandler+0x1ec>
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f8f4 	bl	8007562 <UART_EndTransmit_IT>
    return;
 800737a:	bf00      	nop
 800737c:	e000      	b.n	8007380 <HAL_UART_IRQHandler+0x1ec>
    return;
 800737e:	bf00      	nop
  }
}
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	08007491 	.word	0x08007491

0800738c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	bc80      	pop	{r7}
 800739c:	4770      	bx	lr

0800739e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr

080073c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	603b      	str	r3, [r7, #0]
 80073ce:	4613      	mov	r3, r2
 80073d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d2:	e02c      	b.n	800742e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d028      	beq.n	800742e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80073e2:	f7fb fcc5 	bl	8002d70 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d21d      	bcs.n	800742e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007400:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695a      	ldr	r2, [r3, #20]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e00f      	b.n	800744e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4013      	ands	r3, r2
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	429a      	cmp	r2, r3
 800744a:	d0c3      	beq.n	80073d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800746c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0201 	bic.w	r2, r2, #1
 800747c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff ff80 	bl	80073b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b21      	cmp	r3, #33	; 0x21
 80074ca:	d144      	bne.n	8007556 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d4:	d11a      	bne.n	800750c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	1c9a      	adds	r2, r3, #2
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	621a      	str	r2, [r3, #32]
 80074fe:	e00e      	b.n	800751e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	621a      	str	r2, [r3, #32]
 800750a:	e008      	b.n	800751e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	1c59      	adds	r1, r3, #1
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6211      	str	r1, [r2, #32]
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29b      	uxth	r3, r3
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10f      	bne.n	8007552 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007540:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007550:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	e000      	b.n	8007558 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr

08007562 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007578:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ff02 	bl	800738c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b22      	cmp	r3, #34	; 0x22
 80075a4:	d171      	bne.n	800768a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	d123      	bne.n	80075f8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10e      	bne.n	80075dc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	1c9a      	adds	r2, r3, #2
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	629a      	str	r2, [r3, #40]	; 0x28
 80075da:	e029      	b.n	8007630 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	629a      	str	r2, [r3, #40]	; 0x28
 80075f6:	e01b      	b.n	8007630 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6858      	ldr	r0, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	1c59      	adds	r1, r3, #1
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6291      	str	r1, [r2, #40]	; 0x28
 8007610:	b2c2      	uxtb	r2, r0
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	e00c      	b.n	8007630 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	1c58      	adds	r0, r3, #1
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	6288      	str	r0, [r1, #40]	; 0x28
 8007628:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29b      	uxth	r3, r3
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	4619      	mov	r1, r3
 800763e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007640:	2b00      	cmp	r3, #0
 8007642:	d120      	bne.n	8007686 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0220 	bic.w	r2, r2, #32
 8007652:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695a      	ldr	r2, [r3, #20]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fe8e 	bl	800739e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	e002      	b.n	800768c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e000      	b.n	800768c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800768a:	2302      	movs	r3, #2
  }
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80076ce:	f023 030c 	bic.w	r3, r3, #12
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	430b      	orrs	r3, r1
 80076da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a52      	ldr	r2, [pc, #328]	; (8007840 <UART_SetConfig+0x1ac>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d14e      	bne.n	800779a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80076fc:	f7fe fd90 	bl	8006220 <HAL_RCC_GetPCLK2Freq>
 8007700:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	009a      	lsls	r2, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	4a4a      	ldr	r2, [pc, #296]	; (8007844 <UART_SetConfig+0x1b0>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	095b      	lsrs	r3, r3, #5
 8007720:	0119      	lsls	r1, r3, #4
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	fbb2 f2f3 	udiv	r2, r2, r3
 8007738:	4b42      	ldr	r3, [pc, #264]	; (8007844 <UART_SetConfig+0x1b0>)
 800773a:	fba3 0302 	umull	r0, r3, r3, r2
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	2064      	movs	r0, #100	; 0x64
 8007742:	fb00 f303 	mul.w	r3, r0, r3
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	3332      	adds	r3, #50	; 0x32
 800774c:	4a3d      	ldr	r2, [pc, #244]	; (8007844 <UART_SetConfig+0x1b0>)
 800774e:	fba2 2303 	umull	r2, r3, r2, r3
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007758:	4419      	add	r1, r3
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009a      	lsls	r2, r3, #2
 8007764:	441a      	add	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007770:	4b34      	ldr	r3, [pc, #208]	; (8007844 <UART_SetConfig+0x1b0>)
 8007772:	fba3 0302 	umull	r0, r3, r3, r2
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	2064      	movs	r0, #100	; 0x64
 800777a:	fb00 f303 	mul.w	r3, r0, r3
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	3332      	adds	r3, #50	; 0x32
 8007784:	4a2f      	ldr	r2, [pc, #188]	; (8007844 <UART_SetConfig+0x1b0>)
 8007786:	fba2 2303 	umull	r2, r3, r2, r3
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	f003 020f 	and.w	r2, r3, #15
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	440a      	add	r2, r1
 8007796:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007798:	e04d      	b.n	8007836 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800779a:	f7fe fd2d 	bl	80061f8 <HAL_RCC_GetPCLK1Freq>
 800779e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009a      	lsls	r2, r3, #2
 80077aa:	441a      	add	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b6:	4a23      	ldr	r2, [pc, #140]	; (8007844 <UART_SetConfig+0x1b0>)
 80077b8:	fba2 2303 	umull	r2, r3, r2, r3
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	0119      	lsls	r1, r3, #4
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009a      	lsls	r2, r3, #2
 80077ca:	441a      	add	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80077d6:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <UART_SetConfig+0x1b0>)
 80077d8:	fba3 0302 	umull	r0, r3, r3, r2
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	2064      	movs	r0, #100	; 0x64
 80077e0:	fb00 f303 	mul.w	r3, r0, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	3332      	adds	r3, #50	; 0x32
 80077ea:	4a16      	ldr	r2, [pc, #88]	; (8007844 <UART_SetConfig+0x1b0>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077f6:	4419      	add	r1, r3
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009a      	lsls	r2, r3, #2
 8007802:	441a      	add	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	fbb2 f2f3 	udiv	r2, r2, r3
 800780e:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <UART_SetConfig+0x1b0>)
 8007810:	fba3 0302 	umull	r0, r3, r3, r2
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	2064      	movs	r0, #100	; 0x64
 8007818:	fb00 f303 	mul.w	r3, r0, r3
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	3332      	adds	r3, #50	; 0x32
 8007822:	4a08      	ldr	r2, [pc, #32]	; (8007844 <UART_SetConfig+0x1b0>)
 8007824:	fba2 2303 	umull	r2, r3, r2, r3
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	f003 020f 	and.w	r2, r3, #15
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	440a      	add	r2, r1
 8007834:	609a      	str	r2, [r3, #8]
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40013800 	.word	0x40013800
 8007844:	51eb851f 	.word	0x51eb851f

08007848 <__errno>:
 8007848:	4b01      	ldr	r3, [pc, #4]	; (8007850 <__errno+0x8>)
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000024 	.word	0x20000024

08007854 <__libc_init_array>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	2500      	movs	r5, #0
 8007858:	4e0c      	ldr	r6, [pc, #48]	; (800788c <__libc_init_array+0x38>)
 800785a:	4c0d      	ldr	r4, [pc, #52]	; (8007890 <__libc_init_array+0x3c>)
 800785c:	1ba4      	subs	r4, r4, r6
 800785e:	10a4      	asrs	r4, r4, #2
 8007860:	42a5      	cmp	r5, r4
 8007862:	d109      	bne.n	8007878 <__libc_init_array+0x24>
 8007864:	f004 fd20 	bl	800c2a8 <_init>
 8007868:	2500      	movs	r5, #0
 800786a:	4e0a      	ldr	r6, [pc, #40]	; (8007894 <__libc_init_array+0x40>)
 800786c:	4c0a      	ldr	r4, [pc, #40]	; (8007898 <__libc_init_array+0x44>)
 800786e:	1ba4      	subs	r4, r4, r6
 8007870:	10a4      	asrs	r4, r4, #2
 8007872:	42a5      	cmp	r5, r4
 8007874:	d105      	bne.n	8007882 <__libc_init_array+0x2e>
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800787c:	4798      	blx	r3
 800787e:	3501      	adds	r5, #1
 8007880:	e7ee      	b.n	8007860 <__libc_init_array+0xc>
 8007882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007886:	4798      	blx	r3
 8007888:	3501      	adds	r5, #1
 800788a:	e7f2      	b.n	8007872 <__libc_init_array+0x1e>
 800788c:	0800cae0 	.word	0x0800cae0
 8007890:	0800cae0 	.word	0x0800cae0
 8007894:	0800cae0 	.word	0x0800cae0
 8007898:	0800cae4 	.word	0x0800cae4

0800789c <memset>:
 800789c:	4603      	mov	r3, r0
 800789e:	4402      	add	r2, r0
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d100      	bne.n	80078a6 <memset+0xa>
 80078a4:	4770      	bx	lr
 80078a6:	f803 1b01 	strb.w	r1, [r3], #1
 80078aa:	e7f9      	b.n	80078a0 <memset+0x4>

080078ac <__cvt>:
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b2:	461e      	mov	r6, r3
 80078b4:	bfbb      	ittet	lt
 80078b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80078ba:	461e      	movlt	r6, r3
 80078bc:	2300      	movge	r3, #0
 80078be:	232d      	movlt	r3, #45	; 0x2d
 80078c0:	b088      	sub	sp, #32
 80078c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80078c4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80078c8:	f027 0720 	bic.w	r7, r7, #32
 80078cc:	2f46      	cmp	r7, #70	; 0x46
 80078ce:	4614      	mov	r4, r2
 80078d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80078d2:	700b      	strb	r3, [r1, #0]
 80078d4:	d004      	beq.n	80078e0 <__cvt+0x34>
 80078d6:	2f45      	cmp	r7, #69	; 0x45
 80078d8:	d100      	bne.n	80078dc <__cvt+0x30>
 80078da:	3501      	adds	r5, #1
 80078dc:	2302      	movs	r3, #2
 80078de:	e000      	b.n	80078e2 <__cvt+0x36>
 80078e0:	2303      	movs	r3, #3
 80078e2:	aa07      	add	r2, sp, #28
 80078e4:	9204      	str	r2, [sp, #16]
 80078e6:	aa06      	add	r2, sp, #24
 80078e8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80078ec:	e9cd 3500 	strd	r3, r5, [sp]
 80078f0:	4622      	mov	r2, r4
 80078f2:	4633      	mov	r3, r6
 80078f4:	f000 fdf4 	bl	80084e0 <_dtoa_r>
 80078f8:	2f47      	cmp	r7, #71	; 0x47
 80078fa:	4680      	mov	r8, r0
 80078fc:	d102      	bne.n	8007904 <__cvt+0x58>
 80078fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007900:	07db      	lsls	r3, r3, #31
 8007902:	d526      	bpl.n	8007952 <__cvt+0xa6>
 8007904:	2f46      	cmp	r7, #70	; 0x46
 8007906:	eb08 0905 	add.w	r9, r8, r5
 800790a:	d111      	bne.n	8007930 <__cvt+0x84>
 800790c:	f898 3000 	ldrb.w	r3, [r8]
 8007910:	2b30      	cmp	r3, #48	; 0x30
 8007912:	d10a      	bne.n	800792a <__cvt+0x7e>
 8007914:	2200      	movs	r2, #0
 8007916:	2300      	movs	r3, #0
 8007918:	4620      	mov	r0, r4
 800791a:	4631      	mov	r1, r6
 800791c:	f7f9 f844 	bl	80009a8 <__aeabi_dcmpeq>
 8007920:	b918      	cbnz	r0, 800792a <__cvt+0x7e>
 8007922:	f1c5 0501 	rsb	r5, r5, #1
 8007926:	f8ca 5000 	str.w	r5, [sl]
 800792a:	f8da 3000 	ldr.w	r3, [sl]
 800792e:	4499      	add	r9, r3
 8007930:	2200      	movs	r2, #0
 8007932:	2300      	movs	r3, #0
 8007934:	4620      	mov	r0, r4
 8007936:	4631      	mov	r1, r6
 8007938:	f7f9 f836 	bl	80009a8 <__aeabi_dcmpeq>
 800793c:	b938      	cbnz	r0, 800794e <__cvt+0xa2>
 800793e:	2230      	movs	r2, #48	; 0x30
 8007940:	9b07      	ldr	r3, [sp, #28]
 8007942:	454b      	cmp	r3, r9
 8007944:	d205      	bcs.n	8007952 <__cvt+0xa6>
 8007946:	1c59      	adds	r1, r3, #1
 8007948:	9107      	str	r1, [sp, #28]
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	e7f8      	b.n	8007940 <__cvt+0x94>
 800794e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007952:	4640      	mov	r0, r8
 8007954:	9b07      	ldr	r3, [sp, #28]
 8007956:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007958:	eba3 0308 	sub.w	r3, r3, r8
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	b008      	add	sp, #32
 8007960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007964 <__exponent>:
 8007964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007966:	2900      	cmp	r1, #0
 8007968:	bfb4      	ite	lt
 800796a:	232d      	movlt	r3, #45	; 0x2d
 800796c:	232b      	movge	r3, #43	; 0x2b
 800796e:	4604      	mov	r4, r0
 8007970:	bfb8      	it	lt
 8007972:	4249      	neglt	r1, r1
 8007974:	2909      	cmp	r1, #9
 8007976:	f804 2b02 	strb.w	r2, [r4], #2
 800797a:	7043      	strb	r3, [r0, #1]
 800797c:	dd21      	ble.n	80079c2 <__exponent+0x5e>
 800797e:	f10d 0307 	add.w	r3, sp, #7
 8007982:	461f      	mov	r7, r3
 8007984:	260a      	movs	r6, #10
 8007986:	fb91 f5f6 	sdiv	r5, r1, r6
 800798a:	fb06 1115 	mls	r1, r6, r5, r1
 800798e:	2d09      	cmp	r5, #9
 8007990:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007994:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007998:	f103 32ff 	add.w	r2, r3, #4294967295
 800799c:	4629      	mov	r1, r5
 800799e:	dc09      	bgt.n	80079b4 <__exponent+0x50>
 80079a0:	3130      	adds	r1, #48	; 0x30
 80079a2:	3b02      	subs	r3, #2
 80079a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80079a8:	42bb      	cmp	r3, r7
 80079aa:	4622      	mov	r2, r4
 80079ac:	d304      	bcc.n	80079b8 <__exponent+0x54>
 80079ae:	1a10      	subs	r0, r2, r0
 80079b0:	b003      	add	sp, #12
 80079b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b4:	4613      	mov	r3, r2
 80079b6:	e7e6      	b.n	8007986 <__exponent+0x22>
 80079b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079bc:	f804 2b01 	strb.w	r2, [r4], #1
 80079c0:	e7f2      	b.n	80079a8 <__exponent+0x44>
 80079c2:	2330      	movs	r3, #48	; 0x30
 80079c4:	4419      	add	r1, r3
 80079c6:	7083      	strb	r3, [r0, #2]
 80079c8:	1d02      	adds	r2, r0, #4
 80079ca:	70c1      	strb	r1, [r0, #3]
 80079cc:	e7ef      	b.n	80079ae <__exponent+0x4a>
	...

080079d0 <_printf_float>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	b091      	sub	sp, #68	; 0x44
 80079d6:	460c      	mov	r4, r1
 80079d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80079da:	4693      	mov	fp, r2
 80079dc:	461e      	mov	r6, r3
 80079de:	4605      	mov	r5, r0
 80079e0:	f001 fcac 	bl	800933c <_localeconv_r>
 80079e4:	6803      	ldr	r3, [r0, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ea:	f7f8 fbb1 	bl	8000150 <strlen>
 80079ee:	2300      	movs	r3, #0
 80079f0:	930e      	str	r3, [sp, #56]	; 0x38
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	900a      	str	r0, [sp, #40]	; 0x28
 80079f6:	3307      	adds	r3, #7
 80079f8:	f023 0307 	bic.w	r3, r3, #7
 80079fc:	f103 0208 	add.w	r2, r3, #8
 8007a00:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007a04:	f8d4 a000 	ldr.w	sl, [r4]
 8007a08:	603a      	str	r2, [r7, #0]
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a12:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007a16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a20:	4ba6      	ldr	r3, [pc, #664]	; (8007cbc <_printf_float+0x2ec>)
 8007a22:	4638      	mov	r0, r7
 8007a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a26:	f7f8 fff1 	bl	8000a0c <__aeabi_dcmpun>
 8007a2a:	bb68      	cbnz	r0, 8007a88 <_printf_float+0xb8>
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a30:	4ba2      	ldr	r3, [pc, #648]	; (8007cbc <_printf_float+0x2ec>)
 8007a32:	4638      	mov	r0, r7
 8007a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a36:	f7f8 ffcb 	bl	80009d0 <__aeabi_dcmple>
 8007a3a:	bb28      	cbnz	r0, 8007a88 <_printf_float+0xb8>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2300      	movs	r3, #0
 8007a40:	4638      	mov	r0, r7
 8007a42:	4649      	mov	r1, r9
 8007a44:	f7f8 ffba 	bl	80009bc <__aeabi_dcmplt>
 8007a48:	b110      	cbz	r0, 8007a50 <_printf_float+0x80>
 8007a4a:	232d      	movs	r3, #45	; 0x2d
 8007a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a50:	4f9b      	ldr	r7, [pc, #620]	; (8007cc0 <_printf_float+0x2f0>)
 8007a52:	4b9c      	ldr	r3, [pc, #624]	; (8007cc4 <_printf_float+0x2f4>)
 8007a54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a58:	bf98      	it	ls
 8007a5a:	461f      	movls	r7, r3
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	f04f 0900 	mov.w	r9, #0
 8007a62:	6123      	str	r3, [r4, #16]
 8007a64:	f02a 0304 	bic.w	r3, sl, #4
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	9600      	str	r6, [sp, #0]
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007a70:	4621      	mov	r1, r4
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 f9e2 	bl	8007e3c <_printf_common>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f040 8090 	bne.w	8007b9e <_printf_float+0x1ce>
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	b011      	add	sp, #68	; 0x44
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	463a      	mov	r2, r7
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	4649      	mov	r1, r9
 8007a90:	f7f8 ffbc 	bl	8000a0c <__aeabi_dcmpun>
 8007a94:	b110      	cbz	r0, 8007a9c <_printf_float+0xcc>
 8007a96:	4f8c      	ldr	r7, [pc, #560]	; (8007cc8 <_printf_float+0x2f8>)
 8007a98:	4b8c      	ldr	r3, [pc, #560]	; (8007ccc <_printf_float+0x2fc>)
 8007a9a:	e7db      	b.n	8007a54 <_printf_float+0x84>
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007aa2:	1c59      	adds	r1, r3, #1
 8007aa4:	a80d      	add	r0, sp, #52	; 0x34
 8007aa6:	a90e      	add	r1, sp, #56	; 0x38
 8007aa8:	d140      	bne.n	8007b2c <_printf_float+0x15c>
 8007aaa:	2306      	movs	r3, #6
 8007aac:	6063      	str	r3, [r4, #4]
 8007aae:	f04f 0c00 	mov.w	ip, #0
 8007ab2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007ab6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007aba:	6863      	ldr	r3, [r4, #4]
 8007abc:	6022      	str	r2, [r4, #0]
 8007abe:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	463a      	mov	r2, r7
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007acc:	4628      	mov	r0, r5
 8007ace:	f7ff feed 	bl	80078ac <__cvt>
 8007ad2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007ad6:	2b47      	cmp	r3, #71	; 0x47
 8007ad8:	4607      	mov	r7, r0
 8007ada:	d109      	bne.n	8007af0 <_printf_float+0x120>
 8007adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ade:	1cd8      	adds	r0, r3, #3
 8007ae0:	db02      	blt.n	8007ae8 <_printf_float+0x118>
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	dd47      	ble.n	8007b78 <_printf_float+0x1a8>
 8007ae8:	f1a8 0802 	sub.w	r8, r8, #2
 8007aec:	fa5f f888 	uxtb.w	r8, r8
 8007af0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007af4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007af6:	d824      	bhi.n	8007b42 <_printf_float+0x172>
 8007af8:	3901      	subs	r1, #1
 8007afa:	4642      	mov	r2, r8
 8007afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b00:	910d      	str	r1, [sp, #52]	; 0x34
 8007b02:	f7ff ff2f 	bl	8007964 <__exponent>
 8007b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b08:	4681      	mov	r9, r0
 8007b0a:	1813      	adds	r3, r2, r0
 8007b0c:	2a01      	cmp	r2, #1
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	dc02      	bgt.n	8007b18 <_printf_float+0x148>
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	07d1      	lsls	r1, r2, #31
 8007b16:	d501      	bpl.n	8007b1c <_printf_float+0x14c>
 8007b18:	3301      	adds	r3, #1
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0a2      	beq.n	8007a6a <_printf_float+0x9a>
 8007b24:	232d      	movs	r3, #45	; 0x2d
 8007b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b2a:	e79e      	b.n	8007a6a <_printf_float+0x9a>
 8007b2c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007b30:	f000 816e 	beq.w	8007e10 <_printf_float+0x440>
 8007b34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b38:	d1b9      	bne.n	8007aae <_printf_float+0xde>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1b7      	bne.n	8007aae <_printf_float+0xde>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e7b4      	b.n	8007aac <_printf_float+0xdc>
 8007b42:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8007b46:	d119      	bne.n	8007b7c <_printf_float+0x1ac>
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	6863      	ldr	r3, [r4, #4]
 8007b4c:	dd0c      	ble.n	8007b68 <_printf_float+0x198>
 8007b4e:	6121      	str	r1, [r4, #16]
 8007b50:	b913      	cbnz	r3, 8007b58 <_printf_float+0x188>
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	07d2      	lsls	r2, r2, #31
 8007b56:	d502      	bpl.n	8007b5e <_printf_float+0x18e>
 8007b58:	3301      	adds	r3, #1
 8007b5a:	440b      	add	r3, r1
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b60:	f04f 0900 	mov.w	r9, #0
 8007b64:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b66:	e7d9      	b.n	8007b1c <_printf_float+0x14c>
 8007b68:	b913      	cbnz	r3, 8007b70 <_printf_float+0x1a0>
 8007b6a:	6822      	ldr	r2, [r4, #0]
 8007b6c:	07d0      	lsls	r0, r2, #31
 8007b6e:	d501      	bpl.n	8007b74 <_printf_float+0x1a4>
 8007b70:	3302      	adds	r3, #2
 8007b72:	e7f3      	b.n	8007b5c <_printf_float+0x18c>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e7f1      	b.n	8007b5c <_printf_float+0x18c>
 8007b78:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007b7c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007b80:	4293      	cmp	r3, r2
 8007b82:	db05      	blt.n	8007b90 <_printf_float+0x1c0>
 8007b84:	6822      	ldr	r2, [r4, #0]
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	07d1      	lsls	r1, r2, #31
 8007b8a:	d5e8      	bpl.n	8007b5e <_printf_float+0x18e>
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	e7e5      	b.n	8007b5c <_printf_float+0x18c>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bfcc      	ite	gt
 8007b94:	2301      	movgt	r3, #1
 8007b96:	f1c3 0302 	rsble	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	e7de      	b.n	8007b5c <_printf_float+0x18c>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	055a      	lsls	r2, r3, #21
 8007ba2:	d407      	bmi.n	8007bb4 <_printf_float+0x1e4>
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	463a      	mov	r2, r7
 8007ba8:	4659      	mov	r1, fp
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b0      	blx	r6
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d129      	bne.n	8007c06 <_printf_float+0x236>
 8007bb2:	e764      	b.n	8007a7e <_printf_float+0xae>
 8007bb4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007bb8:	f240 80d7 	bls.w	8007d6a <_printf_float+0x39a>
 8007bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f7f8 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8007bc8:	b388      	cbz	r0, 8007c2e <_printf_float+0x25e>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4a40      	ldr	r2, [pc, #256]	; (8007cd0 <_printf_float+0x300>)
 8007bce:	4659      	mov	r1, fp
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b0      	blx	r6
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	f43f af52 	beq.w	8007a7e <_printf_float+0xae>
 8007bda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007bde:	429a      	cmp	r2, r3
 8007be0:	db02      	blt.n	8007be8 <_printf_float+0x218>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	07d8      	lsls	r0, r3, #31
 8007be6:	d50e      	bpl.n	8007c06 <_printf_float+0x236>
 8007be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bec:	4659      	mov	r1, fp
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b0      	blx	r6
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f af43 	beq.w	8007a7e <_printf_float+0xae>
 8007bf8:	2700      	movs	r7, #0
 8007bfa:	f104 081a 	add.w	r8, r4, #26
 8007bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c00:	3b01      	subs	r3, #1
 8007c02:	42bb      	cmp	r3, r7
 8007c04:	dc09      	bgt.n	8007c1a <_printf_float+0x24a>
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	079f      	lsls	r7, r3, #30
 8007c0a:	f100 80fd 	bmi.w	8007e08 <_printf_float+0x438>
 8007c0e:	68e0      	ldr	r0, [r4, #12]
 8007c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c12:	4298      	cmp	r0, r3
 8007c14:	bfb8      	it	lt
 8007c16:	4618      	movlt	r0, r3
 8007c18:	e733      	b.n	8007a82 <_printf_float+0xb2>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4642      	mov	r2, r8
 8007c1e:	4659      	mov	r1, fp
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b0      	blx	r6
 8007c24:	3001      	adds	r0, #1
 8007c26:	f43f af2a 	beq.w	8007a7e <_printf_float+0xae>
 8007c2a:	3701      	adds	r7, #1
 8007c2c:	e7e7      	b.n	8007bfe <_printf_float+0x22e>
 8007c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dc2b      	bgt.n	8007c8c <_printf_float+0x2bc>
 8007c34:	2301      	movs	r3, #1
 8007c36:	4a26      	ldr	r2, [pc, #152]	; (8007cd0 <_printf_float+0x300>)
 8007c38:	4659      	mov	r1, fp
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b0      	blx	r6
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f43f af1d 	beq.w	8007a7e <_printf_float+0xae>
 8007c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c46:	b923      	cbnz	r3, 8007c52 <_printf_float+0x282>
 8007c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c4a:	b913      	cbnz	r3, 8007c52 <_printf_float+0x282>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	07d9      	lsls	r1, r3, #31
 8007c50:	d5d9      	bpl.n	8007c06 <_printf_float+0x236>
 8007c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c56:	4659      	mov	r1, fp
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b0      	blx	r6
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f af0e 	beq.w	8007a7e <_printf_float+0xae>
 8007c62:	f04f 0800 	mov.w	r8, #0
 8007c66:	f104 091a 	add.w	r9, r4, #26
 8007c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c6c:	425b      	negs	r3, r3
 8007c6e:	4543      	cmp	r3, r8
 8007c70:	dc01      	bgt.n	8007c76 <_printf_float+0x2a6>
 8007c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c74:	e797      	b.n	8007ba6 <_printf_float+0x1d6>
 8007c76:	2301      	movs	r3, #1
 8007c78:	464a      	mov	r2, r9
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b0      	blx	r6
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f aefc 	beq.w	8007a7e <_printf_float+0xae>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	e7ee      	b.n	8007c6a <_printf_float+0x29a>
 8007c8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c90:	429a      	cmp	r2, r3
 8007c92:	bfa8      	it	ge
 8007c94:	461a      	movge	r2, r3
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	4690      	mov	r8, r2
 8007c9a:	dd07      	ble.n	8007cac <_printf_float+0x2dc>
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	4659      	mov	r1, fp
 8007ca0:	463a      	mov	r2, r7
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b0      	blx	r6
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f aee9 	beq.w	8007a7e <_printf_float+0xae>
 8007cac:	f104 031a 	add.w	r3, r4, #26
 8007cb0:	f04f 0a00 	mov.w	sl, #0
 8007cb4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cba:	e015      	b.n	8007ce8 <_printf_float+0x318>
 8007cbc:	7fefffff 	.word	0x7fefffff
 8007cc0:	0800c5c0 	.word	0x0800c5c0
 8007cc4:	0800c5bc 	.word	0x0800c5bc
 8007cc8:	0800c5c8 	.word	0x0800c5c8
 8007ccc:	0800c5c4 	.word	0x0800c5c4
 8007cd0:	0800c5cc 	.word	0x0800c5cc
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cd8:	4659      	mov	r1, fp
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b0      	blx	r6
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f aecd 	beq.w	8007a7e <_printf_float+0xae>
 8007ce4:	f10a 0a01 	add.w	sl, sl, #1
 8007ce8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007cec:	eba9 0308 	sub.w	r3, r9, r8
 8007cf0:	4553      	cmp	r3, sl
 8007cf2:	dcef      	bgt.n	8007cd4 <_printf_float+0x304>
 8007cf4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	444f      	add	r7, r9
 8007cfc:	db14      	blt.n	8007d28 <_printf_float+0x358>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	07da      	lsls	r2, r3, #31
 8007d02:	d411      	bmi.n	8007d28 <_printf_float+0x358>
 8007d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d08:	eba3 0209 	sub.w	r2, r3, r9
 8007d0c:	eba3 0901 	sub.w	r9, r3, r1
 8007d10:	4591      	cmp	r9, r2
 8007d12:	bfa8      	it	ge
 8007d14:	4691      	movge	r9, r2
 8007d16:	f1b9 0f00 	cmp.w	r9, #0
 8007d1a:	dc0d      	bgt.n	8007d38 <_printf_float+0x368>
 8007d1c:	2700      	movs	r7, #0
 8007d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d22:	f104 081a 	add.w	r8, r4, #26
 8007d26:	e018      	b.n	8007d5a <_printf_float+0x38a>
 8007d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b0      	blx	r6
 8007d32:	3001      	adds	r0, #1
 8007d34:	d1e6      	bne.n	8007d04 <_printf_float+0x334>
 8007d36:	e6a2      	b.n	8007a7e <_printf_float+0xae>
 8007d38:	464b      	mov	r3, r9
 8007d3a:	463a      	mov	r2, r7
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b0      	blx	r6
 8007d42:	3001      	adds	r0, #1
 8007d44:	d1ea      	bne.n	8007d1c <_printf_float+0x34c>
 8007d46:	e69a      	b.n	8007a7e <_printf_float+0xae>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4642      	mov	r2, r8
 8007d4c:	4659      	mov	r1, fp
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b0      	blx	r6
 8007d52:	3001      	adds	r0, #1
 8007d54:	f43f ae93 	beq.w	8007a7e <_printf_float+0xae>
 8007d58:	3701      	adds	r7, #1
 8007d5a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	eba3 0309 	sub.w	r3, r3, r9
 8007d64:	42bb      	cmp	r3, r7
 8007d66:	dcef      	bgt.n	8007d48 <_printf_float+0x378>
 8007d68:	e74d      	b.n	8007c06 <_printf_float+0x236>
 8007d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d6c:	2a01      	cmp	r2, #1
 8007d6e:	dc01      	bgt.n	8007d74 <_printf_float+0x3a4>
 8007d70:	07db      	lsls	r3, r3, #31
 8007d72:	d538      	bpl.n	8007de6 <_printf_float+0x416>
 8007d74:	2301      	movs	r3, #1
 8007d76:	463a      	mov	r2, r7
 8007d78:	4659      	mov	r1, fp
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b0      	blx	r6
 8007d7e:	3001      	adds	r0, #1
 8007d80:	f43f ae7d 	beq.w	8007a7e <_printf_float+0xae>
 8007d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d88:	4659      	mov	r1, fp
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b0      	blx	r6
 8007d8e:	3001      	adds	r0, #1
 8007d90:	f107 0701 	add.w	r7, r7, #1
 8007d94:	f43f ae73 	beq.w	8007a7e <_printf_float+0xae>
 8007d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f103 38ff 	add.w	r8, r3, #4294967295
 8007da4:	2300      	movs	r3, #0
 8007da6:	f7f8 fdff 	bl	80009a8 <__aeabi_dcmpeq>
 8007daa:	b9c0      	cbnz	r0, 8007dde <_printf_float+0x40e>
 8007dac:	4643      	mov	r3, r8
 8007dae:	463a      	mov	r2, r7
 8007db0:	4659      	mov	r1, fp
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b0      	blx	r6
 8007db6:	3001      	adds	r0, #1
 8007db8:	d10d      	bne.n	8007dd6 <_printf_float+0x406>
 8007dba:	e660      	b.n	8007a7e <_printf_float+0xae>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	4642      	mov	r2, r8
 8007dc0:	4659      	mov	r1, fp
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	47b0      	blx	r6
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f43f ae59 	beq.w	8007a7e <_printf_float+0xae>
 8007dcc:	3701      	adds	r7, #1
 8007dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	42bb      	cmp	r3, r7
 8007dd4:	dcf2      	bgt.n	8007dbc <_printf_float+0x3ec>
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ddc:	e6e4      	b.n	8007ba8 <_printf_float+0x1d8>
 8007dde:	2700      	movs	r7, #0
 8007de0:	f104 081a 	add.w	r8, r4, #26
 8007de4:	e7f3      	b.n	8007dce <_printf_float+0x3fe>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e7e1      	b.n	8007dae <_printf_float+0x3de>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4642      	mov	r2, r8
 8007dee:	4659      	mov	r1, fp
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	3001      	adds	r0, #1
 8007df6:	f43f ae42 	beq.w	8007a7e <_printf_float+0xae>
 8007dfa:	3701      	adds	r7, #1
 8007dfc:	68e3      	ldr	r3, [r4, #12]
 8007dfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	42bb      	cmp	r3, r7
 8007e04:	dcf1      	bgt.n	8007dea <_printf_float+0x41a>
 8007e06:	e702      	b.n	8007c0e <_printf_float+0x23e>
 8007e08:	2700      	movs	r7, #0
 8007e0a:	f104 0819 	add.w	r8, r4, #25
 8007e0e:	e7f5      	b.n	8007dfc <_printf_float+0x42c>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f43f ae94 	beq.w	8007b3e <_printf_float+0x16e>
 8007e16:	f04f 0c00 	mov.w	ip, #0
 8007e1a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007e1e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007e22:	6022      	str	r2, [r4, #0]
 8007e24:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007e28:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	463a      	mov	r2, r7
 8007e30:	464b      	mov	r3, r9
 8007e32:	4628      	mov	r0, r5
 8007e34:	f7ff fd3a 	bl	80078ac <__cvt>
 8007e38:	4607      	mov	r7, r0
 8007e3a:	e64f      	b.n	8007adc <_printf_float+0x10c>

08007e3c <_printf_common>:
 8007e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e40:	4691      	mov	r9, r2
 8007e42:	461f      	mov	r7, r3
 8007e44:	688a      	ldr	r2, [r1, #8]
 8007e46:	690b      	ldr	r3, [r1, #16]
 8007e48:	4606      	mov	r6, r0
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	bfb8      	it	lt
 8007e4e:	4613      	movlt	r3, r2
 8007e50:	f8c9 3000 	str.w	r3, [r9]
 8007e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e58:	460c      	mov	r4, r1
 8007e5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e5e:	b112      	cbz	r2, 8007e66 <_printf_common+0x2a>
 8007e60:	3301      	adds	r3, #1
 8007e62:	f8c9 3000 	str.w	r3, [r9]
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	0699      	lsls	r1, r3, #26
 8007e6a:	bf42      	ittt	mi
 8007e6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e70:	3302      	addmi	r3, #2
 8007e72:	f8c9 3000 	strmi.w	r3, [r9]
 8007e76:	6825      	ldr	r5, [r4, #0]
 8007e78:	f015 0506 	ands.w	r5, r5, #6
 8007e7c:	d107      	bne.n	8007e8e <_printf_common+0x52>
 8007e7e:	f104 0a19 	add.w	sl, r4, #25
 8007e82:	68e3      	ldr	r3, [r4, #12]
 8007e84:	f8d9 2000 	ldr.w	r2, [r9]
 8007e88:	1a9b      	subs	r3, r3, r2
 8007e8a:	42ab      	cmp	r3, r5
 8007e8c:	dc29      	bgt.n	8007ee2 <_printf_common+0xa6>
 8007e8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	3300      	adds	r3, #0
 8007e96:	bf18      	it	ne
 8007e98:	2301      	movne	r3, #1
 8007e9a:	0692      	lsls	r2, r2, #26
 8007e9c:	d42e      	bmi.n	8007efc <_printf_common+0xc0>
 8007e9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	47c0      	blx	r8
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d021      	beq.n	8007ef0 <_printf_common+0xb4>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	68e5      	ldr	r5, [r4, #12]
 8007eb0:	f003 0306 	and.w	r3, r3, #6
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	bf18      	it	ne
 8007eb8:	2500      	movne	r5, #0
 8007eba:	f8d9 2000 	ldr.w	r2, [r9]
 8007ebe:	f04f 0900 	mov.w	r9, #0
 8007ec2:	bf08      	it	eq
 8007ec4:	1aad      	subeq	r5, r5, r2
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	6922      	ldr	r2, [r4, #16]
 8007eca:	bf08      	it	eq
 8007ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	bfc4      	itt	gt
 8007ed4:	1a9b      	subgt	r3, r3, r2
 8007ed6:	18ed      	addgt	r5, r5, r3
 8007ed8:	341a      	adds	r4, #26
 8007eda:	454d      	cmp	r5, r9
 8007edc:	d11a      	bne.n	8007f14 <_printf_common+0xd8>
 8007ede:	2000      	movs	r0, #0
 8007ee0:	e008      	b.n	8007ef4 <_printf_common+0xb8>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4652      	mov	r2, sl
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	4630      	mov	r0, r6
 8007eea:	47c0      	blx	r8
 8007eec:	3001      	adds	r0, #1
 8007eee:	d103      	bne.n	8007ef8 <_printf_common+0xbc>
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef8:	3501      	adds	r5, #1
 8007efa:	e7c2      	b.n	8007e82 <_printf_common+0x46>
 8007efc:	2030      	movs	r0, #48	; 0x30
 8007efe:	18e1      	adds	r1, r4, r3
 8007f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f0a:	4422      	add	r2, r4
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f12:	e7c4      	b.n	8007e9e <_printf_common+0x62>
 8007f14:	2301      	movs	r3, #1
 8007f16:	4622      	mov	r2, r4
 8007f18:	4639      	mov	r1, r7
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	47c0      	blx	r8
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d0e6      	beq.n	8007ef0 <_printf_common+0xb4>
 8007f22:	f109 0901 	add.w	r9, r9, #1
 8007f26:	e7d8      	b.n	8007eda <_printf_common+0x9e>

08007f28 <_printf_i>:
 8007f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f30:	460c      	mov	r4, r1
 8007f32:	7e09      	ldrb	r1, [r1, #24]
 8007f34:	b085      	sub	sp, #20
 8007f36:	296e      	cmp	r1, #110	; 0x6e
 8007f38:	4617      	mov	r7, r2
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	4698      	mov	r8, r3
 8007f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f40:	f000 80b3 	beq.w	80080aa <_printf_i+0x182>
 8007f44:	d822      	bhi.n	8007f8c <_printf_i+0x64>
 8007f46:	2963      	cmp	r1, #99	; 0x63
 8007f48:	d036      	beq.n	8007fb8 <_printf_i+0x90>
 8007f4a:	d80a      	bhi.n	8007f62 <_printf_i+0x3a>
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	f000 80b9 	beq.w	80080c4 <_printf_i+0x19c>
 8007f52:	2958      	cmp	r1, #88	; 0x58
 8007f54:	f000 8083 	beq.w	800805e <_printf_i+0x136>
 8007f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f60:	e032      	b.n	8007fc8 <_printf_i+0xa0>
 8007f62:	2964      	cmp	r1, #100	; 0x64
 8007f64:	d001      	beq.n	8007f6a <_printf_i+0x42>
 8007f66:	2969      	cmp	r1, #105	; 0x69
 8007f68:	d1f6      	bne.n	8007f58 <_printf_i+0x30>
 8007f6a:	6820      	ldr	r0, [r4, #0]
 8007f6c:	6813      	ldr	r3, [r2, #0]
 8007f6e:	0605      	lsls	r5, r0, #24
 8007f70:	f103 0104 	add.w	r1, r3, #4
 8007f74:	d52a      	bpl.n	8007fcc <_printf_i+0xa4>
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6011      	str	r1, [r2, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	da03      	bge.n	8007f86 <_printf_i+0x5e>
 8007f7e:	222d      	movs	r2, #45	; 0x2d
 8007f80:	425b      	negs	r3, r3
 8007f82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f86:	486f      	ldr	r0, [pc, #444]	; (8008144 <_printf_i+0x21c>)
 8007f88:	220a      	movs	r2, #10
 8007f8a:	e039      	b.n	8008000 <_printf_i+0xd8>
 8007f8c:	2973      	cmp	r1, #115	; 0x73
 8007f8e:	f000 809d 	beq.w	80080cc <_printf_i+0x1a4>
 8007f92:	d808      	bhi.n	8007fa6 <_printf_i+0x7e>
 8007f94:	296f      	cmp	r1, #111	; 0x6f
 8007f96:	d020      	beq.n	8007fda <_printf_i+0xb2>
 8007f98:	2970      	cmp	r1, #112	; 0x70
 8007f9a:	d1dd      	bne.n	8007f58 <_printf_i+0x30>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	f043 0320 	orr.w	r3, r3, #32
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	e003      	b.n	8007fae <_printf_i+0x86>
 8007fa6:	2975      	cmp	r1, #117	; 0x75
 8007fa8:	d017      	beq.n	8007fda <_printf_i+0xb2>
 8007faa:	2978      	cmp	r1, #120	; 0x78
 8007fac:	d1d4      	bne.n	8007f58 <_printf_i+0x30>
 8007fae:	2378      	movs	r3, #120	; 0x78
 8007fb0:	4865      	ldr	r0, [pc, #404]	; (8008148 <_printf_i+0x220>)
 8007fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fb6:	e055      	b.n	8008064 <_printf_i+0x13c>
 8007fb8:	6813      	ldr	r3, [r2, #0]
 8007fba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fbe:	1d19      	adds	r1, r3, #4
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6011      	str	r1, [r2, #0]
 8007fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e08c      	b.n	80080e6 <_printf_i+0x1be>
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fd2:	6011      	str	r1, [r2, #0]
 8007fd4:	bf18      	it	ne
 8007fd6:	b21b      	sxthne	r3, r3
 8007fd8:	e7cf      	b.n	8007f7a <_printf_i+0x52>
 8007fda:	6813      	ldr	r3, [r2, #0]
 8007fdc:	6825      	ldr	r5, [r4, #0]
 8007fde:	1d18      	adds	r0, r3, #4
 8007fe0:	6010      	str	r0, [r2, #0]
 8007fe2:	0628      	lsls	r0, r5, #24
 8007fe4:	d501      	bpl.n	8007fea <_printf_i+0xc2>
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	e002      	b.n	8007ff0 <_printf_i+0xc8>
 8007fea:	0668      	lsls	r0, r5, #25
 8007fec:	d5fb      	bpl.n	8007fe6 <_printf_i+0xbe>
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	296f      	cmp	r1, #111	; 0x6f
 8007ff2:	bf14      	ite	ne
 8007ff4:	220a      	movne	r2, #10
 8007ff6:	2208      	moveq	r2, #8
 8007ff8:	4852      	ldr	r0, [pc, #328]	; (8008144 <_printf_i+0x21c>)
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008000:	6865      	ldr	r5, [r4, #4]
 8008002:	2d00      	cmp	r5, #0
 8008004:	60a5      	str	r5, [r4, #8]
 8008006:	f2c0 8095 	blt.w	8008134 <_printf_i+0x20c>
 800800a:	6821      	ldr	r1, [r4, #0]
 800800c:	f021 0104 	bic.w	r1, r1, #4
 8008010:	6021      	str	r1, [r4, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d13d      	bne.n	8008092 <_printf_i+0x16a>
 8008016:	2d00      	cmp	r5, #0
 8008018:	f040 808e 	bne.w	8008138 <_printf_i+0x210>
 800801c:	4665      	mov	r5, ip
 800801e:	2a08      	cmp	r2, #8
 8008020:	d10b      	bne.n	800803a <_printf_i+0x112>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	07db      	lsls	r3, r3, #31
 8008026:	d508      	bpl.n	800803a <_printf_i+0x112>
 8008028:	6923      	ldr	r3, [r4, #16]
 800802a:	6862      	ldr	r2, [r4, #4]
 800802c:	429a      	cmp	r2, r3
 800802e:	bfde      	ittt	le
 8008030:	2330      	movle	r3, #48	; 0x30
 8008032:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008036:	f105 35ff 	addle.w	r5, r5, #4294967295
 800803a:	ebac 0305 	sub.w	r3, ip, r5
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	f8cd 8000 	str.w	r8, [sp]
 8008044:	463b      	mov	r3, r7
 8008046:	aa03      	add	r2, sp, #12
 8008048:	4621      	mov	r1, r4
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff fef6 	bl	8007e3c <_printf_common>
 8008050:	3001      	adds	r0, #1
 8008052:	d14d      	bne.n	80080f0 <_printf_i+0x1c8>
 8008054:	f04f 30ff 	mov.w	r0, #4294967295
 8008058:	b005      	add	sp, #20
 800805a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800805e:	4839      	ldr	r0, [pc, #228]	; (8008144 <_printf_i+0x21c>)
 8008060:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008064:	6813      	ldr	r3, [r2, #0]
 8008066:	6821      	ldr	r1, [r4, #0]
 8008068:	1d1d      	adds	r5, r3, #4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6015      	str	r5, [r2, #0]
 800806e:	060a      	lsls	r2, r1, #24
 8008070:	d50b      	bpl.n	800808a <_printf_i+0x162>
 8008072:	07ca      	lsls	r2, r1, #31
 8008074:	bf44      	itt	mi
 8008076:	f041 0120 	orrmi.w	r1, r1, #32
 800807a:	6021      	strmi	r1, [r4, #0]
 800807c:	b91b      	cbnz	r3, 8008086 <_printf_i+0x15e>
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	f022 0220 	bic.w	r2, r2, #32
 8008084:	6022      	str	r2, [r4, #0]
 8008086:	2210      	movs	r2, #16
 8008088:	e7b7      	b.n	8007ffa <_printf_i+0xd2>
 800808a:	064d      	lsls	r5, r1, #25
 800808c:	bf48      	it	mi
 800808e:	b29b      	uxthmi	r3, r3
 8008090:	e7ef      	b.n	8008072 <_printf_i+0x14a>
 8008092:	4665      	mov	r5, ip
 8008094:	fbb3 f1f2 	udiv	r1, r3, r2
 8008098:	fb02 3311 	mls	r3, r2, r1, r3
 800809c:	5cc3      	ldrb	r3, [r0, r3]
 800809e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80080a2:	460b      	mov	r3, r1
 80080a4:	2900      	cmp	r1, #0
 80080a6:	d1f5      	bne.n	8008094 <_printf_i+0x16c>
 80080a8:	e7b9      	b.n	800801e <_printf_i+0xf6>
 80080aa:	6813      	ldr	r3, [r2, #0]
 80080ac:	6825      	ldr	r5, [r4, #0]
 80080ae:	1d18      	adds	r0, r3, #4
 80080b0:	6961      	ldr	r1, [r4, #20]
 80080b2:	6010      	str	r0, [r2, #0]
 80080b4:	0628      	lsls	r0, r5, #24
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	d501      	bpl.n	80080be <_printf_i+0x196>
 80080ba:	6019      	str	r1, [r3, #0]
 80080bc:	e002      	b.n	80080c4 <_printf_i+0x19c>
 80080be:	066a      	lsls	r2, r5, #25
 80080c0:	d5fb      	bpl.n	80080ba <_printf_i+0x192>
 80080c2:	8019      	strh	r1, [r3, #0]
 80080c4:	2300      	movs	r3, #0
 80080c6:	4665      	mov	r5, ip
 80080c8:	6123      	str	r3, [r4, #16]
 80080ca:	e7b9      	b.n	8008040 <_printf_i+0x118>
 80080cc:	6813      	ldr	r3, [r2, #0]
 80080ce:	1d19      	adds	r1, r3, #4
 80080d0:	6011      	str	r1, [r2, #0]
 80080d2:	681d      	ldr	r5, [r3, #0]
 80080d4:	6862      	ldr	r2, [r4, #4]
 80080d6:	2100      	movs	r1, #0
 80080d8:	4628      	mov	r0, r5
 80080da:	f001 f9a9 	bl	8009430 <memchr>
 80080de:	b108      	cbz	r0, 80080e4 <_printf_i+0x1bc>
 80080e0:	1b40      	subs	r0, r0, r5
 80080e2:	6060      	str	r0, [r4, #4]
 80080e4:	6863      	ldr	r3, [r4, #4]
 80080e6:	6123      	str	r3, [r4, #16]
 80080e8:	2300      	movs	r3, #0
 80080ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ee:	e7a7      	b.n	8008040 <_printf_i+0x118>
 80080f0:	6923      	ldr	r3, [r4, #16]
 80080f2:	462a      	mov	r2, r5
 80080f4:	4639      	mov	r1, r7
 80080f6:	4630      	mov	r0, r6
 80080f8:	47c0      	blx	r8
 80080fa:	3001      	adds	r0, #1
 80080fc:	d0aa      	beq.n	8008054 <_printf_i+0x12c>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	079b      	lsls	r3, r3, #30
 8008102:	d413      	bmi.n	800812c <_printf_i+0x204>
 8008104:	68e0      	ldr	r0, [r4, #12]
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	4298      	cmp	r0, r3
 800810a:	bfb8      	it	lt
 800810c:	4618      	movlt	r0, r3
 800810e:	e7a3      	b.n	8008058 <_printf_i+0x130>
 8008110:	2301      	movs	r3, #1
 8008112:	464a      	mov	r2, r9
 8008114:	4639      	mov	r1, r7
 8008116:	4630      	mov	r0, r6
 8008118:	47c0      	blx	r8
 800811a:	3001      	adds	r0, #1
 800811c:	d09a      	beq.n	8008054 <_printf_i+0x12c>
 800811e:	3501      	adds	r5, #1
 8008120:	68e3      	ldr	r3, [r4, #12]
 8008122:	9a03      	ldr	r2, [sp, #12]
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	42ab      	cmp	r3, r5
 8008128:	dcf2      	bgt.n	8008110 <_printf_i+0x1e8>
 800812a:	e7eb      	b.n	8008104 <_printf_i+0x1dc>
 800812c:	2500      	movs	r5, #0
 800812e:	f104 0919 	add.w	r9, r4, #25
 8008132:	e7f5      	b.n	8008120 <_printf_i+0x1f8>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1ac      	bne.n	8008092 <_printf_i+0x16a>
 8008138:	7803      	ldrb	r3, [r0, #0]
 800813a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800813e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008142:	e76c      	b.n	800801e <_printf_i+0xf6>
 8008144:	0800c5ce 	.word	0x0800c5ce
 8008148:	0800c5df 	.word	0x0800c5df

0800814c <iprintf>:
 800814c:	b40f      	push	{r0, r1, r2, r3}
 800814e:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <iprintf+0x2c>)
 8008150:	b513      	push	{r0, r1, r4, lr}
 8008152:	681c      	ldr	r4, [r3, #0]
 8008154:	b124      	cbz	r4, 8008160 <iprintf+0x14>
 8008156:	69a3      	ldr	r3, [r4, #24]
 8008158:	b913      	cbnz	r3, 8008160 <iprintf+0x14>
 800815a:	4620      	mov	r0, r4
 800815c:	f001 f864 	bl	8009228 <__sinit>
 8008160:	ab05      	add	r3, sp, #20
 8008162:	9a04      	ldr	r2, [sp, #16]
 8008164:	68a1      	ldr	r1, [r4, #8]
 8008166:	4620      	mov	r0, r4
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	f001 fd33 	bl	8009bd4 <_vfiprintf_r>
 800816e:	b002      	add	sp, #8
 8008170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008174:	b004      	add	sp, #16
 8008176:	4770      	bx	lr
 8008178:	20000024 	.word	0x20000024

0800817c <_puts_r>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	460e      	mov	r6, r1
 8008180:	4605      	mov	r5, r0
 8008182:	b118      	cbz	r0, 800818c <_puts_r+0x10>
 8008184:	6983      	ldr	r3, [r0, #24]
 8008186:	b90b      	cbnz	r3, 800818c <_puts_r+0x10>
 8008188:	f001 f84e 	bl	8009228 <__sinit>
 800818c:	69ab      	ldr	r3, [r5, #24]
 800818e:	68ac      	ldr	r4, [r5, #8]
 8008190:	b913      	cbnz	r3, 8008198 <_puts_r+0x1c>
 8008192:	4628      	mov	r0, r5
 8008194:	f001 f848 	bl	8009228 <__sinit>
 8008198:	4b23      	ldr	r3, [pc, #140]	; (8008228 <_puts_r+0xac>)
 800819a:	429c      	cmp	r4, r3
 800819c:	d117      	bne.n	80081ce <_puts_r+0x52>
 800819e:	686c      	ldr	r4, [r5, #4]
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	071b      	lsls	r3, r3, #28
 80081a4:	d51d      	bpl.n	80081e2 <_puts_r+0x66>
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	b1db      	cbz	r3, 80081e2 <_puts_r+0x66>
 80081aa:	3e01      	subs	r6, #1
 80081ac:	68a3      	ldr	r3, [r4, #8]
 80081ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081b2:	3b01      	subs	r3, #1
 80081b4:	60a3      	str	r3, [r4, #8]
 80081b6:	b9e9      	cbnz	r1, 80081f4 <_puts_r+0x78>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da2e      	bge.n	800821a <_puts_r+0x9e>
 80081bc:	4622      	mov	r2, r4
 80081be:	210a      	movs	r1, #10
 80081c0:	4628      	mov	r0, r5
 80081c2:	f000 f83f 	bl	8008244 <__swbuf_r>
 80081c6:	3001      	adds	r0, #1
 80081c8:	d011      	beq.n	80081ee <_puts_r+0x72>
 80081ca:	200a      	movs	r0, #10
 80081cc:	e011      	b.n	80081f2 <_puts_r+0x76>
 80081ce:	4b17      	ldr	r3, [pc, #92]	; (800822c <_puts_r+0xb0>)
 80081d0:	429c      	cmp	r4, r3
 80081d2:	d101      	bne.n	80081d8 <_puts_r+0x5c>
 80081d4:	68ac      	ldr	r4, [r5, #8]
 80081d6:	e7e3      	b.n	80081a0 <_puts_r+0x24>
 80081d8:	4b15      	ldr	r3, [pc, #84]	; (8008230 <_puts_r+0xb4>)
 80081da:	429c      	cmp	r4, r3
 80081dc:	bf08      	it	eq
 80081de:	68ec      	ldreq	r4, [r5, #12]
 80081e0:	e7de      	b.n	80081a0 <_puts_r+0x24>
 80081e2:	4621      	mov	r1, r4
 80081e4:	4628      	mov	r0, r5
 80081e6:	f000 f87f 	bl	80082e8 <__swsetup_r>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d0dd      	beq.n	80081aa <_puts_r+0x2e>
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da04      	bge.n	8008202 <_puts_r+0x86>
 80081f8:	69a2      	ldr	r2, [r4, #24]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	dc06      	bgt.n	800820c <_puts_r+0x90>
 80081fe:	290a      	cmp	r1, #10
 8008200:	d004      	beq.n	800820c <_puts_r+0x90>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	6022      	str	r2, [r4, #0]
 8008208:	7019      	strb	r1, [r3, #0]
 800820a:	e7cf      	b.n	80081ac <_puts_r+0x30>
 800820c:	4622      	mov	r2, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f818 	bl	8008244 <__swbuf_r>
 8008214:	3001      	adds	r0, #1
 8008216:	d1c9      	bne.n	80081ac <_puts_r+0x30>
 8008218:	e7e9      	b.n	80081ee <_puts_r+0x72>
 800821a:	200a      	movs	r0, #10
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	6022      	str	r2, [r4, #0]
 8008222:	7018      	strb	r0, [r3, #0]
 8008224:	e7e5      	b.n	80081f2 <_puts_r+0x76>
 8008226:	bf00      	nop
 8008228:	0800c620 	.word	0x0800c620
 800822c:	0800c640 	.word	0x0800c640
 8008230:	0800c600 	.word	0x0800c600

08008234 <puts>:
 8008234:	4b02      	ldr	r3, [pc, #8]	; (8008240 <puts+0xc>)
 8008236:	4601      	mov	r1, r0
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	f7ff bf9f 	b.w	800817c <_puts_r>
 800823e:	bf00      	nop
 8008240:	20000024 	.word	0x20000024

08008244 <__swbuf_r>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	460e      	mov	r6, r1
 8008248:	4614      	mov	r4, r2
 800824a:	4605      	mov	r5, r0
 800824c:	b118      	cbz	r0, 8008256 <__swbuf_r+0x12>
 800824e:	6983      	ldr	r3, [r0, #24]
 8008250:	b90b      	cbnz	r3, 8008256 <__swbuf_r+0x12>
 8008252:	f000 ffe9 	bl	8009228 <__sinit>
 8008256:	4b21      	ldr	r3, [pc, #132]	; (80082dc <__swbuf_r+0x98>)
 8008258:	429c      	cmp	r4, r3
 800825a:	d12a      	bne.n	80082b2 <__swbuf_r+0x6e>
 800825c:	686c      	ldr	r4, [r5, #4]
 800825e:	69a3      	ldr	r3, [r4, #24]
 8008260:	60a3      	str	r3, [r4, #8]
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	071a      	lsls	r2, r3, #28
 8008266:	d52e      	bpl.n	80082c6 <__swbuf_r+0x82>
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	b363      	cbz	r3, 80082c6 <__swbuf_r+0x82>
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	b2f6      	uxtb	r6, r6
 8008272:	1ac0      	subs	r0, r0, r3
 8008274:	6963      	ldr	r3, [r4, #20]
 8008276:	4637      	mov	r7, r6
 8008278:	4283      	cmp	r3, r0
 800827a:	dc04      	bgt.n	8008286 <__swbuf_r+0x42>
 800827c:	4621      	mov	r1, r4
 800827e:	4628      	mov	r0, r5
 8008280:	f000 ff68 	bl	8009154 <_fflush_r>
 8008284:	bb28      	cbnz	r0, 80082d2 <__swbuf_r+0x8e>
 8008286:	68a3      	ldr	r3, [r4, #8]
 8008288:	3001      	adds	r0, #1
 800828a:	3b01      	subs	r3, #1
 800828c:	60a3      	str	r3, [r4, #8]
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	6022      	str	r2, [r4, #0]
 8008294:	701e      	strb	r6, [r3, #0]
 8008296:	6963      	ldr	r3, [r4, #20]
 8008298:	4283      	cmp	r3, r0
 800829a:	d004      	beq.n	80082a6 <__swbuf_r+0x62>
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	07db      	lsls	r3, r3, #31
 80082a0:	d519      	bpl.n	80082d6 <__swbuf_r+0x92>
 80082a2:	2e0a      	cmp	r6, #10
 80082a4:	d117      	bne.n	80082d6 <__swbuf_r+0x92>
 80082a6:	4621      	mov	r1, r4
 80082a8:	4628      	mov	r0, r5
 80082aa:	f000 ff53 	bl	8009154 <_fflush_r>
 80082ae:	b190      	cbz	r0, 80082d6 <__swbuf_r+0x92>
 80082b0:	e00f      	b.n	80082d2 <__swbuf_r+0x8e>
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <__swbuf_r+0x9c>)
 80082b4:	429c      	cmp	r4, r3
 80082b6:	d101      	bne.n	80082bc <__swbuf_r+0x78>
 80082b8:	68ac      	ldr	r4, [r5, #8]
 80082ba:	e7d0      	b.n	800825e <__swbuf_r+0x1a>
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <__swbuf_r+0xa0>)
 80082be:	429c      	cmp	r4, r3
 80082c0:	bf08      	it	eq
 80082c2:	68ec      	ldreq	r4, [r5, #12]
 80082c4:	e7cb      	b.n	800825e <__swbuf_r+0x1a>
 80082c6:	4621      	mov	r1, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	f000 f80d 	bl	80082e8 <__swsetup_r>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d0cc      	beq.n	800826c <__swbuf_r+0x28>
 80082d2:	f04f 37ff 	mov.w	r7, #4294967295
 80082d6:	4638      	mov	r0, r7
 80082d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082da:	bf00      	nop
 80082dc:	0800c620 	.word	0x0800c620
 80082e0:	0800c640 	.word	0x0800c640
 80082e4:	0800c600 	.word	0x0800c600

080082e8 <__swsetup_r>:
 80082e8:	4b32      	ldr	r3, [pc, #200]	; (80083b4 <__swsetup_r+0xcc>)
 80082ea:	b570      	push	{r4, r5, r6, lr}
 80082ec:	681d      	ldr	r5, [r3, #0]
 80082ee:	4606      	mov	r6, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	b125      	cbz	r5, 80082fe <__swsetup_r+0x16>
 80082f4:	69ab      	ldr	r3, [r5, #24]
 80082f6:	b913      	cbnz	r3, 80082fe <__swsetup_r+0x16>
 80082f8:	4628      	mov	r0, r5
 80082fa:	f000 ff95 	bl	8009228 <__sinit>
 80082fe:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <__swsetup_r+0xd0>)
 8008300:	429c      	cmp	r4, r3
 8008302:	d10f      	bne.n	8008324 <__swsetup_r+0x3c>
 8008304:	686c      	ldr	r4, [r5, #4]
 8008306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830a:	b29a      	uxth	r2, r3
 800830c:	0715      	lsls	r5, r2, #28
 800830e:	d42c      	bmi.n	800836a <__swsetup_r+0x82>
 8008310:	06d0      	lsls	r0, r2, #27
 8008312:	d411      	bmi.n	8008338 <__swsetup_r+0x50>
 8008314:	2209      	movs	r2, #9
 8008316:	6032      	str	r2, [r6, #0]
 8008318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	f04f 30ff 	mov.w	r0, #4294967295
 8008322:	e03e      	b.n	80083a2 <__swsetup_r+0xba>
 8008324:	4b25      	ldr	r3, [pc, #148]	; (80083bc <__swsetup_r+0xd4>)
 8008326:	429c      	cmp	r4, r3
 8008328:	d101      	bne.n	800832e <__swsetup_r+0x46>
 800832a:	68ac      	ldr	r4, [r5, #8]
 800832c:	e7eb      	b.n	8008306 <__swsetup_r+0x1e>
 800832e:	4b24      	ldr	r3, [pc, #144]	; (80083c0 <__swsetup_r+0xd8>)
 8008330:	429c      	cmp	r4, r3
 8008332:	bf08      	it	eq
 8008334:	68ec      	ldreq	r4, [r5, #12]
 8008336:	e7e6      	b.n	8008306 <__swsetup_r+0x1e>
 8008338:	0751      	lsls	r1, r2, #29
 800833a:	d512      	bpl.n	8008362 <__swsetup_r+0x7a>
 800833c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800833e:	b141      	cbz	r1, 8008352 <__swsetup_r+0x6a>
 8008340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008344:	4299      	cmp	r1, r3
 8008346:	d002      	beq.n	800834e <__swsetup_r+0x66>
 8008348:	4630      	mov	r0, r6
 800834a:	f001 fb75 	bl	8009a38 <_free_r>
 800834e:	2300      	movs	r3, #0
 8008350:	6363      	str	r3, [r4, #52]	; 0x34
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	2300      	movs	r3, #0
 800835c:	6063      	str	r3, [r4, #4]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0308 	orr.w	r3, r3, #8
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	b94b      	cbnz	r3, 8008382 <__swsetup_r+0x9a>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008378:	d003      	beq.n	8008382 <__swsetup_r+0x9a>
 800837a:	4621      	mov	r1, r4
 800837c:	4630      	mov	r0, r6
 800837e:	f001 f80f 	bl	80093a0 <__smakebuf_r>
 8008382:	89a2      	ldrh	r2, [r4, #12]
 8008384:	f012 0301 	ands.w	r3, r2, #1
 8008388:	d00c      	beq.n	80083a4 <__swsetup_r+0xbc>
 800838a:	2300      	movs	r3, #0
 800838c:	60a3      	str	r3, [r4, #8]
 800838e:	6963      	ldr	r3, [r4, #20]
 8008390:	425b      	negs	r3, r3
 8008392:	61a3      	str	r3, [r4, #24]
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	b953      	cbnz	r3, 80083ae <__swsetup_r+0xc6>
 8008398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800839c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80083a0:	d1ba      	bne.n	8008318 <__swsetup_r+0x30>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	0792      	lsls	r2, r2, #30
 80083a6:	bf58      	it	pl
 80083a8:	6963      	ldrpl	r3, [r4, #20]
 80083aa:	60a3      	str	r3, [r4, #8]
 80083ac:	e7f2      	b.n	8008394 <__swsetup_r+0xac>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e7f7      	b.n	80083a2 <__swsetup_r+0xba>
 80083b2:	bf00      	nop
 80083b4:	20000024 	.word	0x20000024
 80083b8:	0800c620 	.word	0x0800c620
 80083bc:	0800c640 	.word	0x0800c640
 80083c0:	0800c600 	.word	0x0800c600

080083c4 <quorem>:
 80083c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	6903      	ldr	r3, [r0, #16]
 80083ca:	690c      	ldr	r4, [r1, #16]
 80083cc:	4680      	mov	r8, r0
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	f2c0 8084 	blt.w	80084dc <quorem+0x118>
 80083d4:	3c01      	subs	r4, #1
 80083d6:	f101 0714 	add.w	r7, r1, #20
 80083da:	f100 0614 	add.w	r6, r0, #20
 80083de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80083e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80083e6:	3501      	adds	r5, #1
 80083e8:	fbb0 f5f5 	udiv	r5, r0, r5
 80083ec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80083f0:	eb06 030c 	add.w	r3, r6, ip
 80083f4:	eb07 090c 	add.w	r9, r7, ip
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	b39d      	cbz	r5, 8008464 <quorem+0xa0>
 80083fc:	f04f 0a00 	mov.w	sl, #0
 8008400:	4638      	mov	r0, r7
 8008402:	46b6      	mov	lr, r6
 8008404:	46d3      	mov	fp, sl
 8008406:	f850 2b04 	ldr.w	r2, [r0], #4
 800840a:	b293      	uxth	r3, r2
 800840c:	fb05 a303 	mla	r3, r5, r3, sl
 8008410:	0c12      	lsrs	r2, r2, #16
 8008412:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008416:	fb05 a202 	mla	r2, r5, r2, sl
 800841a:	b29b      	uxth	r3, r3
 800841c:	ebab 0303 	sub.w	r3, fp, r3
 8008420:	f8de b000 	ldr.w	fp, [lr]
 8008424:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008428:	fa1f fb8b 	uxth.w	fp, fp
 800842c:	445b      	add	r3, fp
 800842e:	fa1f fb82 	uxth.w	fp, r2
 8008432:	f8de 2000 	ldr.w	r2, [lr]
 8008436:	4581      	cmp	r9, r0
 8008438:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800843c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008440:	b29b      	uxth	r3, r3
 8008442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008446:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800844a:	f84e 3b04 	str.w	r3, [lr], #4
 800844e:	d2da      	bcs.n	8008406 <quorem+0x42>
 8008450:	f856 300c 	ldr.w	r3, [r6, ip]
 8008454:	b933      	cbnz	r3, 8008464 <quorem+0xa0>
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	3b04      	subs	r3, #4
 800845a:	429e      	cmp	r6, r3
 800845c:	461a      	mov	r2, r3
 800845e:	d331      	bcc.n	80084c4 <quorem+0x100>
 8008460:	f8c8 4010 	str.w	r4, [r8, #16]
 8008464:	4640      	mov	r0, r8
 8008466:	f001 fa11 	bl	800988c <__mcmp>
 800846a:	2800      	cmp	r0, #0
 800846c:	db26      	blt.n	80084bc <quorem+0xf8>
 800846e:	4630      	mov	r0, r6
 8008470:	f04f 0c00 	mov.w	ip, #0
 8008474:	3501      	adds	r5, #1
 8008476:	f857 1b04 	ldr.w	r1, [r7], #4
 800847a:	f8d0 e000 	ldr.w	lr, [r0]
 800847e:	b28b      	uxth	r3, r1
 8008480:	ebac 0303 	sub.w	r3, ip, r3
 8008484:	fa1f f28e 	uxth.w	r2, lr
 8008488:	4413      	add	r3, r2
 800848a:	0c0a      	lsrs	r2, r1, #16
 800848c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008494:	b29b      	uxth	r3, r3
 8008496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800849a:	45b9      	cmp	r9, r7
 800849c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084a0:	f840 3b04 	str.w	r3, [r0], #4
 80084a4:	d2e7      	bcs.n	8008476 <quorem+0xb2>
 80084a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80084aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80084ae:	b92a      	cbnz	r2, 80084bc <quorem+0xf8>
 80084b0:	3b04      	subs	r3, #4
 80084b2:	429e      	cmp	r6, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	d30b      	bcc.n	80084d0 <quorem+0x10c>
 80084b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80084bc:	4628      	mov	r0, r5
 80084be:	b003      	add	sp, #12
 80084c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	3b04      	subs	r3, #4
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	d1c9      	bne.n	8008460 <quorem+0x9c>
 80084cc:	3c01      	subs	r4, #1
 80084ce:	e7c4      	b.n	800845a <quorem+0x96>
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	3b04      	subs	r3, #4
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	d1ef      	bne.n	80084b8 <quorem+0xf4>
 80084d8:	3c01      	subs	r4, #1
 80084da:	e7ea      	b.n	80084b2 <quorem+0xee>
 80084dc:	2000      	movs	r0, #0
 80084de:	e7ee      	b.n	80084be <quorem+0xfa>

080084e0 <_dtoa_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	4616      	mov	r6, r2
 80084e6:	461f      	mov	r7, r3
 80084e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084ea:	b095      	sub	sp, #84	; 0x54
 80084ec:	4604      	mov	r4, r0
 80084ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80084f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80084f6:	b93d      	cbnz	r5, 8008508 <_dtoa_r+0x28>
 80084f8:	2010      	movs	r0, #16
 80084fa:	f000 ff91 	bl	8009420 <malloc>
 80084fe:	6260      	str	r0, [r4, #36]	; 0x24
 8008500:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008504:	6005      	str	r5, [r0, #0]
 8008506:	60c5      	str	r5, [r0, #12]
 8008508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800850a:	6819      	ldr	r1, [r3, #0]
 800850c:	b151      	cbz	r1, 8008524 <_dtoa_r+0x44>
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	2301      	movs	r3, #1
 8008512:	4093      	lsls	r3, r2
 8008514:	604a      	str	r2, [r1, #4]
 8008516:	608b      	str	r3, [r1, #8]
 8008518:	4620      	mov	r0, r4
 800851a:	f000 ffd6 	bl	80094ca <_Bfree>
 800851e:	2200      	movs	r2, #0
 8008520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	1e3b      	subs	r3, r7, #0
 8008526:	bfaf      	iteee	ge
 8008528:	2300      	movge	r3, #0
 800852a:	2201      	movlt	r2, #1
 800852c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008530:	9303      	strlt	r3, [sp, #12]
 8008532:	bfac      	ite	ge
 8008534:	f8c8 3000 	strge.w	r3, [r8]
 8008538:	f8c8 2000 	strlt.w	r2, [r8]
 800853c:	4bae      	ldr	r3, [pc, #696]	; (80087f8 <_dtoa_r+0x318>)
 800853e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008542:	ea33 0308 	bics.w	r3, r3, r8
 8008546:	d11b      	bne.n	8008580 <_dtoa_r+0xa0>
 8008548:	f242 730f 	movw	r3, #9999	; 0x270f
 800854c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	b923      	cbnz	r3, 800855e <_dtoa_r+0x7e>
 8008554:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008558:	2800      	cmp	r0, #0
 800855a:	f000 8545 	beq.w	8008fe8 <_dtoa_r+0xb08>
 800855e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008560:	b953      	cbnz	r3, 8008578 <_dtoa_r+0x98>
 8008562:	4ba6      	ldr	r3, [pc, #664]	; (80087fc <_dtoa_r+0x31c>)
 8008564:	e021      	b.n	80085aa <_dtoa_r+0xca>
 8008566:	4ba6      	ldr	r3, [pc, #664]	; (8008800 <_dtoa_r+0x320>)
 8008568:	9306      	str	r3, [sp, #24]
 800856a:	3308      	adds	r3, #8
 800856c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	9806      	ldr	r0, [sp, #24]
 8008572:	b015      	add	sp, #84	; 0x54
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	4ba0      	ldr	r3, [pc, #640]	; (80087fc <_dtoa_r+0x31c>)
 800857a:	9306      	str	r3, [sp, #24]
 800857c:	3303      	adds	r3, #3
 800857e:	e7f5      	b.n	800856c <_dtoa_r+0x8c>
 8008580:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008584:	2200      	movs	r2, #0
 8008586:	2300      	movs	r3, #0
 8008588:	4630      	mov	r0, r6
 800858a:	4639      	mov	r1, r7
 800858c:	f7f8 fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8008590:	4682      	mov	sl, r0
 8008592:	b160      	cbz	r0, 80085ae <_dtoa_r+0xce>
 8008594:	2301      	movs	r3, #1
 8008596:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8520 	beq.w	8008fe2 <_dtoa_r+0xb02>
 80085a2:	4b98      	ldr	r3, [pc, #608]	; (8008804 <_dtoa_r+0x324>)
 80085a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	9306      	str	r3, [sp, #24]
 80085ac:	e7e0      	b.n	8008570 <_dtoa_r+0x90>
 80085ae:	ab12      	add	r3, sp, #72	; 0x48
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	ab13      	add	r3, sp, #76	; 0x4c
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	4632      	mov	r2, r6
 80085b8:	463b      	mov	r3, r7
 80085ba:	4620      	mov	r0, r4
 80085bc:	f001 f9de 	bl	800997c <__d2b>
 80085c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80085c4:	4683      	mov	fp, r0
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	d07d      	beq.n	80086c6 <_dtoa_r+0x1e6>
 80085ca:	46b0      	mov	r8, r6
 80085cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80085d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80085d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80085e0:	2200      	movs	r2, #0
 80085e2:	4b89      	ldr	r3, [pc, #548]	; (8008808 <_dtoa_r+0x328>)
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	f7f7 fdbe 	bl	8000168 <__aeabi_dsub>
 80085ec:	a37c      	add	r3, pc, #496	; (adr r3, 80087e0 <_dtoa_r+0x300>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	f7f7 ff71 	bl	80004d8 <__aeabi_dmul>
 80085f6:	a37c      	add	r3, pc, #496	; (adr r3, 80087e8 <_dtoa_r+0x308>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f7 fdb6 	bl	800016c <__adddf3>
 8008600:	4606      	mov	r6, r0
 8008602:	4628      	mov	r0, r5
 8008604:	460f      	mov	r7, r1
 8008606:	f7f7 fefd 	bl	8000404 <__aeabi_i2d>
 800860a:	a379      	add	r3, pc, #484	; (adr r3, 80087f0 <_dtoa_r+0x310>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f7 ff62 	bl	80004d8 <__aeabi_dmul>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f7f7 fda6 	bl	800016c <__adddf3>
 8008620:	4606      	mov	r6, r0
 8008622:	460f      	mov	r7, r1
 8008624:	f7f8 fa08 	bl	8000a38 <__aeabi_d2iz>
 8008628:	2200      	movs	r2, #0
 800862a:	4682      	mov	sl, r0
 800862c:	2300      	movs	r3, #0
 800862e:	4630      	mov	r0, r6
 8008630:	4639      	mov	r1, r7
 8008632:	f7f8 f9c3 	bl	80009bc <__aeabi_dcmplt>
 8008636:	b148      	cbz	r0, 800864c <_dtoa_r+0x16c>
 8008638:	4650      	mov	r0, sl
 800863a:	f7f7 fee3 	bl	8000404 <__aeabi_i2d>
 800863e:	4632      	mov	r2, r6
 8008640:	463b      	mov	r3, r7
 8008642:	f7f8 f9b1 	bl	80009a8 <__aeabi_dcmpeq>
 8008646:	b908      	cbnz	r0, 800864c <_dtoa_r+0x16c>
 8008648:	f10a 3aff 	add.w	sl, sl, #4294967295
 800864c:	f1ba 0f16 	cmp.w	sl, #22
 8008650:	d85a      	bhi.n	8008708 <_dtoa_r+0x228>
 8008652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008656:	496d      	ldr	r1, [pc, #436]	; (800880c <_dtoa_r+0x32c>)
 8008658:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800865c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008660:	f7f8 f9ca 	bl	80009f8 <__aeabi_dcmpgt>
 8008664:	2800      	cmp	r0, #0
 8008666:	d051      	beq.n	800870c <_dtoa_r+0x22c>
 8008668:	2300      	movs	r3, #0
 800866a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800866e:	930d      	str	r3, [sp, #52]	; 0x34
 8008670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008672:	1b5d      	subs	r5, r3, r5
 8008674:	1e6b      	subs	r3, r5, #1
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	bf43      	ittte	mi
 800867a:	2300      	movmi	r3, #0
 800867c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008680:	9307      	strmi	r3, [sp, #28]
 8008682:	f04f 0900 	movpl.w	r9, #0
 8008686:	f1ba 0f00 	cmp.w	sl, #0
 800868a:	db41      	blt.n	8008710 <_dtoa_r+0x230>
 800868c:	9b07      	ldr	r3, [sp, #28]
 800868e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008692:	4453      	add	r3, sl
 8008694:	9307      	str	r3, [sp, #28]
 8008696:	2300      	movs	r3, #0
 8008698:	9308      	str	r3, [sp, #32]
 800869a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800869c:	2b09      	cmp	r3, #9
 800869e:	f200 808f 	bhi.w	80087c0 <_dtoa_r+0x2e0>
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	bfc4      	itt	gt
 80086a6:	3b04      	subgt	r3, #4
 80086a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80086aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80086ac:	bfc8      	it	gt
 80086ae:	2500      	movgt	r5, #0
 80086b0:	f1a3 0302 	sub.w	r3, r3, #2
 80086b4:	bfd8      	it	le
 80086b6:	2501      	movle	r5, #1
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	f200 808d 	bhi.w	80087d8 <_dtoa_r+0x2f8>
 80086be:	e8df f003 	tbb	[pc, r3]
 80086c2:	7d7b      	.short	0x7d7b
 80086c4:	6f2f      	.short	0x6f2f
 80086c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80086ca:	441d      	add	r5, r3
 80086cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80086d0:	2820      	cmp	r0, #32
 80086d2:	dd13      	ble.n	80086fc <_dtoa_r+0x21c>
 80086d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	fa08 f800 	lsl.w	r8, r8, r0
 80086de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80086e2:	fa23 f000 	lsr.w	r0, r3, r0
 80086e6:	ea48 0000 	orr.w	r0, r8, r0
 80086ea:	f7f7 fe7b 	bl	80003e4 <__aeabi_ui2d>
 80086ee:	2301      	movs	r3, #1
 80086f0:	4680      	mov	r8, r0
 80086f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80086f6:	3d01      	subs	r5, #1
 80086f8:	9310      	str	r3, [sp, #64]	; 0x40
 80086fa:	e771      	b.n	80085e0 <_dtoa_r+0x100>
 80086fc:	9b02      	ldr	r3, [sp, #8]
 80086fe:	f1c0 0020 	rsb	r0, r0, #32
 8008702:	fa03 f000 	lsl.w	r0, r3, r0
 8008706:	e7f0      	b.n	80086ea <_dtoa_r+0x20a>
 8008708:	2301      	movs	r3, #1
 800870a:	e7b0      	b.n	800866e <_dtoa_r+0x18e>
 800870c:	900d      	str	r0, [sp, #52]	; 0x34
 800870e:	e7af      	b.n	8008670 <_dtoa_r+0x190>
 8008710:	f1ca 0300 	rsb	r3, sl, #0
 8008714:	9308      	str	r3, [sp, #32]
 8008716:	2300      	movs	r3, #0
 8008718:	eba9 090a 	sub.w	r9, r9, sl
 800871c:	930c      	str	r3, [sp, #48]	; 0x30
 800871e:	e7bc      	b.n	800869a <_dtoa_r+0x1ba>
 8008720:	2301      	movs	r3, #1
 8008722:	9309      	str	r3, [sp, #36]	; 0x24
 8008724:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008726:	2b00      	cmp	r3, #0
 8008728:	dd74      	ble.n	8008814 <_dtoa_r+0x334>
 800872a:	4698      	mov	r8, r3
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	2200      	movs	r2, #0
 8008730:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008732:	6072      	str	r2, [r6, #4]
 8008734:	2204      	movs	r2, #4
 8008736:	f102 0014 	add.w	r0, r2, #20
 800873a:	4298      	cmp	r0, r3
 800873c:	6871      	ldr	r1, [r6, #4]
 800873e:	d96e      	bls.n	800881e <_dtoa_r+0x33e>
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fe8e 	bl	8009462 <_Balloc>
 8008746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008748:	6030      	str	r0, [r6, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f1b8 0f0e 	cmp.w	r8, #14
 8008750:	9306      	str	r3, [sp, #24]
 8008752:	f200 80ed 	bhi.w	8008930 <_dtoa_r+0x450>
 8008756:	2d00      	cmp	r5, #0
 8008758:	f000 80ea 	beq.w	8008930 <_dtoa_r+0x450>
 800875c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008760:	f1ba 0f00 	cmp.w	sl, #0
 8008764:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008768:	dd77      	ble.n	800885a <_dtoa_r+0x37a>
 800876a:	4a28      	ldr	r2, [pc, #160]	; (800880c <_dtoa_r+0x32c>)
 800876c:	f00a 030f 	and.w	r3, sl, #15
 8008770:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008774:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008778:	06f0      	lsls	r0, r6, #27
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008782:	d568      	bpl.n	8008856 <_dtoa_r+0x376>
 8008784:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008788:	4b21      	ldr	r3, [pc, #132]	; (8008810 <_dtoa_r+0x330>)
 800878a:	2503      	movs	r5, #3
 800878c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008790:	f7f7 ffcc 	bl	800072c <__aeabi_ddiv>
 8008794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008798:	f006 060f 	and.w	r6, r6, #15
 800879c:	4f1c      	ldr	r7, [pc, #112]	; (8008810 <_dtoa_r+0x330>)
 800879e:	e04f      	b.n	8008840 <_dtoa_r+0x360>
 80087a0:	2301      	movs	r3, #1
 80087a2:	9309      	str	r3, [sp, #36]	; 0x24
 80087a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80087a6:	4453      	add	r3, sl
 80087a8:	f103 0801 	add.w	r8, r3, #1
 80087ac:	9304      	str	r3, [sp, #16]
 80087ae:	4643      	mov	r3, r8
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	bfb8      	it	lt
 80087b4:	2301      	movlt	r3, #1
 80087b6:	e7ba      	b.n	800872e <_dtoa_r+0x24e>
 80087b8:	2300      	movs	r3, #0
 80087ba:	e7b2      	b.n	8008722 <_dtoa_r+0x242>
 80087bc:	2300      	movs	r3, #0
 80087be:	e7f0      	b.n	80087a2 <_dtoa_r+0x2c2>
 80087c0:	2501      	movs	r5, #1
 80087c2:	2300      	movs	r3, #0
 80087c4:	9509      	str	r5, [sp, #36]	; 0x24
 80087c6:	931e      	str	r3, [sp, #120]	; 0x78
 80087c8:	f04f 33ff 	mov.w	r3, #4294967295
 80087cc:	2200      	movs	r2, #0
 80087ce:	9304      	str	r3, [sp, #16]
 80087d0:	4698      	mov	r8, r3
 80087d2:	2312      	movs	r3, #18
 80087d4:	921f      	str	r2, [sp, #124]	; 0x7c
 80087d6:	e7aa      	b.n	800872e <_dtoa_r+0x24e>
 80087d8:	2301      	movs	r3, #1
 80087da:	9309      	str	r3, [sp, #36]	; 0x24
 80087dc:	e7f4      	b.n	80087c8 <_dtoa_r+0x2e8>
 80087de:	bf00      	nop
 80087e0:	636f4361 	.word	0x636f4361
 80087e4:	3fd287a7 	.word	0x3fd287a7
 80087e8:	8b60c8b3 	.word	0x8b60c8b3
 80087ec:	3fc68a28 	.word	0x3fc68a28
 80087f0:	509f79fb 	.word	0x509f79fb
 80087f4:	3fd34413 	.word	0x3fd34413
 80087f8:	7ff00000 	.word	0x7ff00000
 80087fc:	0800c5f9 	.word	0x0800c5f9
 8008800:	0800c5f0 	.word	0x0800c5f0
 8008804:	0800c5cd 	.word	0x0800c5cd
 8008808:	3ff80000 	.word	0x3ff80000
 800880c:	0800c688 	.word	0x0800c688
 8008810:	0800c660 	.word	0x0800c660
 8008814:	2301      	movs	r3, #1
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	4698      	mov	r8, r3
 800881a:	461a      	mov	r2, r3
 800881c:	e7da      	b.n	80087d4 <_dtoa_r+0x2f4>
 800881e:	3101      	adds	r1, #1
 8008820:	6071      	str	r1, [r6, #4]
 8008822:	0052      	lsls	r2, r2, #1
 8008824:	e787      	b.n	8008736 <_dtoa_r+0x256>
 8008826:	07f1      	lsls	r1, r6, #31
 8008828:	d508      	bpl.n	800883c <_dtoa_r+0x35c>
 800882a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800882e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008832:	f7f7 fe51 	bl	80004d8 <__aeabi_dmul>
 8008836:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800883a:	3501      	adds	r5, #1
 800883c:	1076      	asrs	r6, r6, #1
 800883e:	3708      	adds	r7, #8
 8008840:	2e00      	cmp	r6, #0
 8008842:	d1f0      	bne.n	8008826 <_dtoa_r+0x346>
 8008844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884c:	f7f7 ff6e 	bl	800072c <__aeabi_ddiv>
 8008850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008854:	e01b      	b.n	800888e <_dtoa_r+0x3ae>
 8008856:	2502      	movs	r5, #2
 8008858:	e7a0      	b.n	800879c <_dtoa_r+0x2bc>
 800885a:	f000 80a4 	beq.w	80089a6 <_dtoa_r+0x4c6>
 800885e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008862:	f1ca 0600 	rsb	r6, sl, #0
 8008866:	4ba0      	ldr	r3, [pc, #640]	; (8008ae8 <_dtoa_r+0x608>)
 8008868:	f006 020f 	and.w	r2, r6, #15
 800886c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f7f7 fe30 	bl	80004d8 <__aeabi_dmul>
 8008878:	2502      	movs	r5, #2
 800887a:	2300      	movs	r3, #0
 800887c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008880:	4f9a      	ldr	r7, [pc, #616]	; (8008aec <_dtoa_r+0x60c>)
 8008882:	1136      	asrs	r6, r6, #4
 8008884:	2e00      	cmp	r6, #0
 8008886:	f040 8083 	bne.w	8008990 <_dtoa_r+0x4b0>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e0      	bne.n	8008850 <_dtoa_r+0x370>
 800888e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 808a 	beq.w	80089aa <_dtoa_r+0x4ca>
 8008896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800889a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800889e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088a2:	2200      	movs	r2, #0
 80088a4:	4b92      	ldr	r3, [pc, #584]	; (8008af0 <_dtoa_r+0x610>)
 80088a6:	f7f8 f889 	bl	80009bc <__aeabi_dcmplt>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d07d      	beq.n	80089aa <_dtoa_r+0x4ca>
 80088ae:	f1b8 0f00 	cmp.w	r8, #0
 80088b2:	d07a      	beq.n	80089aa <_dtoa_r+0x4ca>
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dd36      	ble.n	8008928 <_dtoa_r+0x448>
 80088ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088be:	2200      	movs	r2, #0
 80088c0:	4b8c      	ldr	r3, [pc, #560]	; (8008af4 <_dtoa_r+0x614>)
 80088c2:	f7f7 fe09 	bl	80004d8 <__aeabi_dmul>
 80088c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ca:	9e04      	ldr	r6, [sp, #16]
 80088cc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80088d0:	3501      	adds	r5, #1
 80088d2:	4628      	mov	r0, r5
 80088d4:	f7f7 fd96 	bl	8000404 <__aeabi_i2d>
 80088d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088dc:	f7f7 fdfc 	bl	80004d8 <__aeabi_dmul>
 80088e0:	2200      	movs	r2, #0
 80088e2:	4b85      	ldr	r3, [pc, #532]	; (8008af8 <_dtoa_r+0x618>)
 80088e4:	f7f7 fc42 	bl	800016c <__adddf3>
 80088e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80088ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80088f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	d15c      	bne.n	80089b0 <_dtoa_r+0x4d0>
 80088f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	4b7f      	ldr	r3, [pc, #508]	; (8008afc <_dtoa_r+0x61c>)
 80088fe:	f7f7 fc33 	bl	8000168 <__aeabi_dsub>
 8008902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008904:	462b      	mov	r3, r5
 8008906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800890a:	f7f8 f875 	bl	80009f8 <__aeabi_dcmpgt>
 800890e:	2800      	cmp	r0, #0
 8008910:	f040 8281 	bne.w	8008e16 <_dtoa_r+0x936>
 8008914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800891a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800891e:	f7f8 f84d 	bl	80009bc <__aeabi_dcmplt>
 8008922:	2800      	cmp	r0, #0
 8008924:	f040 8275 	bne.w	8008e12 <_dtoa_r+0x932>
 8008928:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800892c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008932:	2b00      	cmp	r3, #0
 8008934:	f2c0 814b 	blt.w	8008bce <_dtoa_r+0x6ee>
 8008938:	f1ba 0f0e 	cmp.w	sl, #14
 800893c:	f300 8147 	bgt.w	8008bce <_dtoa_r+0x6ee>
 8008940:	4b69      	ldr	r3, [pc, #420]	; (8008ae8 <_dtoa_r+0x608>)
 8008942:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800894e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008950:	2b00      	cmp	r3, #0
 8008952:	f280 80d7 	bge.w	8008b04 <_dtoa_r+0x624>
 8008956:	f1b8 0f00 	cmp.w	r8, #0
 800895a:	f300 80d3 	bgt.w	8008b04 <_dtoa_r+0x624>
 800895e:	f040 8257 	bne.w	8008e10 <_dtoa_r+0x930>
 8008962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008966:	2200      	movs	r2, #0
 8008968:	4b64      	ldr	r3, [pc, #400]	; (8008afc <_dtoa_r+0x61c>)
 800896a:	f7f7 fdb5 	bl	80004d8 <__aeabi_dmul>
 800896e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008972:	f7f8 f837 	bl	80009e4 <__aeabi_dcmpge>
 8008976:	4646      	mov	r6, r8
 8008978:	4647      	mov	r7, r8
 800897a:	2800      	cmp	r0, #0
 800897c:	f040 822d 	bne.w	8008dda <_dtoa_r+0x8fa>
 8008980:	9b06      	ldr	r3, [sp, #24]
 8008982:	9a06      	ldr	r2, [sp, #24]
 8008984:	1c5d      	adds	r5, r3, #1
 8008986:	2331      	movs	r3, #49	; 0x31
 8008988:	f10a 0a01 	add.w	sl, sl, #1
 800898c:	7013      	strb	r3, [r2, #0]
 800898e:	e228      	b.n	8008de2 <_dtoa_r+0x902>
 8008990:	07f2      	lsls	r2, r6, #31
 8008992:	d505      	bpl.n	80089a0 <_dtoa_r+0x4c0>
 8008994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008998:	f7f7 fd9e 	bl	80004d8 <__aeabi_dmul>
 800899c:	2301      	movs	r3, #1
 800899e:	3501      	adds	r5, #1
 80089a0:	1076      	asrs	r6, r6, #1
 80089a2:	3708      	adds	r7, #8
 80089a4:	e76e      	b.n	8008884 <_dtoa_r+0x3a4>
 80089a6:	2502      	movs	r5, #2
 80089a8:	e771      	b.n	800888e <_dtoa_r+0x3ae>
 80089aa:	4657      	mov	r7, sl
 80089ac:	4646      	mov	r6, r8
 80089ae:	e790      	b.n	80088d2 <_dtoa_r+0x3f2>
 80089b0:	4b4d      	ldr	r3, [pc, #308]	; (8008ae8 <_dtoa_r+0x608>)
 80089b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80089b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80089ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d048      	beq.n	8008a52 <_dtoa_r+0x572>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	2000      	movs	r0, #0
 80089c6:	494e      	ldr	r1, [pc, #312]	; (8008b00 <_dtoa_r+0x620>)
 80089c8:	f7f7 feb0 	bl	800072c <__aeabi_ddiv>
 80089cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089d0:	f7f7 fbca 	bl	8000168 <__aeabi_dsub>
 80089d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80089d8:	9d06      	ldr	r5, [sp, #24]
 80089da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089de:	f7f8 f82b 	bl	8000a38 <__aeabi_d2iz>
 80089e2:	9011      	str	r0, [sp, #68]	; 0x44
 80089e4:	f7f7 fd0e 	bl	8000404 <__aeabi_i2d>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f0:	f7f7 fbba 	bl	8000168 <__aeabi_dsub>
 80089f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089fa:	3330      	adds	r3, #48	; 0x30
 80089fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008a00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a04:	f7f7 ffda 	bl	80009bc <__aeabi_dcmplt>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d163      	bne.n	8008ad4 <_dtoa_r+0x5f4>
 8008a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a10:	2000      	movs	r0, #0
 8008a12:	4937      	ldr	r1, [pc, #220]	; (8008af0 <_dtoa_r+0x610>)
 8008a14:	f7f7 fba8 	bl	8000168 <__aeabi_dsub>
 8008a18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a1c:	f7f7 ffce 	bl	80009bc <__aeabi_dcmplt>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	f040 80b5 	bne.w	8008b90 <_dtoa_r+0x6b0>
 8008a26:	9b06      	ldr	r3, [sp, #24]
 8008a28:	1aeb      	subs	r3, r5, r3
 8008a2a:	429e      	cmp	r6, r3
 8008a2c:	f77f af7c 	ble.w	8008928 <_dtoa_r+0x448>
 8008a30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a34:	2200      	movs	r2, #0
 8008a36:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <_dtoa_r+0x614>)
 8008a38:	f7f7 fd4e 	bl	80004d8 <__aeabi_dmul>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a46:	4b2b      	ldr	r3, [pc, #172]	; (8008af4 <_dtoa_r+0x614>)
 8008a48:	f7f7 fd46 	bl	80004d8 <__aeabi_dmul>
 8008a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a50:	e7c3      	b.n	80089da <_dtoa_r+0x4fa>
 8008a52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008a56:	f7f7 fd3f 	bl	80004d8 <__aeabi_dmul>
 8008a5a:	9b06      	ldr	r3, [sp, #24]
 8008a5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a60:	199d      	adds	r5, r3, r6
 8008a62:	461e      	mov	r6, r3
 8008a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a68:	f7f7 ffe6 	bl	8000a38 <__aeabi_d2iz>
 8008a6c:	9011      	str	r0, [sp, #68]	; 0x44
 8008a6e:	f7f7 fcc9 	bl	8000404 <__aeabi_i2d>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a7a:	f7f7 fb75 	bl	8000168 <__aeabi_dsub>
 8008a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a84:	3330      	adds	r3, #48	; 0x30
 8008a86:	f806 3b01 	strb.w	r3, [r6], #1
 8008a8a:	42ae      	cmp	r6, r5
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	d124      	bne.n	8008adc <_dtoa_r+0x5fc>
 8008a92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a96:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <_dtoa_r+0x620>)
 8008a98:	f7f7 fb68 	bl	800016c <__adddf3>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa4:	f7f7 ffa8 	bl	80009f8 <__aeabi_dcmpgt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d171      	bne.n	8008b90 <_dtoa_r+0x6b0>
 8008aac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4913      	ldr	r1, [pc, #76]	; (8008b00 <_dtoa_r+0x620>)
 8008ab4:	f7f7 fb58 	bl	8000168 <__aeabi_dsub>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac0:	f7f7 ff7c 	bl	80009bc <__aeabi_dcmplt>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	f43f af2f 	beq.w	8008928 <_dtoa_r+0x448>
 8008aca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ace:	1e6a      	subs	r2, r5, #1
 8008ad0:	2b30      	cmp	r3, #48	; 0x30
 8008ad2:	d001      	beq.n	8008ad8 <_dtoa_r+0x5f8>
 8008ad4:	46ba      	mov	sl, r7
 8008ad6:	e04a      	b.n	8008b6e <_dtoa_r+0x68e>
 8008ad8:	4615      	mov	r5, r2
 8008ada:	e7f6      	b.n	8008aca <_dtoa_r+0x5ea>
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <_dtoa_r+0x614>)
 8008ade:	f7f7 fcfb 	bl	80004d8 <__aeabi_dmul>
 8008ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae6:	e7bd      	b.n	8008a64 <_dtoa_r+0x584>
 8008ae8:	0800c688 	.word	0x0800c688
 8008aec:	0800c660 	.word	0x0800c660
 8008af0:	3ff00000 	.word	0x3ff00000
 8008af4:	40240000 	.word	0x40240000
 8008af8:	401c0000 	.word	0x401c0000
 8008afc:	40140000 	.word	0x40140000
 8008b00:	3fe00000 	.word	0x3fe00000
 8008b04:	9d06      	ldr	r5, [sp, #24]
 8008b06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f7 fe0b 	bl	800072c <__aeabi_ddiv>
 8008b16:	f7f7 ff8f 	bl	8000a38 <__aeabi_d2iz>
 8008b1a:	4681      	mov	r9, r0
 8008b1c:	f7f7 fc72 	bl	8000404 <__aeabi_i2d>
 8008b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b24:	f7f7 fcd8 	bl	80004d8 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	4639      	mov	r1, r7
 8008b30:	f7f7 fb1a 	bl	8000168 <__aeabi_dsub>
 8008b34:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008b38:	f805 6b01 	strb.w	r6, [r5], #1
 8008b3c:	9e06      	ldr	r6, [sp, #24]
 8008b3e:	4602      	mov	r2, r0
 8008b40:	1bae      	subs	r6, r5, r6
 8008b42:	45b0      	cmp	r8, r6
 8008b44:	460b      	mov	r3, r1
 8008b46:	d135      	bne.n	8008bb4 <_dtoa_r+0x6d4>
 8008b48:	f7f7 fb10 	bl	800016c <__adddf3>
 8008b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b50:	4606      	mov	r6, r0
 8008b52:	460f      	mov	r7, r1
 8008b54:	f7f7 ff50 	bl	80009f8 <__aeabi_dcmpgt>
 8008b58:	b9c8      	cbnz	r0, 8008b8e <_dtoa_r+0x6ae>
 8008b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	f7f7 ff21 	bl	80009a8 <__aeabi_dcmpeq>
 8008b66:	b110      	cbz	r0, 8008b6e <_dtoa_r+0x68e>
 8008b68:	f019 0f01 	tst.w	r9, #1
 8008b6c:	d10f      	bne.n	8008b8e <_dtoa_r+0x6ae>
 8008b6e:	4659      	mov	r1, fp
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fcaa 	bl	80094ca <_Bfree>
 8008b76:	2300      	movs	r3, #0
 8008b78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b7a:	702b      	strb	r3, [r5, #0]
 8008b7c:	f10a 0301 	add.w	r3, sl, #1
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f43f acf3 	beq.w	8008570 <_dtoa_r+0x90>
 8008b8a:	601d      	str	r5, [r3, #0]
 8008b8c:	e4f0      	b.n	8008570 <_dtoa_r+0x90>
 8008b8e:	4657      	mov	r7, sl
 8008b90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b94:	1e6b      	subs	r3, r5, #1
 8008b96:	2a39      	cmp	r2, #57	; 0x39
 8008b98:	d106      	bne.n	8008ba8 <_dtoa_r+0x6c8>
 8008b9a:	9a06      	ldr	r2, [sp, #24]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d107      	bne.n	8008bb0 <_dtoa_r+0x6d0>
 8008ba0:	2330      	movs	r3, #48	; 0x30
 8008ba2:	7013      	strb	r3, [r2, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	3701      	adds	r7, #1
 8008ba8:	781a      	ldrb	r2, [r3, #0]
 8008baa:	3201      	adds	r2, #1
 8008bac:	701a      	strb	r2, [r3, #0]
 8008bae:	e791      	b.n	8008ad4 <_dtoa_r+0x5f4>
 8008bb0:	461d      	mov	r5, r3
 8008bb2:	e7ed      	b.n	8008b90 <_dtoa_r+0x6b0>
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4b99      	ldr	r3, [pc, #612]	; (8008e1c <_dtoa_r+0x93c>)
 8008bb8:	f7f7 fc8e 	bl	80004d8 <__aeabi_dmul>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	f7f7 fef0 	bl	80009a8 <__aeabi_dcmpeq>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d09e      	beq.n	8008b0a <_dtoa_r+0x62a>
 8008bcc:	e7cf      	b.n	8008b6e <_dtoa_r+0x68e>
 8008bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	f000 8088 	beq.w	8008ce6 <_dtoa_r+0x806>
 8008bd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008bd8:	2a01      	cmp	r2, #1
 8008bda:	dc6d      	bgt.n	8008cb8 <_dtoa_r+0x7d8>
 8008bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	d066      	beq.n	8008cb0 <_dtoa_r+0x7d0>
 8008be2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008be6:	464d      	mov	r5, r9
 8008be8:	9e08      	ldr	r6, [sp, #32]
 8008bea:	9a07      	ldr	r2, [sp, #28]
 8008bec:	2101      	movs	r1, #1
 8008bee:	441a      	add	r2, r3
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	4499      	add	r9, r3
 8008bf4:	9207      	str	r2, [sp, #28]
 8008bf6:	f000 fd08 	bl	800960a <__i2b>
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	2d00      	cmp	r5, #0
 8008bfe:	dd0b      	ble.n	8008c18 <_dtoa_r+0x738>
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dd08      	ble.n	8008c18 <_dtoa_r+0x738>
 8008c06:	42ab      	cmp	r3, r5
 8008c08:	bfa8      	it	ge
 8008c0a:	462b      	movge	r3, r5
 8008c0c:	9a07      	ldr	r2, [sp, #28]
 8008c0e:	eba9 0903 	sub.w	r9, r9, r3
 8008c12:	1aed      	subs	r5, r5, r3
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	9307      	str	r3, [sp, #28]
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	b1eb      	cbz	r3, 8008c58 <_dtoa_r+0x778>
 8008c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d065      	beq.n	8008cee <_dtoa_r+0x80e>
 8008c22:	b18e      	cbz	r6, 8008c48 <_dtoa_r+0x768>
 8008c24:	4639      	mov	r1, r7
 8008c26:	4632      	mov	r2, r6
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f000 fd8d 	bl	8009748 <__pow5mult>
 8008c2e:	465a      	mov	r2, fp
 8008c30:	4601      	mov	r1, r0
 8008c32:	4607      	mov	r7, r0
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 fcf1 	bl	800961c <__multiply>
 8008c3a:	4659      	mov	r1, fp
 8008c3c:	900a      	str	r0, [sp, #40]	; 0x28
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fc43 	bl	80094ca <_Bfree>
 8008c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c46:	469b      	mov	fp, r3
 8008c48:	9b08      	ldr	r3, [sp, #32]
 8008c4a:	1b9a      	subs	r2, r3, r6
 8008c4c:	d004      	beq.n	8008c58 <_dtoa_r+0x778>
 8008c4e:	4659      	mov	r1, fp
 8008c50:	4620      	mov	r0, r4
 8008c52:	f000 fd79 	bl	8009748 <__pow5mult>
 8008c56:	4683      	mov	fp, r0
 8008c58:	2101      	movs	r1, #1
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 fcd5 	bl	800960a <__i2b>
 8008c60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c62:	4606      	mov	r6, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 81c6 	beq.w	8008ff6 <_dtoa_r+0xb16>
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 fd6a 	bl	8009748 <__pow5mult>
 8008c74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c76:	4606      	mov	r6, r0
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	dc3e      	bgt.n	8008cfa <_dtoa_r+0x81a>
 8008c7c:	9b02      	ldr	r3, [sp, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d137      	bne.n	8008cf2 <_dtoa_r+0x812>
 8008c82:	9b03      	ldr	r3, [sp, #12]
 8008c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d134      	bne.n	8008cf6 <_dtoa_r+0x816>
 8008c8c:	9b03      	ldr	r3, [sp, #12]
 8008c8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c92:	0d1b      	lsrs	r3, r3, #20
 8008c94:	051b      	lsls	r3, r3, #20
 8008c96:	b12b      	cbz	r3, 8008ca4 <_dtoa_r+0x7c4>
 8008c98:	9b07      	ldr	r3, [sp, #28]
 8008c9a:	f109 0901 	add.w	r9, r9, #1
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	9307      	str	r3, [sp, #28]
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	9308      	str	r3, [sp, #32]
 8008ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d128      	bne.n	8008cfe <_dtoa_r+0x81e>
 8008cac:	2001      	movs	r0, #1
 8008cae:	e02e      	b.n	8008d0e <_dtoa_r+0x82e>
 8008cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cb2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008cb6:	e796      	b.n	8008be6 <_dtoa_r+0x706>
 8008cb8:	9b08      	ldr	r3, [sp, #32]
 8008cba:	f108 36ff 	add.w	r6, r8, #4294967295
 8008cbe:	42b3      	cmp	r3, r6
 8008cc0:	bfb7      	itett	lt
 8008cc2:	9b08      	ldrlt	r3, [sp, #32]
 8008cc4:	1b9e      	subge	r6, r3, r6
 8008cc6:	1af2      	sublt	r2, r6, r3
 8008cc8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008cca:	bfbf      	itttt	lt
 8008ccc:	9608      	strlt	r6, [sp, #32]
 8008cce:	189b      	addlt	r3, r3, r2
 8008cd0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008cd2:	2600      	movlt	r6, #0
 8008cd4:	f1b8 0f00 	cmp.w	r8, #0
 8008cd8:	bfb9      	ittee	lt
 8008cda:	eba9 0508 	sublt.w	r5, r9, r8
 8008cde:	2300      	movlt	r3, #0
 8008ce0:	464d      	movge	r5, r9
 8008ce2:	4643      	movge	r3, r8
 8008ce4:	e781      	b.n	8008bea <_dtoa_r+0x70a>
 8008ce6:	9e08      	ldr	r6, [sp, #32]
 8008ce8:	464d      	mov	r5, r9
 8008cea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008cec:	e786      	b.n	8008bfc <_dtoa_r+0x71c>
 8008cee:	9a08      	ldr	r2, [sp, #32]
 8008cf0:	e7ad      	b.n	8008c4e <_dtoa_r+0x76e>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e7d6      	b.n	8008ca4 <_dtoa_r+0x7c4>
 8008cf6:	9b02      	ldr	r3, [sp, #8]
 8008cf8:	e7d4      	b.n	8008ca4 <_dtoa_r+0x7c4>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9308      	str	r3, [sp, #32]
 8008cfe:	6933      	ldr	r3, [r6, #16]
 8008d00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d04:	6918      	ldr	r0, [r3, #16]
 8008d06:	f000 fc32 	bl	800956e <__hi0bits>
 8008d0a:	f1c0 0020 	rsb	r0, r0, #32
 8008d0e:	9b07      	ldr	r3, [sp, #28]
 8008d10:	4418      	add	r0, r3
 8008d12:	f010 001f 	ands.w	r0, r0, #31
 8008d16:	d047      	beq.n	8008da8 <_dtoa_r+0x8c8>
 8008d18:	f1c0 0320 	rsb	r3, r0, #32
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	dd3b      	ble.n	8008d98 <_dtoa_r+0x8b8>
 8008d20:	9b07      	ldr	r3, [sp, #28]
 8008d22:	f1c0 001c 	rsb	r0, r0, #28
 8008d26:	4481      	add	r9, r0
 8008d28:	4405      	add	r5, r0
 8008d2a:	4403      	add	r3, r0
 8008d2c:	9307      	str	r3, [sp, #28]
 8008d2e:	f1b9 0f00 	cmp.w	r9, #0
 8008d32:	dd05      	ble.n	8008d40 <_dtoa_r+0x860>
 8008d34:	4659      	mov	r1, fp
 8008d36:	464a      	mov	r2, r9
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fd53 	bl	80097e4 <__lshift>
 8008d3e:	4683      	mov	fp, r0
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd05      	ble.n	8008d52 <_dtoa_r+0x872>
 8008d46:	4631      	mov	r1, r6
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 fd4a 	bl	80097e4 <__lshift>
 8008d50:	4606      	mov	r6, r0
 8008d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d54:	b353      	cbz	r3, 8008dac <_dtoa_r+0x8cc>
 8008d56:	4631      	mov	r1, r6
 8008d58:	4658      	mov	r0, fp
 8008d5a:	f000 fd97 	bl	800988c <__mcmp>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	da24      	bge.n	8008dac <_dtoa_r+0x8cc>
 8008d62:	2300      	movs	r3, #0
 8008d64:	4659      	mov	r1, fp
 8008d66:	220a      	movs	r2, #10
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fbc5 	bl	80094f8 <__multadd>
 8008d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d74:	4683      	mov	fp, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 8144 	beq.w	8009004 <_dtoa_r+0xb24>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4639      	mov	r1, r7
 8008d80:	220a      	movs	r2, #10
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 fbb8 	bl	80094f8 <__multadd>
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc4d      	bgt.n	8008e2c <_dtoa_r+0x94c>
 8008d90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	dd4a      	ble.n	8008e2c <_dtoa_r+0x94c>
 8008d96:	e011      	b.n	8008dbc <_dtoa_r+0x8dc>
 8008d98:	d0c9      	beq.n	8008d2e <_dtoa_r+0x84e>
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	331c      	adds	r3, #28
 8008d9e:	441a      	add	r2, r3
 8008da0:	4499      	add	r9, r3
 8008da2:	441d      	add	r5, r3
 8008da4:	4613      	mov	r3, r2
 8008da6:	e7c1      	b.n	8008d2c <_dtoa_r+0x84c>
 8008da8:	4603      	mov	r3, r0
 8008daa:	e7f6      	b.n	8008d9a <_dtoa_r+0x8ba>
 8008dac:	f1b8 0f00 	cmp.w	r8, #0
 8008db0:	dc36      	bgt.n	8008e20 <_dtoa_r+0x940>
 8008db2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	dd33      	ble.n	8008e20 <_dtoa_r+0x940>
 8008db8:	f8cd 8010 	str.w	r8, [sp, #16]
 8008dbc:	9b04      	ldr	r3, [sp, #16]
 8008dbe:	b963      	cbnz	r3, 8008dda <_dtoa_r+0x8fa>
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	2205      	movs	r2, #5
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 fb97 	bl	80094f8 <__multadd>
 8008dca:	4601      	mov	r1, r0
 8008dcc:	4606      	mov	r6, r0
 8008dce:	4658      	mov	r0, fp
 8008dd0:	f000 fd5c 	bl	800988c <__mcmp>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	f73f add3 	bgt.w	8008980 <_dtoa_r+0x4a0>
 8008dda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ddc:	9d06      	ldr	r5, [sp, #24]
 8008dde:	ea6f 0a03 	mvn.w	sl, r3
 8008de2:	f04f 0900 	mov.w	r9, #0
 8008de6:	4631      	mov	r1, r6
 8008de8:	4620      	mov	r0, r4
 8008dea:	f000 fb6e 	bl	80094ca <_Bfree>
 8008dee:	2f00      	cmp	r7, #0
 8008df0:	f43f aebd 	beq.w	8008b6e <_dtoa_r+0x68e>
 8008df4:	f1b9 0f00 	cmp.w	r9, #0
 8008df8:	d005      	beq.n	8008e06 <_dtoa_r+0x926>
 8008dfa:	45b9      	cmp	r9, r7
 8008dfc:	d003      	beq.n	8008e06 <_dtoa_r+0x926>
 8008dfe:	4649      	mov	r1, r9
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 fb62 	bl	80094ca <_Bfree>
 8008e06:	4639      	mov	r1, r7
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fb5e 	bl	80094ca <_Bfree>
 8008e0e:	e6ae      	b.n	8008b6e <_dtoa_r+0x68e>
 8008e10:	2600      	movs	r6, #0
 8008e12:	4637      	mov	r7, r6
 8008e14:	e7e1      	b.n	8008dda <_dtoa_r+0x8fa>
 8008e16:	46ba      	mov	sl, r7
 8008e18:	4637      	mov	r7, r6
 8008e1a:	e5b1      	b.n	8008980 <_dtoa_r+0x4a0>
 8008e1c:	40240000 	.word	0x40240000
 8008e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e22:	f8cd 8010 	str.w	r8, [sp, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 80f3 	beq.w	8009012 <_dtoa_r+0xb32>
 8008e2c:	2d00      	cmp	r5, #0
 8008e2e:	dd05      	ble.n	8008e3c <_dtoa_r+0x95c>
 8008e30:	4639      	mov	r1, r7
 8008e32:	462a      	mov	r2, r5
 8008e34:	4620      	mov	r0, r4
 8008e36:	f000 fcd5 	bl	80097e4 <__lshift>
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	9b08      	ldr	r3, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d04c      	beq.n	8008edc <_dtoa_r+0x9fc>
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 fb0c 	bl	8009462 <_Balloc>
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	f107 010c 	add.w	r1, r7, #12
 8008e52:	3202      	adds	r2, #2
 8008e54:	0092      	lsls	r2, r2, #2
 8008e56:	300c      	adds	r0, #12
 8008e58:	f000 faf8 	bl	800944c <memcpy>
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	4629      	mov	r1, r5
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 fcbf 	bl	80097e4 <__lshift>
 8008e66:	46b9      	mov	r9, r7
 8008e68:	4607      	mov	r7, r0
 8008e6a:	9b06      	ldr	r3, [sp, #24]
 8008e6c:	9307      	str	r3, [sp, #28]
 8008e6e:	9b02      	ldr	r3, [sp, #8]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	9308      	str	r3, [sp, #32]
 8008e76:	4631      	mov	r1, r6
 8008e78:	4658      	mov	r0, fp
 8008e7a:	f7ff faa3 	bl	80083c4 <quorem>
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4605      	mov	r5, r0
 8008e82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e86:	4658      	mov	r0, fp
 8008e88:	f000 fd00 	bl	800988c <__mcmp>
 8008e8c:	463a      	mov	r2, r7
 8008e8e:	9002      	str	r0, [sp, #8]
 8008e90:	4631      	mov	r1, r6
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 fd14 	bl	80098c0 <__mdiff>
 8008e98:	68c3      	ldr	r3, [r0, #12]
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	bb03      	cbnz	r3, 8008ee0 <_dtoa_r+0xa00>
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	9009      	str	r0, [sp, #36]	; 0x24
 8008ea2:	4658      	mov	r0, fp
 8008ea4:	f000 fcf2 	bl	800988c <__mcmp>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eac:	4611      	mov	r1, r2
 8008eae:	4620      	mov	r0, r4
 8008eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb2:	f000 fb0a 	bl	80094ca <_Bfree>
 8008eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb8:	b9a3      	cbnz	r3, 8008ee4 <_dtoa_r+0xa04>
 8008eba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ebc:	b992      	cbnz	r2, 8008ee4 <_dtoa_r+0xa04>
 8008ebe:	9a08      	ldr	r2, [sp, #32]
 8008ec0:	b982      	cbnz	r2, 8008ee4 <_dtoa_r+0xa04>
 8008ec2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ec6:	d029      	beq.n	8008f1c <_dtoa_r+0xa3c>
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dd01      	ble.n	8008ed2 <_dtoa_r+0x9f2>
 8008ece:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008ed2:	9b07      	ldr	r3, [sp, #28]
 8008ed4:	1c5d      	adds	r5, r3, #1
 8008ed6:	f883 8000 	strb.w	r8, [r3]
 8008eda:	e784      	b.n	8008de6 <_dtoa_r+0x906>
 8008edc:	4638      	mov	r0, r7
 8008ede:	e7c2      	b.n	8008e66 <_dtoa_r+0x986>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e7e3      	b.n	8008eac <_dtoa_r+0x9cc>
 8008ee4:	9a02      	ldr	r2, [sp, #8]
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	db04      	blt.n	8008ef4 <_dtoa_r+0xa14>
 8008eea:	d123      	bne.n	8008f34 <_dtoa_r+0xa54>
 8008eec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008eee:	bb0a      	cbnz	r2, 8008f34 <_dtoa_r+0xa54>
 8008ef0:	9a08      	ldr	r2, [sp, #32]
 8008ef2:	b9fa      	cbnz	r2, 8008f34 <_dtoa_r+0xa54>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	ddec      	ble.n	8008ed2 <_dtoa_r+0x9f2>
 8008ef8:	4659      	mov	r1, fp
 8008efa:	2201      	movs	r2, #1
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fc71 	bl	80097e4 <__lshift>
 8008f02:	4631      	mov	r1, r6
 8008f04:	4683      	mov	fp, r0
 8008f06:	f000 fcc1 	bl	800988c <__mcmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	dc03      	bgt.n	8008f16 <_dtoa_r+0xa36>
 8008f0e:	d1e0      	bne.n	8008ed2 <_dtoa_r+0x9f2>
 8008f10:	f018 0f01 	tst.w	r8, #1
 8008f14:	d0dd      	beq.n	8008ed2 <_dtoa_r+0x9f2>
 8008f16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f1a:	d1d8      	bne.n	8008ece <_dtoa_r+0x9ee>
 8008f1c:	9b07      	ldr	r3, [sp, #28]
 8008f1e:	9a07      	ldr	r2, [sp, #28]
 8008f20:	1c5d      	adds	r5, r3, #1
 8008f22:	2339      	movs	r3, #57	; 0x39
 8008f24:	7013      	strb	r3, [r2, #0]
 8008f26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f2a:	1e6a      	subs	r2, r5, #1
 8008f2c:	2b39      	cmp	r3, #57	; 0x39
 8008f2e:	d04d      	beq.n	8008fcc <_dtoa_r+0xaec>
 8008f30:	3301      	adds	r3, #1
 8008f32:	e052      	b.n	8008fda <_dtoa_r+0xafa>
 8008f34:	9a07      	ldr	r2, [sp, #28]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f102 0501 	add.w	r5, r2, #1
 8008f3c:	dd06      	ble.n	8008f4c <_dtoa_r+0xa6c>
 8008f3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f42:	d0eb      	beq.n	8008f1c <_dtoa_r+0xa3c>
 8008f44:	f108 0801 	add.w	r8, r8, #1
 8008f48:	9b07      	ldr	r3, [sp, #28]
 8008f4a:	e7c4      	b.n	8008ed6 <_dtoa_r+0x9f6>
 8008f4c:	9b06      	ldr	r3, [sp, #24]
 8008f4e:	9a04      	ldr	r2, [sp, #16]
 8008f50:	1aeb      	subs	r3, r5, r3
 8008f52:	4293      	cmp	r3, r2
 8008f54:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008f58:	d021      	beq.n	8008f9e <_dtoa_r+0xabe>
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	220a      	movs	r2, #10
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fac9 	bl	80094f8 <__multadd>
 8008f66:	45b9      	cmp	r9, r7
 8008f68:	4683      	mov	fp, r0
 8008f6a:	f04f 0300 	mov.w	r3, #0
 8008f6e:	f04f 020a 	mov.w	r2, #10
 8008f72:	4649      	mov	r1, r9
 8008f74:	4620      	mov	r0, r4
 8008f76:	d105      	bne.n	8008f84 <_dtoa_r+0xaa4>
 8008f78:	f000 fabe 	bl	80094f8 <__multadd>
 8008f7c:	4681      	mov	r9, r0
 8008f7e:	4607      	mov	r7, r0
 8008f80:	9507      	str	r5, [sp, #28]
 8008f82:	e778      	b.n	8008e76 <_dtoa_r+0x996>
 8008f84:	f000 fab8 	bl	80094f8 <__multadd>
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4681      	mov	r9, r0
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	220a      	movs	r2, #10
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fab1 	bl	80094f8 <__multadd>
 8008f96:	4607      	mov	r7, r0
 8008f98:	e7f2      	b.n	8008f80 <_dtoa_r+0xaa0>
 8008f9a:	f04f 0900 	mov.w	r9, #0
 8008f9e:	4659      	mov	r1, fp
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fc1e 	bl	80097e4 <__lshift>
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4683      	mov	fp, r0
 8008fac:	f000 fc6e 	bl	800988c <__mcmp>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	dcb8      	bgt.n	8008f26 <_dtoa_r+0xa46>
 8008fb4:	d102      	bne.n	8008fbc <_dtoa_r+0xadc>
 8008fb6:	f018 0f01 	tst.w	r8, #1
 8008fba:	d1b4      	bne.n	8008f26 <_dtoa_r+0xa46>
 8008fbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fc0:	1e6a      	subs	r2, r5, #1
 8008fc2:	2b30      	cmp	r3, #48	; 0x30
 8008fc4:	f47f af0f 	bne.w	8008de6 <_dtoa_r+0x906>
 8008fc8:	4615      	mov	r5, r2
 8008fca:	e7f7      	b.n	8008fbc <_dtoa_r+0xadc>
 8008fcc:	9b06      	ldr	r3, [sp, #24]
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d105      	bne.n	8008fde <_dtoa_r+0xafe>
 8008fd2:	2331      	movs	r3, #49	; 0x31
 8008fd4:	9a06      	ldr	r2, [sp, #24]
 8008fd6:	f10a 0a01 	add.w	sl, sl, #1
 8008fda:	7013      	strb	r3, [r2, #0]
 8008fdc:	e703      	b.n	8008de6 <_dtoa_r+0x906>
 8008fde:	4615      	mov	r5, r2
 8008fe0:	e7a1      	b.n	8008f26 <_dtoa_r+0xa46>
 8008fe2:	4b17      	ldr	r3, [pc, #92]	; (8009040 <_dtoa_r+0xb60>)
 8008fe4:	f7ff bae1 	b.w	80085aa <_dtoa_r+0xca>
 8008fe8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f47f aabb 	bne.w	8008566 <_dtoa_r+0x86>
 8008ff0:	4b14      	ldr	r3, [pc, #80]	; (8009044 <_dtoa_r+0xb64>)
 8008ff2:	f7ff bada 	b.w	80085aa <_dtoa_r+0xca>
 8008ff6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	f77f ae3f 	ble.w	8008c7c <_dtoa_r+0x79c>
 8008ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009000:	9308      	str	r3, [sp, #32]
 8009002:	e653      	b.n	8008cac <_dtoa_r+0x7cc>
 8009004:	9b04      	ldr	r3, [sp, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	dc03      	bgt.n	8009012 <_dtoa_r+0xb32>
 800900a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800900c:	2b02      	cmp	r3, #2
 800900e:	f73f aed5 	bgt.w	8008dbc <_dtoa_r+0x8dc>
 8009012:	9d06      	ldr	r5, [sp, #24]
 8009014:	4631      	mov	r1, r6
 8009016:	4658      	mov	r0, fp
 8009018:	f7ff f9d4 	bl	80083c4 <quorem>
 800901c:	9b06      	ldr	r3, [sp, #24]
 800901e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009022:	f805 8b01 	strb.w	r8, [r5], #1
 8009026:	9a04      	ldr	r2, [sp, #16]
 8009028:	1aeb      	subs	r3, r5, r3
 800902a:	429a      	cmp	r2, r3
 800902c:	ddb5      	ble.n	8008f9a <_dtoa_r+0xaba>
 800902e:	4659      	mov	r1, fp
 8009030:	2300      	movs	r3, #0
 8009032:	220a      	movs	r2, #10
 8009034:	4620      	mov	r0, r4
 8009036:	f000 fa5f 	bl	80094f8 <__multadd>
 800903a:	4683      	mov	fp, r0
 800903c:	e7ea      	b.n	8009014 <_dtoa_r+0xb34>
 800903e:	bf00      	nop
 8009040:	0800c5cc 	.word	0x0800c5cc
 8009044:	0800c5f0 	.word	0x0800c5f0

08009048 <__sflush_r>:
 8009048:	898a      	ldrh	r2, [r1, #12]
 800904a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904e:	4605      	mov	r5, r0
 8009050:	0710      	lsls	r0, r2, #28
 8009052:	460c      	mov	r4, r1
 8009054:	d458      	bmi.n	8009108 <__sflush_r+0xc0>
 8009056:	684b      	ldr	r3, [r1, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	dc05      	bgt.n	8009068 <__sflush_r+0x20>
 800905c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	dc02      	bgt.n	8009068 <__sflush_r+0x20>
 8009062:	2000      	movs	r0, #0
 8009064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800906a:	2e00      	cmp	r6, #0
 800906c:	d0f9      	beq.n	8009062 <__sflush_r+0x1a>
 800906e:	2300      	movs	r3, #0
 8009070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009074:	682f      	ldr	r7, [r5, #0]
 8009076:	6a21      	ldr	r1, [r4, #32]
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	d032      	beq.n	80090e2 <__sflush_r+0x9a>
 800907c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	075a      	lsls	r2, r3, #29
 8009082:	d505      	bpl.n	8009090 <__sflush_r+0x48>
 8009084:	6863      	ldr	r3, [r4, #4]
 8009086:	1ac0      	subs	r0, r0, r3
 8009088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800908a:	b10b      	cbz	r3, 8009090 <__sflush_r+0x48>
 800908c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800908e:	1ac0      	subs	r0, r0, r3
 8009090:	2300      	movs	r3, #0
 8009092:	4602      	mov	r2, r0
 8009094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009096:	6a21      	ldr	r1, [r4, #32]
 8009098:	4628      	mov	r0, r5
 800909a:	47b0      	blx	r6
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	d106      	bne.n	80090b0 <__sflush_r+0x68>
 80090a2:	6829      	ldr	r1, [r5, #0]
 80090a4:	291d      	cmp	r1, #29
 80090a6:	d848      	bhi.n	800913a <__sflush_r+0xf2>
 80090a8:	4a29      	ldr	r2, [pc, #164]	; (8009150 <__sflush_r+0x108>)
 80090aa:	40ca      	lsrs	r2, r1
 80090ac:	07d6      	lsls	r6, r2, #31
 80090ae:	d544      	bpl.n	800913a <__sflush_r+0xf2>
 80090b0:	2200      	movs	r2, #0
 80090b2:	6062      	str	r2, [r4, #4]
 80090b4:	6922      	ldr	r2, [r4, #16]
 80090b6:	04d9      	lsls	r1, r3, #19
 80090b8:	6022      	str	r2, [r4, #0]
 80090ba:	d504      	bpl.n	80090c6 <__sflush_r+0x7e>
 80090bc:	1c42      	adds	r2, r0, #1
 80090be:	d101      	bne.n	80090c4 <__sflush_r+0x7c>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b903      	cbnz	r3, 80090c6 <__sflush_r+0x7e>
 80090c4:	6560      	str	r0, [r4, #84]	; 0x54
 80090c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090c8:	602f      	str	r7, [r5, #0]
 80090ca:	2900      	cmp	r1, #0
 80090cc:	d0c9      	beq.n	8009062 <__sflush_r+0x1a>
 80090ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d2:	4299      	cmp	r1, r3
 80090d4:	d002      	beq.n	80090dc <__sflush_r+0x94>
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 fcae 	bl	8009a38 <_free_r>
 80090dc:	2000      	movs	r0, #0
 80090de:	6360      	str	r0, [r4, #52]	; 0x34
 80090e0:	e7c0      	b.n	8009064 <__sflush_r+0x1c>
 80090e2:	2301      	movs	r3, #1
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b0      	blx	r6
 80090e8:	1c41      	adds	r1, r0, #1
 80090ea:	d1c8      	bne.n	800907e <__sflush_r+0x36>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0c5      	beq.n	800907e <__sflush_r+0x36>
 80090f2:	2b1d      	cmp	r3, #29
 80090f4:	d001      	beq.n	80090fa <__sflush_r+0xb2>
 80090f6:	2b16      	cmp	r3, #22
 80090f8:	d101      	bne.n	80090fe <__sflush_r+0xb6>
 80090fa:	602f      	str	r7, [r5, #0]
 80090fc:	e7b1      	b.n	8009062 <__sflush_r+0x1a>
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	e7ad      	b.n	8009064 <__sflush_r+0x1c>
 8009108:	690f      	ldr	r7, [r1, #16]
 800910a:	2f00      	cmp	r7, #0
 800910c:	d0a9      	beq.n	8009062 <__sflush_r+0x1a>
 800910e:	0793      	lsls	r3, r2, #30
 8009110:	bf18      	it	ne
 8009112:	2300      	movne	r3, #0
 8009114:	680e      	ldr	r6, [r1, #0]
 8009116:	bf08      	it	eq
 8009118:	694b      	ldreq	r3, [r1, #20]
 800911a:	eba6 0807 	sub.w	r8, r6, r7
 800911e:	600f      	str	r7, [r1, #0]
 8009120:	608b      	str	r3, [r1, #8]
 8009122:	f1b8 0f00 	cmp.w	r8, #0
 8009126:	dd9c      	ble.n	8009062 <__sflush_r+0x1a>
 8009128:	4643      	mov	r3, r8
 800912a:	463a      	mov	r2, r7
 800912c:	6a21      	ldr	r1, [r4, #32]
 800912e:	4628      	mov	r0, r5
 8009130:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009132:	47b0      	blx	r6
 8009134:	2800      	cmp	r0, #0
 8009136:	dc06      	bgt.n	8009146 <__sflush_r+0xfe>
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	f04f 30ff 	mov.w	r0, #4294967295
 8009144:	e78e      	b.n	8009064 <__sflush_r+0x1c>
 8009146:	4407      	add	r7, r0
 8009148:	eba8 0800 	sub.w	r8, r8, r0
 800914c:	e7e9      	b.n	8009122 <__sflush_r+0xda>
 800914e:	bf00      	nop
 8009150:	20400001 	.word	0x20400001

08009154 <_fflush_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	690b      	ldr	r3, [r1, #16]
 8009158:	4605      	mov	r5, r0
 800915a:	460c      	mov	r4, r1
 800915c:	b1db      	cbz	r3, 8009196 <_fflush_r+0x42>
 800915e:	b118      	cbz	r0, 8009168 <_fflush_r+0x14>
 8009160:	6983      	ldr	r3, [r0, #24]
 8009162:	b90b      	cbnz	r3, 8009168 <_fflush_r+0x14>
 8009164:	f000 f860 	bl	8009228 <__sinit>
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <_fflush_r+0x48>)
 800916a:	429c      	cmp	r4, r3
 800916c:	d109      	bne.n	8009182 <_fflush_r+0x2e>
 800916e:	686c      	ldr	r4, [r5, #4]
 8009170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009174:	b17b      	cbz	r3, 8009196 <_fflush_r+0x42>
 8009176:	4621      	mov	r1, r4
 8009178:	4628      	mov	r0, r5
 800917a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800917e:	f7ff bf63 	b.w	8009048 <__sflush_r>
 8009182:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <_fflush_r+0x4c>)
 8009184:	429c      	cmp	r4, r3
 8009186:	d101      	bne.n	800918c <_fflush_r+0x38>
 8009188:	68ac      	ldr	r4, [r5, #8]
 800918a:	e7f1      	b.n	8009170 <_fflush_r+0x1c>
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <_fflush_r+0x50>)
 800918e:	429c      	cmp	r4, r3
 8009190:	bf08      	it	eq
 8009192:	68ec      	ldreq	r4, [r5, #12]
 8009194:	e7ec      	b.n	8009170 <_fflush_r+0x1c>
 8009196:	2000      	movs	r0, #0
 8009198:	bd38      	pop	{r3, r4, r5, pc}
 800919a:	bf00      	nop
 800919c:	0800c620 	.word	0x0800c620
 80091a0:	0800c640 	.word	0x0800c640
 80091a4:	0800c600 	.word	0x0800c600

080091a8 <std>:
 80091a8:	2300      	movs	r3, #0
 80091aa:	b510      	push	{r4, lr}
 80091ac:	4604      	mov	r4, r0
 80091ae:	e9c0 3300 	strd	r3, r3, [r0]
 80091b2:	6083      	str	r3, [r0, #8]
 80091b4:	8181      	strh	r1, [r0, #12]
 80091b6:	6643      	str	r3, [r0, #100]	; 0x64
 80091b8:	81c2      	strh	r2, [r0, #14]
 80091ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091be:	6183      	str	r3, [r0, #24]
 80091c0:	4619      	mov	r1, r3
 80091c2:	2208      	movs	r2, #8
 80091c4:	305c      	adds	r0, #92	; 0x5c
 80091c6:	f7fe fb69 	bl	800789c <memset>
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <std+0x38>)
 80091cc:	6224      	str	r4, [r4, #32]
 80091ce:	6263      	str	r3, [r4, #36]	; 0x24
 80091d0:	4b04      	ldr	r3, [pc, #16]	; (80091e4 <std+0x3c>)
 80091d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80091d4:	4b04      	ldr	r3, [pc, #16]	; (80091e8 <std+0x40>)
 80091d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091d8:	4b04      	ldr	r3, [pc, #16]	; (80091ec <std+0x44>)
 80091da:	6323      	str	r3, [r4, #48]	; 0x30
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	bf00      	nop
 80091e0:	08009e21 	.word	0x08009e21
 80091e4:	08009e43 	.word	0x08009e43
 80091e8:	08009e7b 	.word	0x08009e7b
 80091ec:	08009e9f 	.word	0x08009e9f

080091f0 <_cleanup_r>:
 80091f0:	4901      	ldr	r1, [pc, #4]	; (80091f8 <_cleanup_r+0x8>)
 80091f2:	f000 b885 	b.w	8009300 <_fwalk_reent>
 80091f6:	bf00      	nop
 80091f8:	08009155 	.word	0x08009155

080091fc <__sfmoreglue>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	2568      	movs	r5, #104	; 0x68
 8009200:	1e4a      	subs	r2, r1, #1
 8009202:	4355      	muls	r5, r2
 8009204:	460e      	mov	r6, r1
 8009206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800920a:	f000 fc61 	bl	8009ad0 <_malloc_r>
 800920e:	4604      	mov	r4, r0
 8009210:	b140      	cbz	r0, 8009224 <__sfmoreglue+0x28>
 8009212:	2100      	movs	r1, #0
 8009214:	e9c0 1600 	strd	r1, r6, [r0]
 8009218:	300c      	adds	r0, #12
 800921a:	60a0      	str	r0, [r4, #8]
 800921c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009220:	f7fe fb3c 	bl	800789c <memset>
 8009224:	4620      	mov	r0, r4
 8009226:	bd70      	pop	{r4, r5, r6, pc}

08009228 <__sinit>:
 8009228:	6983      	ldr	r3, [r0, #24]
 800922a:	b510      	push	{r4, lr}
 800922c:	4604      	mov	r4, r0
 800922e:	bb33      	cbnz	r3, 800927e <__sinit+0x56>
 8009230:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009234:	6503      	str	r3, [r0, #80]	; 0x50
 8009236:	4b12      	ldr	r3, [pc, #72]	; (8009280 <__sinit+0x58>)
 8009238:	4a12      	ldr	r2, [pc, #72]	; (8009284 <__sinit+0x5c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6282      	str	r2, [r0, #40]	; 0x28
 800923e:	4298      	cmp	r0, r3
 8009240:	bf04      	itt	eq
 8009242:	2301      	moveq	r3, #1
 8009244:	6183      	streq	r3, [r0, #24]
 8009246:	f000 f81f 	bl	8009288 <__sfp>
 800924a:	6060      	str	r0, [r4, #4]
 800924c:	4620      	mov	r0, r4
 800924e:	f000 f81b 	bl	8009288 <__sfp>
 8009252:	60a0      	str	r0, [r4, #8]
 8009254:	4620      	mov	r0, r4
 8009256:	f000 f817 	bl	8009288 <__sfp>
 800925a:	2200      	movs	r2, #0
 800925c:	60e0      	str	r0, [r4, #12]
 800925e:	2104      	movs	r1, #4
 8009260:	6860      	ldr	r0, [r4, #4]
 8009262:	f7ff ffa1 	bl	80091a8 <std>
 8009266:	2201      	movs	r2, #1
 8009268:	2109      	movs	r1, #9
 800926a:	68a0      	ldr	r0, [r4, #8]
 800926c:	f7ff ff9c 	bl	80091a8 <std>
 8009270:	2202      	movs	r2, #2
 8009272:	2112      	movs	r1, #18
 8009274:	68e0      	ldr	r0, [r4, #12]
 8009276:	f7ff ff97 	bl	80091a8 <std>
 800927a:	2301      	movs	r3, #1
 800927c:	61a3      	str	r3, [r4, #24]
 800927e:	bd10      	pop	{r4, pc}
 8009280:	0800c5b8 	.word	0x0800c5b8
 8009284:	080091f1 	.word	0x080091f1

08009288 <__sfp>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <__sfp+0x70>)
 800928c:	4607      	mov	r7, r0
 800928e:	681e      	ldr	r6, [r3, #0]
 8009290:	69b3      	ldr	r3, [r6, #24]
 8009292:	b913      	cbnz	r3, 800929a <__sfp+0x12>
 8009294:	4630      	mov	r0, r6
 8009296:	f7ff ffc7 	bl	8009228 <__sinit>
 800929a:	3648      	adds	r6, #72	; 0x48
 800929c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	d503      	bpl.n	80092ac <__sfp+0x24>
 80092a4:	6833      	ldr	r3, [r6, #0]
 80092a6:	b133      	cbz	r3, 80092b6 <__sfp+0x2e>
 80092a8:	6836      	ldr	r6, [r6, #0]
 80092aa:	e7f7      	b.n	800929c <__sfp+0x14>
 80092ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092b0:	b16d      	cbz	r5, 80092ce <__sfp+0x46>
 80092b2:	3468      	adds	r4, #104	; 0x68
 80092b4:	e7f4      	b.n	80092a0 <__sfp+0x18>
 80092b6:	2104      	movs	r1, #4
 80092b8:	4638      	mov	r0, r7
 80092ba:	f7ff ff9f 	bl	80091fc <__sfmoreglue>
 80092be:	6030      	str	r0, [r6, #0]
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d1f1      	bne.n	80092a8 <__sfp+0x20>
 80092c4:	230c      	movs	r3, #12
 80092c6:	4604      	mov	r4, r0
 80092c8:	603b      	str	r3, [r7, #0]
 80092ca:	4620      	mov	r0, r4
 80092cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ce:	4b0b      	ldr	r3, [pc, #44]	; (80092fc <__sfp+0x74>)
 80092d0:	6665      	str	r5, [r4, #100]	; 0x64
 80092d2:	e9c4 5500 	strd	r5, r5, [r4]
 80092d6:	60a5      	str	r5, [r4, #8]
 80092d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80092dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80092e0:	2208      	movs	r2, #8
 80092e2:	4629      	mov	r1, r5
 80092e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092e8:	f7fe fad8 	bl	800789c <memset>
 80092ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092f4:	e7e9      	b.n	80092ca <__sfp+0x42>
 80092f6:	bf00      	nop
 80092f8:	0800c5b8 	.word	0x0800c5b8
 80092fc:	ffff0001 	.word	0xffff0001

08009300 <_fwalk_reent>:
 8009300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009304:	4680      	mov	r8, r0
 8009306:	4689      	mov	r9, r1
 8009308:	2600      	movs	r6, #0
 800930a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800930e:	b914      	cbnz	r4, 8009316 <_fwalk_reent+0x16>
 8009310:	4630      	mov	r0, r6
 8009312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009316:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800931a:	3f01      	subs	r7, #1
 800931c:	d501      	bpl.n	8009322 <_fwalk_reent+0x22>
 800931e:	6824      	ldr	r4, [r4, #0]
 8009320:	e7f5      	b.n	800930e <_fwalk_reent+0xe>
 8009322:	89ab      	ldrh	r3, [r5, #12]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d907      	bls.n	8009338 <_fwalk_reent+0x38>
 8009328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800932c:	3301      	adds	r3, #1
 800932e:	d003      	beq.n	8009338 <_fwalk_reent+0x38>
 8009330:	4629      	mov	r1, r5
 8009332:	4640      	mov	r0, r8
 8009334:	47c8      	blx	r9
 8009336:	4306      	orrs	r6, r0
 8009338:	3568      	adds	r5, #104	; 0x68
 800933a:	e7ee      	b.n	800931a <_fwalk_reent+0x1a>

0800933c <_localeconv_r>:
 800933c:	4b04      	ldr	r3, [pc, #16]	; (8009350 <_localeconv_r+0x14>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6a18      	ldr	r0, [r3, #32]
 8009342:	4b04      	ldr	r3, [pc, #16]	; (8009354 <_localeconv_r+0x18>)
 8009344:	2800      	cmp	r0, #0
 8009346:	bf08      	it	eq
 8009348:	4618      	moveq	r0, r3
 800934a:	30f0      	adds	r0, #240	; 0xf0
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000024 	.word	0x20000024
 8009354:	20000088 	.word	0x20000088

08009358 <__swhatbuf_r>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	460e      	mov	r6, r1
 800935c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009360:	b096      	sub	sp, #88	; 0x58
 8009362:	2900      	cmp	r1, #0
 8009364:	4614      	mov	r4, r2
 8009366:	461d      	mov	r5, r3
 8009368:	da07      	bge.n	800937a <__swhatbuf_r+0x22>
 800936a:	2300      	movs	r3, #0
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	89b3      	ldrh	r3, [r6, #12]
 8009370:	061a      	lsls	r2, r3, #24
 8009372:	d410      	bmi.n	8009396 <__swhatbuf_r+0x3e>
 8009374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009378:	e00e      	b.n	8009398 <__swhatbuf_r+0x40>
 800937a:	466a      	mov	r2, sp
 800937c:	f000 fdb6 	bl	8009eec <_fstat_r>
 8009380:	2800      	cmp	r0, #0
 8009382:	dbf2      	blt.n	800936a <__swhatbuf_r+0x12>
 8009384:	9a01      	ldr	r2, [sp, #4]
 8009386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800938a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800938e:	425a      	negs	r2, r3
 8009390:	415a      	adcs	r2, r3
 8009392:	602a      	str	r2, [r5, #0]
 8009394:	e7ee      	b.n	8009374 <__swhatbuf_r+0x1c>
 8009396:	2340      	movs	r3, #64	; 0x40
 8009398:	2000      	movs	r0, #0
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	b016      	add	sp, #88	; 0x58
 800939e:	bd70      	pop	{r4, r5, r6, pc}

080093a0 <__smakebuf_r>:
 80093a0:	898b      	ldrh	r3, [r1, #12]
 80093a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093a4:	079d      	lsls	r5, r3, #30
 80093a6:	4606      	mov	r6, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	d507      	bpl.n	80093bc <__smakebuf_r+0x1c>
 80093ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	6123      	str	r3, [r4, #16]
 80093b4:	2301      	movs	r3, #1
 80093b6:	6163      	str	r3, [r4, #20]
 80093b8:	b002      	add	sp, #8
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	ab01      	add	r3, sp, #4
 80093be:	466a      	mov	r2, sp
 80093c0:	f7ff ffca 	bl	8009358 <__swhatbuf_r>
 80093c4:	9900      	ldr	r1, [sp, #0]
 80093c6:	4605      	mov	r5, r0
 80093c8:	4630      	mov	r0, r6
 80093ca:	f000 fb81 	bl	8009ad0 <_malloc_r>
 80093ce:	b948      	cbnz	r0, 80093e4 <__smakebuf_r+0x44>
 80093d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d4:	059a      	lsls	r2, r3, #22
 80093d6:	d4ef      	bmi.n	80093b8 <__smakebuf_r+0x18>
 80093d8:	f023 0303 	bic.w	r3, r3, #3
 80093dc:	f043 0302 	orr.w	r3, r3, #2
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	e7e3      	b.n	80093ac <__smakebuf_r+0xc>
 80093e4:	4b0d      	ldr	r3, [pc, #52]	; (800941c <__smakebuf_r+0x7c>)
 80093e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	6020      	str	r0, [r4, #0]
 80093ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	9b00      	ldr	r3, [sp, #0]
 80093f4:	6120      	str	r0, [r4, #16]
 80093f6:	6163      	str	r3, [r4, #20]
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	b15b      	cbz	r3, 8009414 <__smakebuf_r+0x74>
 80093fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009400:	4630      	mov	r0, r6
 8009402:	f000 fd85 	bl	8009f10 <_isatty_r>
 8009406:	b128      	cbz	r0, 8009414 <__smakebuf_r+0x74>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	431d      	orrs	r5, r3
 8009418:	81a5      	strh	r5, [r4, #12]
 800941a:	e7cd      	b.n	80093b8 <__smakebuf_r+0x18>
 800941c:	080091f1 	.word	0x080091f1

08009420 <malloc>:
 8009420:	4b02      	ldr	r3, [pc, #8]	; (800942c <malloc+0xc>)
 8009422:	4601      	mov	r1, r0
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	f000 bb53 	b.w	8009ad0 <_malloc_r>
 800942a:	bf00      	nop
 800942c:	20000024 	.word	0x20000024

08009430 <memchr>:
 8009430:	b510      	push	{r4, lr}
 8009432:	b2c9      	uxtb	r1, r1
 8009434:	4402      	add	r2, r0
 8009436:	4290      	cmp	r0, r2
 8009438:	4603      	mov	r3, r0
 800943a:	d101      	bne.n	8009440 <memchr+0x10>
 800943c:	2300      	movs	r3, #0
 800943e:	e003      	b.n	8009448 <memchr+0x18>
 8009440:	781c      	ldrb	r4, [r3, #0]
 8009442:	3001      	adds	r0, #1
 8009444:	428c      	cmp	r4, r1
 8009446:	d1f6      	bne.n	8009436 <memchr+0x6>
 8009448:	4618      	mov	r0, r3
 800944a:	bd10      	pop	{r4, pc}

0800944c <memcpy>:
 800944c:	b510      	push	{r4, lr}
 800944e:	1e43      	subs	r3, r0, #1
 8009450:	440a      	add	r2, r1
 8009452:	4291      	cmp	r1, r2
 8009454:	d100      	bne.n	8009458 <memcpy+0xc>
 8009456:	bd10      	pop	{r4, pc}
 8009458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800945c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009460:	e7f7      	b.n	8009452 <memcpy+0x6>

08009462 <_Balloc>:
 8009462:	b570      	push	{r4, r5, r6, lr}
 8009464:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009466:	4604      	mov	r4, r0
 8009468:	460e      	mov	r6, r1
 800946a:	b93d      	cbnz	r5, 800947c <_Balloc+0x1a>
 800946c:	2010      	movs	r0, #16
 800946e:	f7ff ffd7 	bl	8009420 <malloc>
 8009472:	6260      	str	r0, [r4, #36]	; 0x24
 8009474:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009478:	6005      	str	r5, [r0, #0]
 800947a:	60c5      	str	r5, [r0, #12]
 800947c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800947e:	68eb      	ldr	r3, [r5, #12]
 8009480:	b183      	cbz	r3, 80094a4 <_Balloc+0x42>
 8009482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800948a:	b9b8      	cbnz	r0, 80094bc <_Balloc+0x5a>
 800948c:	2101      	movs	r1, #1
 800948e:	fa01 f506 	lsl.w	r5, r1, r6
 8009492:	1d6a      	adds	r2, r5, #5
 8009494:	0092      	lsls	r2, r2, #2
 8009496:	4620      	mov	r0, r4
 8009498:	f000 fabf 	bl	8009a1a <_calloc_r>
 800949c:	b160      	cbz	r0, 80094b8 <_Balloc+0x56>
 800949e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80094a2:	e00e      	b.n	80094c2 <_Balloc+0x60>
 80094a4:	2221      	movs	r2, #33	; 0x21
 80094a6:	2104      	movs	r1, #4
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fab6 	bl	8009a1a <_calloc_r>
 80094ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094b0:	60e8      	str	r0, [r5, #12]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e4      	bne.n	8009482 <_Balloc+0x20>
 80094b8:	2000      	movs	r0, #0
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	6802      	ldr	r2, [r0, #0]
 80094be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80094c2:	2300      	movs	r3, #0
 80094c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094c8:	e7f7      	b.n	80094ba <_Balloc+0x58>

080094ca <_Bfree>:
 80094ca:	b570      	push	{r4, r5, r6, lr}
 80094cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80094ce:	4606      	mov	r6, r0
 80094d0:	460d      	mov	r5, r1
 80094d2:	b93c      	cbnz	r4, 80094e4 <_Bfree+0x1a>
 80094d4:	2010      	movs	r0, #16
 80094d6:	f7ff ffa3 	bl	8009420 <malloc>
 80094da:	6270      	str	r0, [r6, #36]	; 0x24
 80094dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094e0:	6004      	str	r4, [r0, #0]
 80094e2:	60c4      	str	r4, [r0, #12]
 80094e4:	b13d      	cbz	r5, 80094f6 <_Bfree+0x2c>
 80094e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094e8:	686a      	ldr	r2, [r5, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094f0:	6029      	str	r1, [r5, #0]
 80094f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80094f6:	bd70      	pop	{r4, r5, r6, pc}

080094f8 <__multadd>:
 80094f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094fc:	461f      	mov	r7, r3
 80094fe:	4606      	mov	r6, r0
 8009500:	460c      	mov	r4, r1
 8009502:	2300      	movs	r3, #0
 8009504:	690d      	ldr	r5, [r1, #16]
 8009506:	f101 0c14 	add.w	ip, r1, #20
 800950a:	f8dc 0000 	ldr.w	r0, [ip]
 800950e:	3301      	adds	r3, #1
 8009510:	b281      	uxth	r1, r0
 8009512:	fb02 7101 	mla	r1, r2, r1, r7
 8009516:	0c00      	lsrs	r0, r0, #16
 8009518:	0c0f      	lsrs	r7, r1, #16
 800951a:	fb02 7000 	mla	r0, r2, r0, r7
 800951e:	b289      	uxth	r1, r1
 8009520:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009524:	429d      	cmp	r5, r3
 8009526:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800952a:	f84c 1b04 	str.w	r1, [ip], #4
 800952e:	dcec      	bgt.n	800950a <__multadd+0x12>
 8009530:	b1d7      	cbz	r7, 8009568 <__multadd+0x70>
 8009532:	68a3      	ldr	r3, [r4, #8]
 8009534:	42ab      	cmp	r3, r5
 8009536:	dc12      	bgt.n	800955e <__multadd+0x66>
 8009538:	6861      	ldr	r1, [r4, #4]
 800953a:	4630      	mov	r0, r6
 800953c:	3101      	adds	r1, #1
 800953e:	f7ff ff90 	bl	8009462 <_Balloc>
 8009542:	4680      	mov	r8, r0
 8009544:	6922      	ldr	r2, [r4, #16]
 8009546:	f104 010c 	add.w	r1, r4, #12
 800954a:	3202      	adds	r2, #2
 800954c:	0092      	lsls	r2, r2, #2
 800954e:	300c      	adds	r0, #12
 8009550:	f7ff ff7c 	bl	800944c <memcpy>
 8009554:	4621      	mov	r1, r4
 8009556:	4630      	mov	r0, r6
 8009558:	f7ff ffb7 	bl	80094ca <_Bfree>
 800955c:	4644      	mov	r4, r8
 800955e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009562:	3501      	adds	r5, #1
 8009564:	615f      	str	r7, [r3, #20]
 8009566:	6125      	str	r5, [r4, #16]
 8009568:	4620      	mov	r0, r4
 800956a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800956e <__hi0bits>:
 800956e:	0c02      	lsrs	r2, r0, #16
 8009570:	0412      	lsls	r2, r2, #16
 8009572:	4603      	mov	r3, r0
 8009574:	b9b2      	cbnz	r2, 80095a4 <__hi0bits+0x36>
 8009576:	0403      	lsls	r3, r0, #16
 8009578:	2010      	movs	r0, #16
 800957a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800957e:	bf04      	itt	eq
 8009580:	021b      	lsleq	r3, r3, #8
 8009582:	3008      	addeq	r0, #8
 8009584:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009588:	bf04      	itt	eq
 800958a:	011b      	lsleq	r3, r3, #4
 800958c:	3004      	addeq	r0, #4
 800958e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009592:	bf04      	itt	eq
 8009594:	009b      	lsleq	r3, r3, #2
 8009596:	3002      	addeq	r0, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	db06      	blt.n	80095aa <__hi0bits+0x3c>
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	d503      	bpl.n	80095a8 <__hi0bits+0x3a>
 80095a0:	3001      	adds	r0, #1
 80095a2:	4770      	bx	lr
 80095a4:	2000      	movs	r0, #0
 80095a6:	e7e8      	b.n	800957a <__hi0bits+0xc>
 80095a8:	2020      	movs	r0, #32
 80095aa:	4770      	bx	lr

080095ac <__lo0bits>:
 80095ac:	6803      	ldr	r3, [r0, #0]
 80095ae:	4601      	mov	r1, r0
 80095b0:	f013 0207 	ands.w	r2, r3, #7
 80095b4:	d00b      	beq.n	80095ce <__lo0bits+0x22>
 80095b6:	07da      	lsls	r2, r3, #31
 80095b8:	d423      	bmi.n	8009602 <__lo0bits+0x56>
 80095ba:	0798      	lsls	r0, r3, #30
 80095bc:	bf49      	itett	mi
 80095be:	085b      	lsrmi	r3, r3, #1
 80095c0:	089b      	lsrpl	r3, r3, #2
 80095c2:	2001      	movmi	r0, #1
 80095c4:	600b      	strmi	r3, [r1, #0]
 80095c6:	bf5c      	itt	pl
 80095c8:	600b      	strpl	r3, [r1, #0]
 80095ca:	2002      	movpl	r0, #2
 80095cc:	4770      	bx	lr
 80095ce:	b298      	uxth	r0, r3
 80095d0:	b9a8      	cbnz	r0, 80095fe <__lo0bits+0x52>
 80095d2:	2010      	movs	r0, #16
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095da:	bf04      	itt	eq
 80095dc:	0a1b      	lsreq	r3, r3, #8
 80095de:	3008      	addeq	r0, #8
 80095e0:	071a      	lsls	r2, r3, #28
 80095e2:	bf04      	itt	eq
 80095e4:	091b      	lsreq	r3, r3, #4
 80095e6:	3004      	addeq	r0, #4
 80095e8:	079a      	lsls	r2, r3, #30
 80095ea:	bf04      	itt	eq
 80095ec:	089b      	lsreq	r3, r3, #2
 80095ee:	3002      	addeq	r0, #2
 80095f0:	07da      	lsls	r2, r3, #31
 80095f2:	d402      	bmi.n	80095fa <__lo0bits+0x4e>
 80095f4:	085b      	lsrs	r3, r3, #1
 80095f6:	d006      	beq.n	8009606 <__lo0bits+0x5a>
 80095f8:	3001      	adds	r0, #1
 80095fa:	600b      	str	r3, [r1, #0]
 80095fc:	4770      	bx	lr
 80095fe:	4610      	mov	r0, r2
 8009600:	e7e9      	b.n	80095d6 <__lo0bits+0x2a>
 8009602:	2000      	movs	r0, #0
 8009604:	4770      	bx	lr
 8009606:	2020      	movs	r0, #32
 8009608:	4770      	bx	lr

0800960a <__i2b>:
 800960a:	b510      	push	{r4, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	2101      	movs	r1, #1
 8009610:	f7ff ff27 	bl	8009462 <_Balloc>
 8009614:	2201      	movs	r2, #1
 8009616:	6144      	str	r4, [r0, #20]
 8009618:	6102      	str	r2, [r0, #16]
 800961a:	bd10      	pop	{r4, pc}

0800961c <__multiply>:
 800961c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	4614      	mov	r4, r2
 8009622:	690a      	ldr	r2, [r1, #16]
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	4688      	mov	r8, r1
 8009628:	429a      	cmp	r2, r3
 800962a:	bfbe      	ittt	lt
 800962c:	460b      	movlt	r3, r1
 800962e:	46a0      	movlt	r8, r4
 8009630:	461c      	movlt	r4, r3
 8009632:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009636:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800963a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800963e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009642:	eb07 0609 	add.w	r6, r7, r9
 8009646:	42b3      	cmp	r3, r6
 8009648:	bfb8      	it	lt
 800964a:	3101      	addlt	r1, #1
 800964c:	f7ff ff09 	bl	8009462 <_Balloc>
 8009650:	f100 0514 	add.w	r5, r0, #20
 8009654:	462b      	mov	r3, r5
 8009656:	2200      	movs	r2, #0
 8009658:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800965c:	4573      	cmp	r3, lr
 800965e:	d316      	bcc.n	800968e <__multiply+0x72>
 8009660:	f104 0214 	add.w	r2, r4, #20
 8009664:	f108 0114 	add.w	r1, r8, #20
 8009668:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800966c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	9201      	str	r2, [sp, #4]
 8009676:	4293      	cmp	r3, r2
 8009678:	d80c      	bhi.n	8009694 <__multiply+0x78>
 800967a:	2e00      	cmp	r6, #0
 800967c:	dd03      	ble.n	8009686 <__multiply+0x6a>
 800967e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009682:	2b00      	cmp	r3, #0
 8009684:	d05d      	beq.n	8009742 <__multiply+0x126>
 8009686:	6106      	str	r6, [r0, #16]
 8009688:	b003      	add	sp, #12
 800968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968e:	f843 2b04 	str.w	r2, [r3], #4
 8009692:	e7e3      	b.n	800965c <__multiply+0x40>
 8009694:	f8b2 b000 	ldrh.w	fp, [r2]
 8009698:	f1bb 0f00 	cmp.w	fp, #0
 800969c:	d023      	beq.n	80096e6 <__multiply+0xca>
 800969e:	4689      	mov	r9, r1
 80096a0:	46ac      	mov	ip, r5
 80096a2:	f04f 0800 	mov.w	r8, #0
 80096a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80096aa:	f8dc a000 	ldr.w	sl, [ip]
 80096ae:	b2a3      	uxth	r3, r4
 80096b0:	fa1f fa8a 	uxth.w	sl, sl
 80096b4:	fb0b a303 	mla	r3, fp, r3, sl
 80096b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80096bc:	f8dc 4000 	ldr.w	r4, [ip]
 80096c0:	4443      	add	r3, r8
 80096c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80096c6:	fb0b 840a 	mla	r4, fp, sl, r8
 80096ca:	46e2      	mov	sl, ip
 80096cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096d6:	454f      	cmp	r7, r9
 80096d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80096dc:	f84a 3b04 	str.w	r3, [sl], #4
 80096e0:	d82b      	bhi.n	800973a <__multiply+0x11e>
 80096e2:	f8cc 8004 	str.w	r8, [ip, #4]
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	3204      	adds	r2, #4
 80096ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80096ee:	f1ba 0f00 	cmp.w	sl, #0
 80096f2:	d020      	beq.n	8009736 <__multiply+0x11a>
 80096f4:	4689      	mov	r9, r1
 80096f6:	46a8      	mov	r8, r5
 80096f8:	f04f 0b00 	mov.w	fp, #0
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	f8b9 c000 	ldrh.w	ip, [r9]
 8009702:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009706:	b29b      	uxth	r3, r3
 8009708:	fb0a 440c 	mla	r4, sl, ip, r4
 800970c:	46c4      	mov	ip, r8
 800970e:	445c      	add	r4, fp
 8009710:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009714:	f84c 3b04 	str.w	r3, [ip], #4
 8009718:	f859 3b04 	ldr.w	r3, [r9], #4
 800971c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009720:	0c1b      	lsrs	r3, r3, #16
 8009722:	fb0a b303 	mla	r3, sl, r3, fp
 8009726:	454f      	cmp	r7, r9
 8009728:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800972c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009730:	d805      	bhi.n	800973e <__multiply+0x122>
 8009732:	f8c8 3004 	str.w	r3, [r8, #4]
 8009736:	3504      	adds	r5, #4
 8009738:	e79b      	b.n	8009672 <__multiply+0x56>
 800973a:	46d4      	mov	ip, sl
 800973c:	e7b3      	b.n	80096a6 <__multiply+0x8a>
 800973e:	46e0      	mov	r8, ip
 8009740:	e7dd      	b.n	80096fe <__multiply+0xe2>
 8009742:	3e01      	subs	r6, #1
 8009744:	e799      	b.n	800967a <__multiply+0x5e>
	...

08009748 <__pow5mult>:
 8009748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800974c:	4615      	mov	r5, r2
 800974e:	f012 0203 	ands.w	r2, r2, #3
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	d007      	beq.n	8009768 <__pow5mult+0x20>
 8009758:	4c21      	ldr	r4, [pc, #132]	; (80097e0 <__pow5mult+0x98>)
 800975a:	3a01      	subs	r2, #1
 800975c:	2300      	movs	r3, #0
 800975e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009762:	f7ff fec9 	bl	80094f8 <__multadd>
 8009766:	4607      	mov	r7, r0
 8009768:	10ad      	asrs	r5, r5, #2
 800976a:	d035      	beq.n	80097d8 <__pow5mult+0x90>
 800976c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800976e:	b93c      	cbnz	r4, 8009780 <__pow5mult+0x38>
 8009770:	2010      	movs	r0, #16
 8009772:	f7ff fe55 	bl	8009420 <malloc>
 8009776:	6270      	str	r0, [r6, #36]	; 0x24
 8009778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800977c:	6004      	str	r4, [r0, #0]
 800977e:	60c4      	str	r4, [r0, #12]
 8009780:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009788:	b94c      	cbnz	r4, 800979e <__pow5mult+0x56>
 800978a:	f240 2171 	movw	r1, #625	; 0x271
 800978e:	4630      	mov	r0, r6
 8009790:	f7ff ff3b 	bl	800960a <__i2b>
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	f8c8 0008 	str.w	r0, [r8, #8]
 800979c:	6003      	str	r3, [r0, #0]
 800979e:	f04f 0800 	mov.w	r8, #0
 80097a2:	07eb      	lsls	r3, r5, #31
 80097a4:	d50a      	bpl.n	80097bc <__pow5mult+0x74>
 80097a6:	4639      	mov	r1, r7
 80097a8:	4622      	mov	r2, r4
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7ff ff36 	bl	800961c <__multiply>
 80097b0:	4681      	mov	r9, r0
 80097b2:	4639      	mov	r1, r7
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7ff fe88 	bl	80094ca <_Bfree>
 80097ba:	464f      	mov	r7, r9
 80097bc:	106d      	asrs	r5, r5, #1
 80097be:	d00b      	beq.n	80097d8 <__pow5mult+0x90>
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	b938      	cbnz	r0, 80097d4 <__pow5mult+0x8c>
 80097c4:	4622      	mov	r2, r4
 80097c6:	4621      	mov	r1, r4
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7ff ff27 	bl	800961c <__multiply>
 80097ce:	6020      	str	r0, [r4, #0]
 80097d0:	f8c0 8000 	str.w	r8, [r0]
 80097d4:	4604      	mov	r4, r0
 80097d6:	e7e4      	b.n	80097a2 <__pow5mult+0x5a>
 80097d8:	4638      	mov	r0, r7
 80097da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097de:	bf00      	nop
 80097e0:	0800c750 	.word	0x0800c750

080097e4 <__lshift>:
 80097e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e8:	460c      	mov	r4, r1
 80097ea:	4607      	mov	r7, r0
 80097ec:	4616      	mov	r6, r2
 80097ee:	6923      	ldr	r3, [r4, #16]
 80097f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097f4:	eb0a 0903 	add.w	r9, sl, r3
 80097f8:	6849      	ldr	r1, [r1, #4]
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	f109 0501 	add.w	r5, r9, #1
 8009800:	42ab      	cmp	r3, r5
 8009802:	db32      	blt.n	800986a <__lshift+0x86>
 8009804:	4638      	mov	r0, r7
 8009806:	f7ff fe2c 	bl	8009462 <_Balloc>
 800980a:	2300      	movs	r3, #0
 800980c:	4680      	mov	r8, r0
 800980e:	461a      	mov	r2, r3
 8009810:	f100 0114 	add.w	r1, r0, #20
 8009814:	4553      	cmp	r3, sl
 8009816:	db2b      	blt.n	8009870 <__lshift+0x8c>
 8009818:	6920      	ldr	r0, [r4, #16]
 800981a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800981e:	f104 0314 	add.w	r3, r4, #20
 8009822:	f016 021f 	ands.w	r2, r6, #31
 8009826:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800982a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800982e:	d025      	beq.n	800987c <__lshift+0x98>
 8009830:	2000      	movs	r0, #0
 8009832:	f1c2 0e20 	rsb	lr, r2, #32
 8009836:	468a      	mov	sl, r1
 8009838:	681e      	ldr	r6, [r3, #0]
 800983a:	4096      	lsls	r6, r2
 800983c:	4330      	orrs	r0, r6
 800983e:	f84a 0b04 	str.w	r0, [sl], #4
 8009842:	f853 0b04 	ldr.w	r0, [r3], #4
 8009846:	459c      	cmp	ip, r3
 8009848:	fa20 f00e 	lsr.w	r0, r0, lr
 800984c:	d814      	bhi.n	8009878 <__lshift+0x94>
 800984e:	6048      	str	r0, [r1, #4]
 8009850:	b108      	cbz	r0, 8009856 <__lshift+0x72>
 8009852:	f109 0502 	add.w	r5, r9, #2
 8009856:	3d01      	subs	r5, #1
 8009858:	4638      	mov	r0, r7
 800985a:	f8c8 5010 	str.w	r5, [r8, #16]
 800985e:	4621      	mov	r1, r4
 8009860:	f7ff fe33 	bl	80094ca <_Bfree>
 8009864:	4640      	mov	r0, r8
 8009866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986a:	3101      	adds	r1, #1
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	e7c7      	b.n	8009800 <__lshift+0x1c>
 8009870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009874:	3301      	adds	r3, #1
 8009876:	e7cd      	b.n	8009814 <__lshift+0x30>
 8009878:	4651      	mov	r1, sl
 800987a:	e7dc      	b.n	8009836 <__lshift+0x52>
 800987c:	3904      	subs	r1, #4
 800987e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009882:	459c      	cmp	ip, r3
 8009884:	f841 2f04 	str.w	r2, [r1, #4]!
 8009888:	d8f9      	bhi.n	800987e <__lshift+0x9a>
 800988a:	e7e4      	b.n	8009856 <__lshift+0x72>

0800988c <__mcmp>:
 800988c:	6903      	ldr	r3, [r0, #16]
 800988e:	690a      	ldr	r2, [r1, #16]
 8009890:	b530      	push	{r4, r5, lr}
 8009892:	1a9b      	subs	r3, r3, r2
 8009894:	d10c      	bne.n	80098b0 <__mcmp+0x24>
 8009896:	0092      	lsls	r2, r2, #2
 8009898:	3014      	adds	r0, #20
 800989a:	3114      	adds	r1, #20
 800989c:	1884      	adds	r4, r0, r2
 800989e:	4411      	add	r1, r2
 80098a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098a8:	4295      	cmp	r5, r2
 80098aa:	d003      	beq.n	80098b4 <__mcmp+0x28>
 80098ac:	d305      	bcc.n	80098ba <__mcmp+0x2e>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4618      	mov	r0, r3
 80098b2:	bd30      	pop	{r4, r5, pc}
 80098b4:	42a0      	cmp	r0, r4
 80098b6:	d3f3      	bcc.n	80098a0 <__mcmp+0x14>
 80098b8:	e7fa      	b.n	80098b0 <__mcmp+0x24>
 80098ba:	f04f 33ff 	mov.w	r3, #4294967295
 80098be:	e7f7      	b.n	80098b0 <__mcmp+0x24>

080098c0 <__mdiff>:
 80098c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	460d      	mov	r5, r1
 80098c6:	4607      	mov	r7, r0
 80098c8:	4611      	mov	r1, r2
 80098ca:	4628      	mov	r0, r5
 80098cc:	4614      	mov	r4, r2
 80098ce:	f7ff ffdd 	bl	800988c <__mcmp>
 80098d2:	1e06      	subs	r6, r0, #0
 80098d4:	d108      	bne.n	80098e8 <__mdiff+0x28>
 80098d6:	4631      	mov	r1, r6
 80098d8:	4638      	mov	r0, r7
 80098da:	f7ff fdc2 	bl	8009462 <_Balloc>
 80098de:	2301      	movs	r3, #1
 80098e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80098e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e8:	bfa4      	itt	ge
 80098ea:	4623      	movge	r3, r4
 80098ec:	462c      	movge	r4, r5
 80098ee:	4638      	mov	r0, r7
 80098f0:	6861      	ldr	r1, [r4, #4]
 80098f2:	bfa6      	itte	ge
 80098f4:	461d      	movge	r5, r3
 80098f6:	2600      	movge	r6, #0
 80098f8:	2601      	movlt	r6, #1
 80098fa:	f7ff fdb2 	bl	8009462 <_Balloc>
 80098fe:	f04f 0e00 	mov.w	lr, #0
 8009902:	60c6      	str	r6, [r0, #12]
 8009904:	692b      	ldr	r3, [r5, #16]
 8009906:	6926      	ldr	r6, [r4, #16]
 8009908:	f104 0214 	add.w	r2, r4, #20
 800990c:	f105 0914 	add.w	r9, r5, #20
 8009910:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009914:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009918:	f100 0114 	add.w	r1, r0, #20
 800991c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009920:	f859 5b04 	ldr.w	r5, [r9], #4
 8009924:	fa1f f38a 	uxth.w	r3, sl
 8009928:	4473      	add	r3, lr
 800992a:	b2ac      	uxth	r4, r5
 800992c:	1b1b      	subs	r3, r3, r4
 800992e:	0c2c      	lsrs	r4, r5, #16
 8009930:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009934:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009938:	b29b      	uxth	r3, r3
 800993a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800993e:	45c8      	cmp	r8, r9
 8009940:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009944:	4694      	mov	ip, r2
 8009946:	f841 4b04 	str.w	r4, [r1], #4
 800994a:	d8e7      	bhi.n	800991c <__mdiff+0x5c>
 800994c:	45bc      	cmp	ip, r7
 800994e:	d304      	bcc.n	800995a <__mdiff+0x9a>
 8009950:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009954:	b183      	cbz	r3, 8009978 <__mdiff+0xb8>
 8009956:	6106      	str	r6, [r0, #16]
 8009958:	e7c4      	b.n	80098e4 <__mdiff+0x24>
 800995a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800995e:	b2a2      	uxth	r2, r4
 8009960:	4472      	add	r2, lr
 8009962:	1413      	asrs	r3, r2, #16
 8009964:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009968:	b292      	uxth	r2, r2
 800996a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800996e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009972:	f841 2b04 	str.w	r2, [r1], #4
 8009976:	e7e9      	b.n	800994c <__mdiff+0x8c>
 8009978:	3e01      	subs	r6, #1
 800997a:	e7e9      	b.n	8009950 <__mdiff+0x90>

0800997c <__d2b>:
 800997c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009980:	461c      	mov	r4, r3
 8009982:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009986:	2101      	movs	r1, #1
 8009988:	4690      	mov	r8, r2
 800998a:	f7ff fd6a 	bl	8009462 <_Balloc>
 800998e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009992:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009996:	4607      	mov	r7, r0
 8009998:	bb34      	cbnz	r4, 80099e8 <__d2b+0x6c>
 800999a:	9201      	str	r2, [sp, #4]
 800999c:	f1b8 0200 	subs.w	r2, r8, #0
 80099a0:	d027      	beq.n	80099f2 <__d2b+0x76>
 80099a2:	a802      	add	r0, sp, #8
 80099a4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80099a8:	f7ff fe00 	bl	80095ac <__lo0bits>
 80099ac:	9900      	ldr	r1, [sp, #0]
 80099ae:	b1f0      	cbz	r0, 80099ee <__d2b+0x72>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	f1c0 0320 	rsb	r3, r0, #32
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	430b      	orrs	r3, r1
 80099bc:	40c2      	lsrs	r2, r0
 80099be:	617b      	str	r3, [r7, #20]
 80099c0:	9201      	str	r2, [sp, #4]
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	bf14      	ite	ne
 80099c8:	2102      	movne	r1, #2
 80099ca:	2101      	moveq	r1, #1
 80099cc:	61bb      	str	r3, [r7, #24]
 80099ce:	6139      	str	r1, [r7, #16]
 80099d0:	b1c4      	cbz	r4, 8009a04 <__d2b+0x88>
 80099d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099d6:	4404      	add	r4, r0
 80099d8:	6034      	str	r4, [r6, #0]
 80099da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099de:	6028      	str	r0, [r5, #0]
 80099e0:	4638      	mov	r0, r7
 80099e2:	b002      	add	sp, #8
 80099e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80099ec:	e7d5      	b.n	800999a <__d2b+0x1e>
 80099ee:	6179      	str	r1, [r7, #20]
 80099f0:	e7e7      	b.n	80099c2 <__d2b+0x46>
 80099f2:	a801      	add	r0, sp, #4
 80099f4:	f7ff fdda 	bl	80095ac <__lo0bits>
 80099f8:	2101      	movs	r1, #1
 80099fa:	9b01      	ldr	r3, [sp, #4]
 80099fc:	6139      	str	r1, [r7, #16]
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	3020      	adds	r0, #32
 8009a02:	e7e5      	b.n	80099d0 <__d2b+0x54>
 8009a04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a08:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009a0c:	6030      	str	r0, [r6, #0]
 8009a0e:	6918      	ldr	r0, [r3, #16]
 8009a10:	f7ff fdad 	bl	800956e <__hi0bits>
 8009a14:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a18:	e7e1      	b.n	80099de <__d2b+0x62>

08009a1a <_calloc_r>:
 8009a1a:	b538      	push	{r3, r4, r5, lr}
 8009a1c:	fb02 f401 	mul.w	r4, r2, r1
 8009a20:	4621      	mov	r1, r4
 8009a22:	f000 f855 	bl	8009ad0 <_malloc_r>
 8009a26:	4605      	mov	r5, r0
 8009a28:	b118      	cbz	r0, 8009a32 <_calloc_r+0x18>
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	f7fd ff35 	bl	800789c <memset>
 8009a32:	4628      	mov	r0, r5
 8009a34:	bd38      	pop	{r3, r4, r5, pc}
	...

08009a38 <_free_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	2900      	cmp	r1, #0
 8009a3e:	d043      	beq.n	8009ac8 <_free_r+0x90>
 8009a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a44:	1f0c      	subs	r4, r1, #4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bfb8      	it	lt
 8009a4a:	18e4      	addlt	r4, r4, r3
 8009a4c:	f000 fa94 	bl	8009f78 <__malloc_lock>
 8009a50:	4a1e      	ldr	r2, [pc, #120]	; (8009acc <_free_r+0x94>)
 8009a52:	6813      	ldr	r3, [r2, #0]
 8009a54:	4610      	mov	r0, r2
 8009a56:	b933      	cbnz	r3, 8009a66 <_free_r+0x2e>
 8009a58:	6063      	str	r3, [r4, #4]
 8009a5a:	6014      	str	r4, [r2, #0]
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a62:	f000 ba8a 	b.w	8009f7a <__malloc_unlock>
 8009a66:	42a3      	cmp	r3, r4
 8009a68:	d90b      	bls.n	8009a82 <_free_r+0x4a>
 8009a6a:	6821      	ldr	r1, [r4, #0]
 8009a6c:	1862      	adds	r2, r4, r1
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	bf01      	itttt	eq
 8009a72:	681a      	ldreq	r2, [r3, #0]
 8009a74:	685b      	ldreq	r3, [r3, #4]
 8009a76:	1852      	addeq	r2, r2, r1
 8009a78:	6022      	streq	r2, [r4, #0]
 8009a7a:	6063      	str	r3, [r4, #4]
 8009a7c:	6004      	str	r4, [r0, #0]
 8009a7e:	e7ed      	b.n	8009a5c <_free_r+0x24>
 8009a80:	4613      	mov	r3, r2
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	b10a      	cbz	r2, 8009a8a <_free_r+0x52>
 8009a86:	42a2      	cmp	r2, r4
 8009a88:	d9fa      	bls.n	8009a80 <_free_r+0x48>
 8009a8a:	6819      	ldr	r1, [r3, #0]
 8009a8c:	1858      	adds	r0, r3, r1
 8009a8e:	42a0      	cmp	r0, r4
 8009a90:	d10b      	bne.n	8009aaa <_free_r+0x72>
 8009a92:	6820      	ldr	r0, [r4, #0]
 8009a94:	4401      	add	r1, r0
 8009a96:	1858      	adds	r0, r3, r1
 8009a98:	4282      	cmp	r2, r0
 8009a9a:	6019      	str	r1, [r3, #0]
 8009a9c:	d1de      	bne.n	8009a5c <_free_r+0x24>
 8009a9e:	6810      	ldr	r0, [r2, #0]
 8009aa0:	6852      	ldr	r2, [r2, #4]
 8009aa2:	4401      	add	r1, r0
 8009aa4:	6019      	str	r1, [r3, #0]
 8009aa6:	605a      	str	r2, [r3, #4]
 8009aa8:	e7d8      	b.n	8009a5c <_free_r+0x24>
 8009aaa:	d902      	bls.n	8009ab2 <_free_r+0x7a>
 8009aac:	230c      	movs	r3, #12
 8009aae:	602b      	str	r3, [r5, #0]
 8009ab0:	e7d4      	b.n	8009a5c <_free_r+0x24>
 8009ab2:	6820      	ldr	r0, [r4, #0]
 8009ab4:	1821      	adds	r1, r4, r0
 8009ab6:	428a      	cmp	r2, r1
 8009ab8:	bf01      	itttt	eq
 8009aba:	6811      	ldreq	r1, [r2, #0]
 8009abc:	6852      	ldreq	r2, [r2, #4]
 8009abe:	1809      	addeq	r1, r1, r0
 8009ac0:	6021      	streq	r1, [r4, #0]
 8009ac2:	6062      	str	r2, [r4, #4]
 8009ac4:	605c      	str	r4, [r3, #4]
 8009ac6:	e7c9      	b.n	8009a5c <_free_r+0x24>
 8009ac8:	bd38      	pop	{r3, r4, r5, pc}
 8009aca:	bf00      	nop
 8009acc:	20000800 	.word	0x20000800

08009ad0 <_malloc_r>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	1ccd      	adds	r5, r1, #3
 8009ad4:	f025 0503 	bic.w	r5, r5, #3
 8009ad8:	3508      	adds	r5, #8
 8009ada:	2d0c      	cmp	r5, #12
 8009adc:	bf38      	it	cc
 8009ade:	250c      	movcc	r5, #12
 8009ae0:	2d00      	cmp	r5, #0
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	db01      	blt.n	8009aea <_malloc_r+0x1a>
 8009ae6:	42a9      	cmp	r1, r5
 8009ae8:	d903      	bls.n	8009af2 <_malloc_r+0x22>
 8009aea:	230c      	movs	r3, #12
 8009aec:	6033      	str	r3, [r6, #0]
 8009aee:	2000      	movs	r0, #0
 8009af0:	bd70      	pop	{r4, r5, r6, pc}
 8009af2:	f000 fa41 	bl	8009f78 <__malloc_lock>
 8009af6:	4a21      	ldr	r2, [pc, #132]	; (8009b7c <_malloc_r+0xac>)
 8009af8:	6814      	ldr	r4, [r2, #0]
 8009afa:	4621      	mov	r1, r4
 8009afc:	b991      	cbnz	r1, 8009b24 <_malloc_r+0x54>
 8009afe:	4c20      	ldr	r4, [pc, #128]	; (8009b80 <_malloc_r+0xb0>)
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	b91b      	cbnz	r3, 8009b0c <_malloc_r+0x3c>
 8009b04:	4630      	mov	r0, r6
 8009b06:	f000 f97b 	bl	8009e00 <_sbrk_r>
 8009b0a:	6020      	str	r0, [r4, #0]
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f000 f976 	bl	8009e00 <_sbrk_r>
 8009b14:	1c43      	adds	r3, r0, #1
 8009b16:	d124      	bne.n	8009b62 <_malloc_r+0x92>
 8009b18:	230c      	movs	r3, #12
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	6033      	str	r3, [r6, #0]
 8009b1e:	f000 fa2c 	bl	8009f7a <__malloc_unlock>
 8009b22:	e7e4      	b.n	8009aee <_malloc_r+0x1e>
 8009b24:	680b      	ldr	r3, [r1, #0]
 8009b26:	1b5b      	subs	r3, r3, r5
 8009b28:	d418      	bmi.n	8009b5c <_malloc_r+0x8c>
 8009b2a:	2b0b      	cmp	r3, #11
 8009b2c:	d90f      	bls.n	8009b4e <_malloc_r+0x7e>
 8009b2e:	600b      	str	r3, [r1, #0]
 8009b30:	18cc      	adds	r4, r1, r3
 8009b32:	50cd      	str	r5, [r1, r3]
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 fa20 	bl	8009f7a <__malloc_unlock>
 8009b3a:	f104 000b 	add.w	r0, r4, #11
 8009b3e:	1d23      	adds	r3, r4, #4
 8009b40:	f020 0007 	bic.w	r0, r0, #7
 8009b44:	1ac3      	subs	r3, r0, r3
 8009b46:	d0d3      	beq.n	8009af0 <_malloc_r+0x20>
 8009b48:	425a      	negs	r2, r3
 8009b4a:	50e2      	str	r2, [r4, r3]
 8009b4c:	e7d0      	b.n	8009af0 <_malloc_r+0x20>
 8009b4e:	684b      	ldr	r3, [r1, #4]
 8009b50:	428c      	cmp	r4, r1
 8009b52:	bf16      	itet	ne
 8009b54:	6063      	strne	r3, [r4, #4]
 8009b56:	6013      	streq	r3, [r2, #0]
 8009b58:	460c      	movne	r4, r1
 8009b5a:	e7eb      	b.n	8009b34 <_malloc_r+0x64>
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	6849      	ldr	r1, [r1, #4]
 8009b60:	e7cc      	b.n	8009afc <_malloc_r+0x2c>
 8009b62:	1cc4      	adds	r4, r0, #3
 8009b64:	f024 0403 	bic.w	r4, r4, #3
 8009b68:	42a0      	cmp	r0, r4
 8009b6a:	d005      	beq.n	8009b78 <_malloc_r+0xa8>
 8009b6c:	1a21      	subs	r1, r4, r0
 8009b6e:	4630      	mov	r0, r6
 8009b70:	f000 f946 	bl	8009e00 <_sbrk_r>
 8009b74:	3001      	adds	r0, #1
 8009b76:	d0cf      	beq.n	8009b18 <_malloc_r+0x48>
 8009b78:	6025      	str	r5, [r4, #0]
 8009b7a:	e7db      	b.n	8009b34 <_malloc_r+0x64>
 8009b7c:	20000800 	.word	0x20000800
 8009b80:	20000804 	.word	0x20000804

08009b84 <__sfputc_r>:
 8009b84:	6893      	ldr	r3, [r2, #8]
 8009b86:	b410      	push	{r4}
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	6093      	str	r3, [r2, #8]
 8009b8e:	da07      	bge.n	8009ba0 <__sfputc_r+0x1c>
 8009b90:	6994      	ldr	r4, [r2, #24]
 8009b92:	42a3      	cmp	r3, r4
 8009b94:	db01      	blt.n	8009b9a <__sfputc_r+0x16>
 8009b96:	290a      	cmp	r1, #10
 8009b98:	d102      	bne.n	8009ba0 <__sfputc_r+0x1c>
 8009b9a:	bc10      	pop	{r4}
 8009b9c:	f7fe bb52 	b.w	8008244 <__swbuf_r>
 8009ba0:	6813      	ldr	r3, [r2, #0]
 8009ba2:	1c58      	adds	r0, r3, #1
 8009ba4:	6010      	str	r0, [r2, #0]
 8009ba6:	7019      	strb	r1, [r3, #0]
 8009ba8:	4608      	mov	r0, r1
 8009baa:	bc10      	pop	{r4}
 8009bac:	4770      	bx	lr

08009bae <__sfputs_r>:
 8009bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	18d5      	adds	r5, r2, r3
 8009bb8:	42ac      	cmp	r4, r5
 8009bba:	d101      	bne.n	8009bc0 <__sfputs_r+0x12>
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	e007      	b.n	8009bd0 <__sfputs_r+0x22>
 8009bc0:	463a      	mov	r2, r7
 8009bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ffdc 	bl	8009b84 <__sfputc_r>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d1f3      	bne.n	8009bb8 <__sfputs_r+0xa>
 8009bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bd4 <_vfiprintf_r>:
 8009bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd8:	460c      	mov	r4, r1
 8009bda:	b09d      	sub	sp, #116	; 0x74
 8009bdc:	4617      	mov	r7, r2
 8009bde:	461d      	mov	r5, r3
 8009be0:	4606      	mov	r6, r0
 8009be2:	b118      	cbz	r0, 8009bec <_vfiprintf_r+0x18>
 8009be4:	6983      	ldr	r3, [r0, #24]
 8009be6:	b90b      	cbnz	r3, 8009bec <_vfiprintf_r+0x18>
 8009be8:	f7ff fb1e 	bl	8009228 <__sinit>
 8009bec:	4b7c      	ldr	r3, [pc, #496]	; (8009de0 <_vfiprintf_r+0x20c>)
 8009bee:	429c      	cmp	r4, r3
 8009bf0:	d158      	bne.n	8009ca4 <_vfiprintf_r+0xd0>
 8009bf2:	6874      	ldr	r4, [r6, #4]
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	0718      	lsls	r0, r3, #28
 8009bf8:	d55e      	bpl.n	8009cb8 <_vfiprintf_r+0xe4>
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d05b      	beq.n	8009cb8 <_vfiprintf_r+0xe4>
 8009c00:	2300      	movs	r3, #0
 8009c02:	9309      	str	r3, [sp, #36]	; 0x24
 8009c04:	2320      	movs	r3, #32
 8009c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c0a:	2330      	movs	r3, #48	; 0x30
 8009c0c:	f04f 0b01 	mov.w	fp, #1
 8009c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c14:	9503      	str	r5, [sp, #12]
 8009c16:	46b8      	mov	r8, r7
 8009c18:	4645      	mov	r5, r8
 8009c1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c1e:	b10b      	cbz	r3, 8009c24 <_vfiprintf_r+0x50>
 8009c20:	2b25      	cmp	r3, #37	; 0x25
 8009c22:	d154      	bne.n	8009cce <_vfiprintf_r+0xfa>
 8009c24:	ebb8 0a07 	subs.w	sl, r8, r7
 8009c28:	d00b      	beq.n	8009c42 <_vfiprintf_r+0x6e>
 8009c2a:	4653      	mov	r3, sl
 8009c2c:	463a      	mov	r2, r7
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4630      	mov	r0, r6
 8009c32:	f7ff ffbc 	bl	8009bae <__sfputs_r>
 8009c36:	3001      	adds	r0, #1
 8009c38:	f000 80c2 	beq.w	8009dc0 <_vfiprintf_r+0x1ec>
 8009c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c3e:	4453      	add	r3, sl
 8009c40:	9309      	str	r3, [sp, #36]	; 0x24
 8009c42:	f898 3000 	ldrb.w	r3, [r8]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80ba 	beq.w	8009dc0 <_vfiprintf_r+0x1ec>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	9307      	str	r3, [sp, #28]
 8009c5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c5e:	931a      	str	r3, [sp, #104]	; 0x68
 8009c60:	46a8      	mov	r8, r5
 8009c62:	2205      	movs	r2, #5
 8009c64:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009c68:	485e      	ldr	r0, [pc, #376]	; (8009de4 <_vfiprintf_r+0x210>)
 8009c6a:	f7ff fbe1 	bl	8009430 <memchr>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	bb78      	cbnz	r0, 8009cd2 <_vfiprintf_r+0xfe>
 8009c72:	06d9      	lsls	r1, r3, #27
 8009c74:	bf44      	itt	mi
 8009c76:	2220      	movmi	r2, #32
 8009c78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c7c:	071a      	lsls	r2, r3, #28
 8009c7e:	bf44      	itt	mi
 8009c80:	222b      	movmi	r2, #43	; 0x2b
 8009c82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c86:	782a      	ldrb	r2, [r5, #0]
 8009c88:	2a2a      	cmp	r2, #42	; 0x2a
 8009c8a:	d02a      	beq.n	8009ce2 <_vfiprintf_r+0x10e>
 8009c8c:	46a8      	mov	r8, r5
 8009c8e:	2000      	movs	r0, #0
 8009c90:	250a      	movs	r5, #10
 8009c92:	9a07      	ldr	r2, [sp, #28]
 8009c94:	4641      	mov	r1, r8
 8009c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c9a:	3b30      	subs	r3, #48	; 0x30
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	d969      	bls.n	8009d74 <_vfiprintf_r+0x1a0>
 8009ca0:	b360      	cbz	r0, 8009cfc <_vfiprintf_r+0x128>
 8009ca2:	e024      	b.n	8009cee <_vfiprintf_r+0x11a>
 8009ca4:	4b50      	ldr	r3, [pc, #320]	; (8009de8 <_vfiprintf_r+0x214>)
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	d101      	bne.n	8009cae <_vfiprintf_r+0xda>
 8009caa:	68b4      	ldr	r4, [r6, #8]
 8009cac:	e7a2      	b.n	8009bf4 <_vfiprintf_r+0x20>
 8009cae:	4b4f      	ldr	r3, [pc, #316]	; (8009dec <_vfiprintf_r+0x218>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	bf08      	it	eq
 8009cb4:	68f4      	ldreq	r4, [r6, #12]
 8009cb6:	e79d      	b.n	8009bf4 <_vfiprintf_r+0x20>
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7fe fb14 	bl	80082e8 <__swsetup_r>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d09d      	beq.n	8009c00 <_vfiprintf_r+0x2c>
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc8:	b01d      	add	sp, #116	; 0x74
 8009cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cce:	46a8      	mov	r8, r5
 8009cd0:	e7a2      	b.n	8009c18 <_vfiprintf_r+0x44>
 8009cd2:	4a44      	ldr	r2, [pc, #272]	; (8009de4 <_vfiprintf_r+0x210>)
 8009cd4:	4645      	mov	r5, r8
 8009cd6:	1a80      	subs	r0, r0, r2
 8009cd8:	fa0b f000 	lsl.w	r0, fp, r0
 8009cdc:	4318      	orrs	r0, r3
 8009cde:	9004      	str	r0, [sp, #16]
 8009ce0:	e7be      	b.n	8009c60 <_vfiprintf_r+0x8c>
 8009ce2:	9a03      	ldr	r2, [sp, #12]
 8009ce4:	1d11      	adds	r1, r2, #4
 8009ce6:	6812      	ldr	r2, [r2, #0]
 8009ce8:	9103      	str	r1, [sp, #12]
 8009cea:	2a00      	cmp	r2, #0
 8009cec:	db01      	blt.n	8009cf2 <_vfiprintf_r+0x11e>
 8009cee:	9207      	str	r2, [sp, #28]
 8009cf0:	e004      	b.n	8009cfc <_vfiprintf_r+0x128>
 8009cf2:	4252      	negs	r2, r2
 8009cf4:	f043 0302 	orr.w	r3, r3, #2
 8009cf8:	9207      	str	r2, [sp, #28]
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	f898 3000 	ldrb.w	r3, [r8]
 8009d00:	2b2e      	cmp	r3, #46	; 0x2e
 8009d02:	d10e      	bne.n	8009d22 <_vfiprintf_r+0x14e>
 8009d04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009d08:	2b2a      	cmp	r3, #42	; 0x2a
 8009d0a:	d138      	bne.n	8009d7e <_vfiprintf_r+0x1aa>
 8009d0c:	9b03      	ldr	r3, [sp, #12]
 8009d0e:	f108 0802 	add.w	r8, r8, #2
 8009d12:	1d1a      	adds	r2, r3, #4
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	9203      	str	r2, [sp, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bfb8      	it	lt
 8009d1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	4d33      	ldr	r5, [pc, #204]	; (8009df0 <_vfiprintf_r+0x21c>)
 8009d24:	2203      	movs	r2, #3
 8009d26:	f898 1000 	ldrb.w	r1, [r8]
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f7ff fb80 	bl	8009430 <memchr>
 8009d30:	b140      	cbz	r0, 8009d44 <_vfiprintf_r+0x170>
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	1b40      	subs	r0, r0, r5
 8009d36:	fa03 f000 	lsl.w	r0, r3, r0
 8009d3a:	9b04      	ldr	r3, [sp, #16]
 8009d3c:	f108 0801 	add.w	r8, r8, #1
 8009d40:	4303      	orrs	r3, r0
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	f898 1000 	ldrb.w	r1, [r8]
 8009d48:	2206      	movs	r2, #6
 8009d4a:	482a      	ldr	r0, [pc, #168]	; (8009df4 <_vfiprintf_r+0x220>)
 8009d4c:	f108 0701 	add.w	r7, r8, #1
 8009d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d54:	f7ff fb6c 	bl	8009430 <memchr>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d037      	beq.n	8009dcc <_vfiprintf_r+0x1f8>
 8009d5c:	4b26      	ldr	r3, [pc, #152]	; (8009df8 <_vfiprintf_r+0x224>)
 8009d5e:	bb1b      	cbnz	r3, 8009da8 <_vfiprintf_r+0x1d4>
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	3307      	adds	r3, #7
 8009d64:	f023 0307 	bic.w	r3, r3, #7
 8009d68:	3308      	adds	r3, #8
 8009d6a:	9303      	str	r3, [sp, #12]
 8009d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6e:	444b      	add	r3, r9
 8009d70:	9309      	str	r3, [sp, #36]	; 0x24
 8009d72:	e750      	b.n	8009c16 <_vfiprintf_r+0x42>
 8009d74:	fb05 3202 	mla	r2, r5, r2, r3
 8009d78:	2001      	movs	r0, #1
 8009d7a:	4688      	mov	r8, r1
 8009d7c:	e78a      	b.n	8009c94 <_vfiprintf_r+0xc0>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	250a      	movs	r5, #10
 8009d82:	4619      	mov	r1, r3
 8009d84:	f108 0801 	add.w	r8, r8, #1
 8009d88:	9305      	str	r3, [sp, #20]
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d90:	3a30      	subs	r2, #48	; 0x30
 8009d92:	2a09      	cmp	r2, #9
 8009d94:	d903      	bls.n	8009d9e <_vfiprintf_r+0x1ca>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d0c3      	beq.n	8009d22 <_vfiprintf_r+0x14e>
 8009d9a:	9105      	str	r1, [sp, #20]
 8009d9c:	e7c1      	b.n	8009d22 <_vfiprintf_r+0x14e>
 8009d9e:	fb05 2101 	mla	r1, r5, r1, r2
 8009da2:	2301      	movs	r3, #1
 8009da4:	4680      	mov	r8, r0
 8009da6:	e7f0      	b.n	8009d8a <_vfiprintf_r+0x1b6>
 8009da8:	ab03      	add	r3, sp, #12
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	4622      	mov	r2, r4
 8009dae:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <_vfiprintf_r+0x228>)
 8009db0:	a904      	add	r1, sp, #16
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7fd fe0c 	bl	80079d0 <_printf_float>
 8009db8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009dbc:	4681      	mov	r9, r0
 8009dbe:	d1d5      	bne.n	8009d6c <_vfiprintf_r+0x198>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	065b      	lsls	r3, r3, #25
 8009dc4:	f53f af7e 	bmi.w	8009cc4 <_vfiprintf_r+0xf0>
 8009dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dca:	e77d      	b.n	8009cc8 <_vfiprintf_r+0xf4>
 8009dcc:	ab03      	add	r3, sp, #12
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	4b0a      	ldr	r3, [pc, #40]	; (8009dfc <_vfiprintf_r+0x228>)
 8009dd4:	a904      	add	r1, sp, #16
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f7fe f8a6 	bl	8007f28 <_printf_i>
 8009ddc:	e7ec      	b.n	8009db8 <_vfiprintf_r+0x1e4>
 8009dde:	bf00      	nop
 8009de0:	0800c620 	.word	0x0800c620
 8009de4:	0800c75c 	.word	0x0800c75c
 8009de8:	0800c640 	.word	0x0800c640
 8009dec:	0800c600 	.word	0x0800c600
 8009df0:	0800c762 	.word	0x0800c762
 8009df4:	0800c766 	.word	0x0800c766
 8009df8:	080079d1 	.word	0x080079d1
 8009dfc:	08009baf 	.word	0x08009baf

08009e00 <_sbrk_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	2300      	movs	r3, #0
 8009e04:	4c05      	ldr	r4, [pc, #20]	; (8009e1c <_sbrk_r+0x1c>)
 8009e06:	4605      	mov	r5, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	f7f8 fed2 	bl	8002bb4 <_sbrk>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_sbrk_r+0x1a>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_sbrk_r+0x1a>
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20000a80 	.word	0x20000a80

08009e20 <__sread>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	460c      	mov	r4, r1
 8009e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e28:	f000 f8a8 	bl	8009f7c <_read_r>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	bfab      	itete	ge
 8009e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e32:	89a3      	ldrhlt	r3, [r4, #12]
 8009e34:	181b      	addge	r3, r3, r0
 8009e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e3a:	bfac      	ite	ge
 8009e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e3e:	81a3      	strhlt	r3, [r4, #12]
 8009e40:	bd10      	pop	{r4, pc}

08009e42 <__swrite>:
 8009e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e46:	461f      	mov	r7, r3
 8009e48:	898b      	ldrh	r3, [r1, #12]
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	05db      	lsls	r3, r3, #23
 8009e4e:	460c      	mov	r4, r1
 8009e50:	4616      	mov	r6, r2
 8009e52:	d505      	bpl.n	8009e60 <__swrite+0x1e>
 8009e54:	2302      	movs	r3, #2
 8009e56:	2200      	movs	r2, #0
 8009e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5c:	f000 f868 	bl	8009f30 <_lseek_r>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	4632      	mov	r2, r6
 8009e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e68:	81a3      	strh	r3, [r4, #12]
 8009e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e6e:	463b      	mov	r3, r7
 8009e70:	4628      	mov	r0, r5
 8009e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e76:	f000 b817 	b.w	8009ea8 <_write_r>

08009e7a <__sseek>:
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e82:	f000 f855 	bl	8009f30 <_lseek_r>
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	bf15      	itete	ne
 8009e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e96:	81a3      	strheq	r3, [r4, #12]
 8009e98:	bf18      	it	ne
 8009e9a:	81a3      	strhne	r3, [r4, #12]
 8009e9c:	bd10      	pop	{r4, pc}

08009e9e <__sclose>:
 8009e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea2:	f000 b813 	b.w	8009ecc <_close_r>
	...

08009ea8 <_write_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4605      	mov	r5, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	4c05      	ldr	r4, [pc, #20]	; (8009ec8 <_write_r+0x20>)
 8009eb4:	6022      	str	r2, [r4, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7f7 f970 	bl	800119c <_write>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_write_r+0x1e>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_write_r+0x1e>
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	20000a80 	.word	0x20000a80

08009ecc <_close_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	2300      	movs	r3, #0
 8009ed0:	4c05      	ldr	r4, [pc, #20]	; (8009ee8 <_close_r+0x1c>)
 8009ed2:	4605      	mov	r5, r0
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	6023      	str	r3, [r4, #0]
 8009ed8:	f7f8 fe3b 	bl	8002b52 <_close>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d102      	bne.n	8009ee6 <_close_r+0x1a>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	b103      	cbz	r3, 8009ee6 <_close_r+0x1a>
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	20000a80 	.word	0x20000a80

08009eec <_fstat_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	2300      	movs	r3, #0
 8009ef0:	4c06      	ldr	r4, [pc, #24]	; (8009f0c <_fstat_r+0x20>)
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	4608      	mov	r0, r1
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	f7f8 fe35 	bl	8002b68 <_fstat>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	d102      	bne.n	8009f08 <_fstat_r+0x1c>
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	b103      	cbz	r3, 8009f08 <_fstat_r+0x1c>
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	bd38      	pop	{r3, r4, r5, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000a80 	.word	0x20000a80

08009f10 <_isatty_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	2300      	movs	r3, #0
 8009f14:	4c05      	ldr	r4, [pc, #20]	; (8009f2c <_isatty_r+0x1c>)
 8009f16:	4605      	mov	r5, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	6023      	str	r3, [r4, #0]
 8009f1c:	f7f8 fe33 	bl	8002b86 <_isatty>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_isatty_r+0x1a>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_isatty_r+0x1a>
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	20000a80 	.word	0x20000a80

08009f30 <_lseek_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4605      	mov	r5, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	4611      	mov	r1, r2
 8009f38:	2200      	movs	r2, #0
 8009f3a:	4c05      	ldr	r4, [pc, #20]	; (8009f50 <_lseek_r+0x20>)
 8009f3c:	6022      	str	r2, [r4, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	f7f8 fe2b 	bl	8002b9a <_lseek>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_lseek_r+0x1e>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_lseek_r+0x1e>
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	20000a80 	.word	0x20000a80

08009f54 <__ascii_mbtowc>:
 8009f54:	b082      	sub	sp, #8
 8009f56:	b901      	cbnz	r1, 8009f5a <__ascii_mbtowc+0x6>
 8009f58:	a901      	add	r1, sp, #4
 8009f5a:	b142      	cbz	r2, 8009f6e <__ascii_mbtowc+0x1a>
 8009f5c:	b14b      	cbz	r3, 8009f72 <__ascii_mbtowc+0x1e>
 8009f5e:	7813      	ldrb	r3, [r2, #0]
 8009f60:	600b      	str	r3, [r1, #0]
 8009f62:	7812      	ldrb	r2, [r2, #0]
 8009f64:	1c10      	adds	r0, r2, #0
 8009f66:	bf18      	it	ne
 8009f68:	2001      	movne	r0, #1
 8009f6a:	b002      	add	sp, #8
 8009f6c:	4770      	bx	lr
 8009f6e:	4610      	mov	r0, r2
 8009f70:	e7fb      	b.n	8009f6a <__ascii_mbtowc+0x16>
 8009f72:	f06f 0001 	mvn.w	r0, #1
 8009f76:	e7f8      	b.n	8009f6a <__ascii_mbtowc+0x16>

08009f78 <__malloc_lock>:
 8009f78:	4770      	bx	lr

08009f7a <__malloc_unlock>:
 8009f7a:	4770      	bx	lr

08009f7c <_read_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4605      	mov	r5, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	4611      	mov	r1, r2
 8009f84:	2200      	movs	r2, #0
 8009f86:	4c05      	ldr	r4, [pc, #20]	; (8009f9c <_read_r+0x20>)
 8009f88:	6022      	str	r2, [r4, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f7f8 fdc4 	bl	8002b18 <_read>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_read_r+0x1e>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_read_r+0x1e>
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	20000a80 	.word	0x20000a80

08009fa0 <__ascii_wctomb>:
 8009fa0:	b149      	cbz	r1, 8009fb6 <__ascii_wctomb+0x16>
 8009fa2:	2aff      	cmp	r2, #255	; 0xff
 8009fa4:	bf8b      	itete	hi
 8009fa6:	238a      	movhi	r3, #138	; 0x8a
 8009fa8:	700a      	strbls	r2, [r1, #0]
 8009faa:	6003      	strhi	r3, [r0, #0]
 8009fac:	2001      	movls	r0, #1
 8009fae:	bf88      	it	hi
 8009fb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009fb4:	4770      	bx	lr
 8009fb6:	4608      	mov	r0, r1
 8009fb8:	4770      	bx	lr
 8009fba:	0000      	movs	r0, r0
 8009fbc:	0000      	movs	r0, r0
	...

08009fc0 <atan>:
 8009fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	4bb6      	ldr	r3, [pc, #728]	; (800a2a0 <atan+0x2e0>)
 8009fc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009fca:	429e      	cmp	r6, r3
 8009fcc:	4604      	mov	r4, r0
 8009fce:	460d      	mov	r5, r1
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	dd17      	ble.n	800a004 <atan+0x44>
 8009fd4:	4bb3      	ldr	r3, [pc, #716]	; (800a2a4 <atan+0x2e4>)
 8009fd6:	429e      	cmp	r6, r3
 8009fd8:	dc01      	bgt.n	8009fde <atan+0x1e>
 8009fda:	d109      	bne.n	8009ff0 <atan+0x30>
 8009fdc:	b140      	cbz	r0, 8009ff0 <atan+0x30>
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 f8c1 	bl	800016c <__adddf3>
 8009fea:	4604      	mov	r4, r0
 8009fec:	460d      	mov	r5, r1
 8009fee:	e005      	b.n	8009ffc <atan+0x3c>
 8009ff0:	f1bb 0f00 	cmp.w	fp, #0
 8009ff4:	4cac      	ldr	r4, [pc, #688]	; (800a2a8 <atan+0x2e8>)
 8009ff6:	f340 8121 	ble.w	800a23c <atan+0x27c>
 8009ffa:	4dac      	ldr	r5, [pc, #688]	; (800a2ac <atan+0x2ec>)
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	4629      	mov	r1, r5
 800a000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a004:	4baa      	ldr	r3, [pc, #680]	; (800a2b0 <atan+0x2f0>)
 800a006:	429e      	cmp	r6, r3
 800a008:	dc11      	bgt.n	800a02e <atan+0x6e>
 800a00a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a00e:	429e      	cmp	r6, r3
 800a010:	dc0a      	bgt.n	800a028 <atan+0x68>
 800a012:	a38b      	add	r3, pc, #556	; (adr r3, 800a240 <atan+0x280>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 f8a8 	bl	800016c <__adddf3>
 800a01c:	2200      	movs	r2, #0
 800a01e:	4ba5      	ldr	r3, [pc, #660]	; (800a2b4 <atan+0x2f4>)
 800a020:	f7f6 fcea 	bl	80009f8 <__aeabi_dcmpgt>
 800a024:	2800      	cmp	r0, #0
 800a026:	d1e9      	bne.n	8009ffc <atan+0x3c>
 800a028:	f04f 3aff 	mov.w	sl, #4294967295
 800a02c:	e027      	b.n	800a07e <atan+0xbe>
 800a02e:	f000 f951 	bl	800a2d4 <fabs>
 800a032:	4ba1      	ldr	r3, [pc, #644]	; (800a2b8 <atan+0x2f8>)
 800a034:	4604      	mov	r4, r0
 800a036:	429e      	cmp	r6, r3
 800a038:	460d      	mov	r5, r1
 800a03a:	f300 80b8 	bgt.w	800a1ae <atan+0x1ee>
 800a03e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a042:	429e      	cmp	r6, r3
 800a044:	f300 809c 	bgt.w	800a180 <atan+0x1c0>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	f7f6 f88e 	bl	800016c <__adddf3>
 800a050:	2200      	movs	r2, #0
 800a052:	4b98      	ldr	r3, [pc, #608]	; (800a2b4 <atan+0x2f4>)
 800a054:	f7f6 f888 	bl	8000168 <__aeabi_dsub>
 800a058:	2200      	movs	r2, #0
 800a05a:	4606      	mov	r6, r0
 800a05c:	460f      	mov	r7, r1
 800a05e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 f881 	bl	800016c <__adddf3>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 fb5b 	bl	800072c <__aeabi_ddiv>
 800a076:	f04f 0a00 	mov.w	sl, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	460d      	mov	r5, r1
 800a07e:	4622      	mov	r2, r4
 800a080:	462b      	mov	r3, r5
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 fa27 	bl	80004d8 <__aeabi_dmul>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4680      	mov	r8, r0
 800a090:	4689      	mov	r9, r1
 800a092:	f7f6 fa21 	bl	80004d8 <__aeabi_dmul>
 800a096:	a36c      	add	r3, pc, #432	; (adr r3, 800a248 <atan+0x288>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	f7f6 fa1a 	bl	80004d8 <__aeabi_dmul>
 800a0a4:	a36a      	add	r3, pc, #424	; (adr r3, 800a250 <atan+0x290>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 f85f 	bl	800016c <__adddf3>
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	f7f6 fa11 	bl	80004d8 <__aeabi_dmul>
 800a0b6:	a368      	add	r3, pc, #416	; (adr r3, 800a258 <atan+0x298>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 f856 	bl	800016c <__adddf3>
 800a0c0:	4632      	mov	r2, r6
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	f7f6 fa08 	bl	80004d8 <__aeabi_dmul>
 800a0c8:	a365      	add	r3, pc, #404	; (adr r3, 800a260 <atan+0x2a0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 f84d 	bl	800016c <__adddf3>
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	f7f6 f9ff 	bl	80004d8 <__aeabi_dmul>
 800a0da:	a363      	add	r3, pc, #396	; (adr r3, 800a268 <atan+0x2a8>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	f7f6 f844 	bl	800016c <__adddf3>
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	463b      	mov	r3, r7
 800a0e8:	f7f6 f9f6 	bl	80004d8 <__aeabi_dmul>
 800a0ec:	a360      	add	r3, pc, #384	; (adr r3, 800a270 <atan+0x2b0>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f83b 	bl	800016c <__adddf3>
 800a0f6:	4642      	mov	r2, r8
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	f7f6 f9ed 	bl	80004d8 <__aeabi_dmul>
 800a0fe:	a35e      	add	r3, pc, #376	; (adr r3, 800a278 <atan+0x2b8>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	4680      	mov	r8, r0
 800a106:	4689      	mov	r9, r1
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 f9e4 	bl	80004d8 <__aeabi_dmul>
 800a110:	a35b      	add	r3, pc, #364	; (adr r3, 800a280 <atan+0x2c0>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	f7f6 f827 	bl	8000168 <__aeabi_dsub>
 800a11a:	4632      	mov	r2, r6
 800a11c:	463b      	mov	r3, r7
 800a11e:	f7f6 f9db 	bl	80004d8 <__aeabi_dmul>
 800a122:	a359      	add	r3, pc, #356	; (adr r3, 800a288 <atan+0x2c8>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f7f6 f81e 	bl	8000168 <__aeabi_dsub>
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	f7f6 f9d2 	bl	80004d8 <__aeabi_dmul>
 800a134:	a356      	add	r3, pc, #344	; (adr r3, 800a290 <atan+0x2d0>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	f7f6 f815 	bl	8000168 <__aeabi_dsub>
 800a13e:	4632      	mov	r2, r6
 800a140:	463b      	mov	r3, r7
 800a142:	f7f6 f9c9 	bl	80004d8 <__aeabi_dmul>
 800a146:	a354      	add	r3, pc, #336	; (adr r3, 800a298 <atan+0x2d8>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 f80c 	bl	8000168 <__aeabi_dsub>
 800a150:	4632      	mov	r2, r6
 800a152:	463b      	mov	r3, r7
 800a154:	f7f6 f9c0 	bl	80004d8 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4640      	mov	r0, r8
 800a15e:	4649      	mov	r1, r9
 800a160:	f7f6 f804 	bl	800016c <__adddf3>
 800a164:	4622      	mov	r2, r4
 800a166:	462b      	mov	r3, r5
 800a168:	f7f6 f9b6 	bl	80004d8 <__aeabi_dmul>
 800a16c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	d144      	bne.n	800a200 <atan+0x240>
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f5 fff5 	bl	8000168 <__aeabi_dsub>
 800a17e:	e734      	b.n	8009fea <atan+0x2a>
 800a180:	2200      	movs	r2, #0
 800a182:	4b4c      	ldr	r3, [pc, #304]	; (800a2b4 <atan+0x2f4>)
 800a184:	f7f5 fff0 	bl	8000168 <__aeabi_dsub>
 800a188:	2200      	movs	r2, #0
 800a18a:	4606      	mov	r6, r0
 800a18c:	460f      	mov	r7, r1
 800a18e:	4b49      	ldr	r3, [pc, #292]	; (800a2b4 <atan+0x2f4>)
 800a190:	4620      	mov	r0, r4
 800a192:	4629      	mov	r1, r5
 800a194:	f7f5 ffea 	bl	800016c <__adddf3>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 fac4 	bl	800072c <__aeabi_ddiv>
 800a1a4:	f04f 0a01 	mov.w	sl, #1
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	460d      	mov	r5, r1
 800a1ac:	e767      	b.n	800a07e <atan+0xbe>
 800a1ae:	4b43      	ldr	r3, [pc, #268]	; (800a2bc <atan+0x2fc>)
 800a1b0:	429e      	cmp	r6, r3
 800a1b2:	dc1a      	bgt.n	800a1ea <atan+0x22a>
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4b42      	ldr	r3, [pc, #264]	; (800a2c0 <atan+0x300>)
 800a1b8:	f7f5 ffd6 	bl	8000168 <__aeabi_dsub>
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	4b3f      	ldr	r3, [pc, #252]	; (800a2c0 <atan+0x300>)
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f7f6 f986 	bl	80004d8 <__aeabi_dmul>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4b39      	ldr	r3, [pc, #228]	; (800a2b4 <atan+0x2f4>)
 800a1d0:	f7f5 ffcc 	bl	800016c <__adddf3>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f7f6 faa6 	bl	800072c <__aeabi_ddiv>
 800a1e0:	f04f 0a02 	mov.w	sl, #2
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	e749      	b.n	800a07e <atan+0xbe>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	4934      	ldr	r1, [pc, #208]	; (800a2c4 <atan+0x304>)
 800a1f2:	f7f6 fa9b 	bl	800072c <__aeabi_ddiv>
 800a1f6:	f04f 0a03 	mov.w	sl, #3
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	e73e      	b.n	800a07e <atan+0xbe>
 800a200:	4b31      	ldr	r3, [pc, #196]	; (800a2c8 <atan+0x308>)
 800a202:	4e32      	ldr	r6, [pc, #200]	; (800a2cc <atan+0x30c>)
 800a204:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a208:	4456      	add	r6, sl
 800a20a:	449a      	add	sl, r3
 800a20c:	e9da 2300 	ldrd	r2, r3, [sl]
 800a210:	f7f5 ffaa 	bl	8000168 <__aeabi_dsub>
 800a214:	4622      	mov	r2, r4
 800a216:	462b      	mov	r3, r5
 800a218:	f7f5 ffa6 	bl	8000168 <__aeabi_dsub>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a224:	f7f5 ffa0 	bl	8000168 <__aeabi_dsub>
 800a228:	f1bb 0f00 	cmp.w	fp, #0
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	f6bf aee4 	bge.w	8009ffc <atan+0x3c>
 800a234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a238:	461d      	mov	r5, r3
 800a23a:	e6df      	b.n	8009ffc <atan+0x3c>
 800a23c:	4d24      	ldr	r5, [pc, #144]	; (800a2d0 <atan+0x310>)
 800a23e:	e6dd      	b.n	8009ffc <atan+0x3c>
 800a240:	8800759c 	.word	0x8800759c
 800a244:	7e37e43c 	.word	0x7e37e43c
 800a248:	e322da11 	.word	0xe322da11
 800a24c:	3f90ad3a 	.word	0x3f90ad3a
 800a250:	24760deb 	.word	0x24760deb
 800a254:	3fa97b4b 	.word	0x3fa97b4b
 800a258:	a0d03d51 	.word	0xa0d03d51
 800a25c:	3fb10d66 	.word	0x3fb10d66
 800a260:	c54c206e 	.word	0xc54c206e
 800a264:	3fb745cd 	.word	0x3fb745cd
 800a268:	920083ff 	.word	0x920083ff
 800a26c:	3fc24924 	.word	0x3fc24924
 800a270:	5555550d 	.word	0x5555550d
 800a274:	3fd55555 	.word	0x3fd55555
 800a278:	2c6a6c2f 	.word	0x2c6a6c2f
 800a27c:	bfa2b444 	.word	0xbfa2b444
 800a280:	52defd9a 	.word	0x52defd9a
 800a284:	3fadde2d 	.word	0x3fadde2d
 800a288:	af749a6d 	.word	0xaf749a6d
 800a28c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a290:	fe231671 	.word	0xfe231671
 800a294:	3fbc71c6 	.word	0x3fbc71c6
 800a298:	9998ebc4 	.word	0x9998ebc4
 800a29c:	3fc99999 	.word	0x3fc99999
 800a2a0:	440fffff 	.word	0x440fffff
 800a2a4:	7ff00000 	.word	0x7ff00000
 800a2a8:	54442d18 	.word	0x54442d18
 800a2ac:	3ff921fb 	.word	0x3ff921fb
 800a2b0:	3fdbffff 	.word	0x3fdbffff
 800a2b4:	3ff00000 	.word	0x3ff00000
 800a2b8:	3ff2ffff 	.word	0x3ff2ffff
 800a2bc:	40037fff 	.word	0x40037fff
 800a2c0:	3ff80000 	.word	0x3ff80000
 800a2c4:	bff00000 	.word	0xbff00000
 800a2c8:	0800c898 	.word	0x0800c898
 800a2cc:	0800c878 	.word	0x0800c878
 800a2d0:	bff921fb 	.word	0xbff921fb

0800a2d4 <fabs>:
 800a2d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4770      	bx	lr

0800a2dc <sin>:
 800a2dc:	b530      	push	{r4, r5, lr}
 800a2de:	4a1a      	ldr	r2, [pc, #104]	; (800a348 <sin+0x6c>)
 800a2e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	dc06      	bgt.n	800a2f8 <sin+0x1c>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f001 fd8d 	bl	800be10 <__kernel_sin>
 800a2f6:	e006      	b.n	800a306 <sin+0x2a>
 800a2f8:	4a14      	ldr	r2, [pc, #80]	; (800a34c <sin+0x70>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	dd05      	ble.n	800a30a <sin+0x2e>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	f7f5 ff31 	bl	8000168 <__aeabi_dsub>
 800a306:	b007      	add	sp, #28
 800a308:	bd30      	pop	{r4, r5, pc}
 800a30a:	aa02      	add	r2, sp, #8
 800a30c:	f000 fedc 	bl	800b0c8 <__ieee754_rem_pio2>
 800a310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a314:	f000 0403 	and.w	r4, r0, #3
 800a318:	2c01      	cmp	r4, #1
 800a31a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a31e:	d005      	beq.n	800a32c <sin+0x50>
 800a320:	2c02      	cmp	r4, #2
 800a322:	d006      	beq.n	800a332 <sin+0x56>
 800a324:	b964      	cbnz	r4, 800a340 <sin+0x64>
 800a326:	2401      	movs	r4, #1
 800a328:	9400      	str	r4, [sp, #0]
 800a32a:	e7e2      	b.n	800a2f2 <sin+0x16>
 800a32c:	f001 f968 	bl	800b600 <__kernel_cos>
 800a330:	e7e9      	b.n	800a306 <sin+0x2a>
 800a332:	2401      	movs	r4, #1
 800a334:	9400      	str	r4, [sp, #0]
 800a336:	f001 fd6b 	bl	800be10 <__kernel_sin>
 800a33a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a33e:	e7e2      	b.n	800a306 <sin+0x2a>
 800a340:	f001 f95e 	bl	800b600 <__kernel_cos>
 800a344:	e7f9      	b.n	800a33a <sin+0x5e>
 800a346:	bf00      	nop
 800a348:	3fe921fb 	.word	0x3fe921fb
 800a34c:	7fefffff 	.word	0x7fefffff

0800a350 <pow>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	b08f      	sub	sp, #60	; 0x3c
 800a356:	461d      	mov	r5, r3
 800a358:	4680      	mov	r8, r0
 800a35a:	4689      	mov	r9, r1
 800a35c:	4614      	mov	r4, r2
 800a35e:	f000 f9a7 	bl	800a6b0 <__ieee754_pow>
 800a362:	4fa1      	ldr	r7, [pc, #644]	; (800a5e8 <pow+0x298>)
 800a364:	e9cd 0100 	strd	r0, r1, [sp]
 800a368:	f997 3000 	ldrsb.w	r3, [r7]
 800a36c:	463e      	mov	r6, r7
 800a36e:	9302      	str	r3, [sp, #8]
 800a370:	3301      	adds	r3, #1
 800a372:	d05f      	beq.n	800a434 <pow+0xe4>
 800a374:	4622      	mov	r2, r4
 800a376:	462b      	mov	r3, r5
 800a378:	4620      	mov	r0, r4
 800a37a:	4629      	mov	r1, r5
 800a37c:	f7f6 fb46 	bl	8000a0c <__aeabi_dcmpun>
 800a380:	4682      	mov	sl, r0
 800a382:	2800      	cmp	r0, #0
 800a384:	d156      	bne.n	800a434 <pow+0xe4>
 800a386:	4642      	mov	r2, r8
 800a388:	464b      	mov	r3, r9
 800a38a:	4640      	mov	r0, r8
 800a38c:	4649      	mov	r1, r9
 800a38e:	f7f6 fb3d 	bl	8000a0c <__aeabi_dcmpun>
 800a392:	9003      	str	r0, [sp, #12]
 800a394:	b1e8      	cbz	r0, 800a3d2 <pow+0x82>
 800a396:	2200      	movs	r2, #0
 800a398:	2300      	movs	r3, #0
 800a39a:	4620      	mov	r0, r4
 800a39c:	4629      	mov	r1, r5
 800a39e:	f7f6 fb03 	bl	80009a8 <__aeabi_dcmpeq>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d046      	beq.n	800a434 <pow+0xe4>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	4b8f      	ldr	r3, [pc, #572]	; (800a5ec <pow+0x29c>)
 800a3ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a3b2:	9305      	str	r3, [sp, #20]
 800a3b4:	4b8e      	ldr	r3, [pc, #568]	; (800a5f0 <pow+0x2a0>)
 800a3b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a3ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a3be:	9b02      	ldr	r3, [sp, #8]
 800a3c0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d031      	beq.n	800a42c <pow+0xdc>
 800a3c8:	a804      	add	r0, sp, #16
 800a3ca:	f001 fe61 	bl	800c090 <matherr>
 800a3ce:	bb38      	cbnz	r0, 800a420 <pow+0xd0>
 800a3d0:	e058      	b.n	800a484 <pow+0x134>
 800a3d2:	f04f 0a00 	mov.w	sl, #0
 800a3d6:	f04f 0b00 	mov.w	fp, #0
 800a3da:	4652      	mov	r2, sl
 800a3dc:	465b      	mov	r3, fp
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f6 fae1 	bl	80009a8 <__aeabi_dcmpeq>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d051      	beq.n	800a48e <pow+0x13e>
 800a3ea:	4652      	mov	r2, sl
 800a3ec:	465b      	mov	r3, fp
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f6 fad9 	bl	80009a8 <__aeabi_dcmpeq>
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	b308      	cbz	r0, 800a43e <pow+0xee>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	4b7b      	ldr	r3, [pc, #492]	; (800a5ec <pow+0x29c>)
 800a400:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a404:	9305      	str	r3, [sp, #20]
 800a406:	9b03      	ldr	r3, [sp, #12]
 800a408:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a40c:	930c      	str	r3, [sp, #48]	; 0x30
 800a40e:	9b02      	ldr	r3, [sp, #8]
 800a410:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0d7      	beq.n	800a3c8 <pow+0x78>
 800a418:	2200      	movs	r2, #0
 800a41a:	4b75      	ldr	r3, [pc, #468]	; (800a5f0 <pow+0x2a0>)
 800a41c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a422:	b11b      	cbz	r3, 800a42c <pow+0xdc>
 800a424:	f7fd fa10 	bl	8007848 <__errno>
 800a428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a42a:	6003      	str	r3, [r0, #0]
 800a42c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800a430:	e9cd 3400 	strd	r3, r4, [sp]
 800a434:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a438:	b00f      	add	sp, #60	; 0x3c
 800a43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f001 fd9b 	bl	800bf7c <finite>
 800a446:	2800      	cmp	r0, #0
 800a448:	d0f4      	beq.n	800a434 <pow+0xe4>
 800a44a:	4652      	mov	r2, sl
 800a44c:	465b      	mov	r3, fp
 800a44e:	4620      	mov	r0, r4
 800a450:	4629      	mov	r1, r5
 800a452:	f7f6 fab3 	bl	80009bc <__aeabi_dcmplt>
 800a456:	2800      	cmp	r0, #0
 800a458:	d0ec      	beq.n	800a434 <pow+0xe4>
 800a45a:	2301      	movs	r3, #1
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	4b63      	ldr	r3, [pc, #396]	; (800a5ec <pow+0x29c>)
 800a460:	960c      	str	r6, [sp, #48]	; 0x30
 800a462:	9305      	str	r3, [sp, #20]
 800a464:	f997 3000 	ldrsb.w	r3, [r7]
 800a468:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a46c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a470:	b913      	cbnz	r3, 800a478 <pow+0x128>
 800a472:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a476:	e7a7      	b.n	800a3c8 <pow+0x78>
 800a478:	2000      	movs	r0, #0
 800a47a:	495e      	ldr	r1, [pc, #376]	; (800a5f4 <pow+0x2a4>)
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a482:	d1a1      	bne.n	800a3c8 <pow+0x78>
 800a484:	f7fd f9e0 	bl	8007848 <__errno>
 800a488:	2321      	movs	r3, #33	; 0x21
 800a48a:	6003      	str	r3, [r0, #0]
 800a48c:	e7c8      	b.n	800a420 <pow+0xd0>
 800a48e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a492:	f001 fd73 	bl	800bf7c <finite>
 800a496:	9002      	str	r0, [sp, #8]
 800a498:	2800      	cmp	r0, #0
 800a49a:	d177      	bne.n	800a58c <pow+0x23c>
 800a49c:	4640      	mov	r0, r8
 800a49e:	4649      	mov	r1, r9
 800a4a0:	f001 fd6c 	bl	800bf7c <finite>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d071      	beq.n	800a58c <pow+0x23c>
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f001 fd66 	bl	800bf7c <finite>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d06b      	beq.n	800a58c <pow+0x23c>
 800a4b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	f7f6 faa6 	bl	8000a0c <__aeabi_dcmpun>
 800a4c0:	f997 7000 	ldrsb.w	r7, [r7]
 800a4c4:	4b49      	ldr	r3, [pc, #292]	; (800a5ec <pow+0x29c>)
 800a4c6:	b1a0      	cbz	r0, 800a4f2 <pow+0x1a2>
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4ce:	9b02      	ldr	r3, [sp, #8]
 800a4d0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a4d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a4d6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a4da:	2f00      	cmp	r7, #0
 800a4dc:	d0c9      	beq.n	800a472 <pow+0x122>
 800a4de:	4652      	mov	r2, sl
 800a4e0:	465b      	mov	r3, fp
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	4659      	mov	r1, fp
 800a4e6:	f7f6 f921 	bl	800072c <__aeabi_ddiv>
 800a4ea:	2f02      	cmp	r7, #2
 800a4ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a4f0:	e7c7      	b.n	800a482 <pow+0x132>
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	900c      	str	r0, [sp, #48]	; 0x30
 800a4f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	2200      	movs	r2, #0
 800a500:	4b3d      	ldr	r3, [pc, #244]	; (800a5f8 <pow+0x2a8>)
 800a502:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a506:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a50a:	f7f5 ffe5 	bl	80004d8 <__aeabi_dmul>
 800a50e:	4604      	mov	r4, r0
 800a510:	460d      	mov	r5, r1
 800a512:	bb17      	cbnz	r7, 800a55a <pow+0x20a>
 800a514:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a518:	4b38      	ldr	r3, [pc, #224]	; (800a5fc <pow+0x2ac>)
 800a51a:	4640      	mov	r0, r8
 800a51c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a520:	4649      	mov	r1, r9
 800a522:	4652      	mov	r2, sl
 800a524:	465b      	mov	r3, fp
 800a526:	f7f6 fa49 	bl	80009bc <__aeabi_dcmplt>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d054      	beq.n	800a5d8 <pow+0x288>
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	f001 fdb5 	bl	800c0a0 <rint>
 800a536:	4622      	mov	r2, r4
 800a538:	462b      	mov	r3, r5
 800a53a:	f7f6 fa35 	bl	80009a8 <__aeabi_dcmpeq>
 800a53e:	b920      	cbnz	r0, 800a54a <pow+0x1fa>
 800a540:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a544:	4b2e      	ldr	r3, [pc, #184]	; (800a600 <pow+0x2b0>)
 800a546:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a54a:	f996 3000 	ldrsb.w	r3, [r6]
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d142      	bne.n	800a5d8 <pow+0x288>
 800a552:	f7fd f979 	bl	8007848 <__errno>
 800a556:	2322      	movs	r3, #34	; 0x22
 800a558:	e797      	b.n	800a48a <pow+0x13a>
 800a55a:	2200      	movs	r2, #0
 800a55c:	4b29      	ldr	r3, [pc, #164]	; (800a604 <pow+0x2b4>)
 800a55e:	4640      	mov	r0, r8
 800a560:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a564:	4649      	mov	r1, r9
 800a566:	4652      	mov	r2, sl
 800a568:	465b      	mov	r3, fp
 800a56a:	f7f6 fa27 	bl	80009bc <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d0eb      	beq.n	800a54a <pow+0x1fa>
 800a572:	4620      	mov	r0, r4
 800a574:	4629      	mov	r1, r5
 800a576:	f001 fd93 	bl	800c0a0 <rint>
 800a57a:	4622      	mov	r2, r4
 800a57c:	462b      	mov	r3, r5
 800a57e:	f7f6 fa13 	bl	80009a8 <__aeabi_dcmpeq>
 800a582:	2800      	cmp	r0, #0
 800a584:	d1e1      	bne.n	800a54a <pow+0x1fa>
 800a586:	2200      	movs	r2, #0
 800a588:	4b1a      	ldr	r3, [pc, #104]	; (800a5f4 <pow+0x2a4>)
 800a58a:	e7dc      	b.n	800a546 <pow+0x1f6>
 800a58c:	2200      	movs	r2, #0
 800a58e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a592:	2300      	movs	r3, #0
 800a594:	f7f6 fa08 	bl	80009a8 <__aeabi_dcmpeq>
 800a598:	2800      	cmp	r0, #0
 800a59a:	f43f af4b 	beq.w	800a434 <pow+0xe4>
 800a59e:	4640      	mov	r0, r8
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	f001 fceb 	bl	800bf7c <finite>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f43f af44 	beq.w	800a434 <pow+0xe4>
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	f001 fce4 	bl	800bf7c <finite>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	f43f af3d 	beq.w	800a434 <pow+0xe4>
 800a5ba:	2304      	movs	r3, #4
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <pow+0x29c>)
 800a5c0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a5c4:	9305      	str	r3, [sp, #20]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2400      	movs	r4, #0
 800a5ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a5d2:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800a5d6:	e7b8      	b.n	800a54a <pow+0x1fa>
 800a5d8:	a804      	add	r0, sp, #16
 800a5da:	f001 fd59 	bl	800c090 <matherr>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	f47f af1e 	bne.w	800a420 <pow+0xd0>
 800a5e4:	e7b5      	b.n	800a552 <pow+0x202>
 800a5e6:	bf00      	nop
 800a5e8:	200001f4 	.word	0x200001f4
 800a5ec:	0800c8b8 	.word	0x0800c8b8
 800a5f0:	3ff00000 	.word	0x3ff00000
 800a5f4:	fff00000 	.word	0xfff00000
 800a5f8:	3fe00000 	.word	0x3fe00000
 800a5fc:	47efffff 	.word	0x47efffff
 800a600:	c7efffff 	.word	0xc7efffff
 800a604:	7ff00000 	.word	0x7ff00000

0800a608 <sqrt>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	b08b      	sub	sp, #44	; 0x2c
 800a60e:	4604      	mov	r4, r0
 800a610:	460d      	mov	r5, r1
 800a612:	f000 ff49 	bl	800b4a8 <__ieee754_sqrt>
 800a616:	4b24      	ldr	r3, [pc, #144]	; (800a6a8 <sqrt+0xa0>)
 800a618:	4680      	mov	r8, r0
 800a61a:	f993 a000 	ldrsb.w	sl, [r3]
 800a61e:	4689      	mov	r9, r1
 800a620:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a624:	d02b      	beq.n	800a67e <sqrt+0x76>
 800a626:	4622      	mov	r2, r4
 800a628:	462b      	mov	r3, r5
 800a62a:	4620      	mov	r0, r4
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7f6 f9ed 	bl	8000a0c <__aeabi_dcmpun>
 800a632:	4683      	mov	fp, r0
 800a634:	bb18      	cbnz	r0, 800a67e <sqrt+0x76>
 800a636:	2600      	movs	r6, #0
 800a638:	2700      	movs	r7, #0
 800a63a:	4632      	mov	r2, r6
 800a63c:	463b      	mov	r3, r7
 800a63e:	4620      	mov	r0, r4
 800a640:	4629      	mov	r1, r5
 800a642:	f7f6 f9bb 	bl	80009bc <__aeabi_dcmplt>
 800a646:	b1d0      	cbz	r0, 800a67e <sqrt+0x76>
 800a648:	2301      	movs	r3, #1
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	4b17      	ldr	r3, [pc, #92]	; (800a6ac <sqrt+0xa4>)
 800a64e:	f8cd b020 	str.w	fp, [sp, #32]
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a658:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a65c:	f1ba 0f00 	cmp.w	sl, #0
 800a660:	d112      	bne.n	800a688 <sqrt+0x80>
 800a662:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a666:	4668      	mov	r0, sp
 800a668:	f001 fd12 	bl	800c090 <matherr>
 800a66c:	b1b8      	cbz	r0, 800a69e <sqrt+0x96>
 800a66e:	9b08      	ldr	r3, [sp, #32]
 800a670:	b11b      	cbz	r3, 800a67a <sqrt+0x72>
 800a672:	f7fd f8e9 	bl	8007848 <__errno>
 800a676:	9b08      	ldr	r3, [sp, #32]
 800a678:	6003      	str	r3, [r0, #0]
 800a67a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a67e:	4640      	mov	r0, r8
 800a680:	4649      	mov	r1, r9
 800a682:	b00b      	add	sp, #44	; 0x2c
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	4630      	mov	r0, r6
 800a68e:	4639      	mov	r1, r7
 800a690:	f7f6 f84c 	bl	800072c <__aeabi_ddiv>
 800a694:	f1ba 0f02 	cmp.w	sl, #2
 800a698:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a69c:	d1e3      	bne.n	800a666 <sqrt+0x5e>
 800a69e:	f7fd f8d3 	bl	8007848 <__errno>
 800a6a2:	2321      	movs	r3, #33	; 0x21
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	e7e2      	b.n	800a66e <sqrt+0x66>
 800a6a8:	200001f4 	.word	0x200001f4
 800a6ac:	0800c8bc 	.word	0x0800c8bc

0800a6b0 <__ieee754_pow>:
 800a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	b091      	sub	sp, #68	; 0x44
 800a6b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6ba:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a6be:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a6c2:	ea55 0302 	orrs.w	r3, r5, r2
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	4688      	mov	r8, r1
 800a6ca:	f000 84b7 	beq.w	800b03c <__ieee754_pow+0x98c>
 800a6ce:	4b80      	ldr	r3, [pc, #512]	; (800a8d0 <__ieee754_pow+0x220>)
 800a6d0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a6d4:	429c      	cmp	r4, r3
 800a6d6:	4689      	mov	r9, r1
 800a6d8:	4682      	mov	sl, r0
 800a6da:	dc09      	bgt.n	800a6f0 <__ieee754_pow+0x40>
 800a6dc:	d103      	bne.n	800a6e6 <__ieee754_pow+0x36>
 800a6de:	b938      	cbnz	r0, 800a6f0 <__ieee754_pow+0x40>
 800a6e0:	42a5      	cmp	r5, r4
 800a6e2:	dc0d      	bgt.n	800a700 <__ieee754_pow+0x50>
 800a6e4:	e001      	b.n	800a6ea <__ieee754_pow+0x3a>
 800a6e6:	429d      	cmp	r5, r3
 800a6e8:	dc02      	bgt.n	800a6f0 <__ieee754_pow+0x40>
 800a6ea:	429d      	cmp	r5, r3
 800a6ec:	d10e      	bne.n	800a70c <__ieee754_pow+0x5c>
 800a6ee:	b16a      	cbz	r2, 800a70c <__ieee754_pow+0x5c>
 800a6f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a6f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a6f8:	ea54 030a 	orrs.w	r3, r4, sl
 800a6fc:	f000 849e 	beq.w	800b03c <__ieee754_pow+0x98c>
 800a700:	4874      	ldr	r0, [pc, #464]	; (800a8d4 <__ieee754_pow+0x224>)
 800a702:	b011      	add	sp, #68	; 0x44
 800a704:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	f001 bcc4 	b.w	800c094 <nan>
 800a70c:	f1b9 0f00 	cmp.w	r9, #0
 800a710:	da53      	bge.n	800a7ba <__ieee754_pow+0x10a>
 800a712:	4b71      	ldr	r3, [pc, #452]	; (800a8d8 <__ieee754_pow+0x228>)
 800a714:	429d      	cmp	r5, r3
 800a716:	dc4e      	bgt.n	800a7b6 <__ieee754_pow+0x106>
 800a718:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a71c:	429d      	cmp	r5, r3
 800a71e:	dd4c      	ble.n	800a7ba <__ieee754_pow+0x10a>
 800a720:	152b      	asrs	r3, r5, #20
 800a722:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a726:	2b14      	cmp	r3, #20
 800a728:	dd28      	ble.n	800a77c <__ieee754_pow+0xcc>
 800a72a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a72e:	fa22 f103 	lsr.w	r1, r2, r3
 800a732:	fa01 f303 	lsl.w	r3, r1, r3
 800a736:	4293      	cmp	r3, r2
 800a738:	d13f      	bne.n	800a7ba <__ieee754_pow+0x10a>
 800a73a:	f001 0101 	and.w	r1, r1, #1
 800a73e:	f1c1 0302 	rsb	r3, r1, #2
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	2a00      	cmp	r2, #0
 800a746:	d15c      	bne.n	800a802 <__ieee754_pow+0x152>
 800a748:	4b61      	ldr	r3, [pc, #388]	; (800a8d0 <__ieee754_pow+0x220>)
 800a74a:	429d      	cmp	r5, r3
 800a74c:	d126      	bne.n	800a79c <__ieee754_pow+0xec>
 800a74e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a752:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a756:	ea53 030a 	orrs.w	r3, r3, sl
 800a75a:	f000 846f 	beq.w	800b03c <__ieee754_pow+0x98c>
 800a75e:	4b5f      	ldr	r3, [pc, #380]	; (800a8dc <__ieee754_pow+0x22c>)
 800a760:	429c      	cmp	r4, r3
 800a762:	dd2c      	ble.n	800a7be <__ieee754_pow+0x10e>
 800a764:	2e00      	cmp	r6, #0
 800a766:	f280 846f 	bge.w	800b048 <__ieee754_pow+0x998>
 800a76a:	f04f 0b00 	mov.w	fp, #0
 800a76e:	f04f 0c00 	mov.w	ip, #0
 800a772:	4658      	mov	r0, fp
 800a774:	4661      	mov	r1, ip
 800a776:	b011      	add	sp, #68	; 0x44
 800a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	d13e      	bne.n	800a7fe <__ieee754_pow+0x14e>
 800a780:	f1c3 0314 	rsb	r3, r3, #20
 800a784:	fa45 f103 	asr.w	r1, r5, r3
 800a788:	fa01 f303 	lsl.w	r3, r1, r3
 800a78c:	42ab      	cmp	r3, r5
 800a78e:	f040 8463 	bne.w	800b058 <__ieee754_pow+0x9a8>
 800a792:	f001 0101 	and.w	r1, r1, #1
 800a796:	f1c1 0302 	rsb	r3, r1, #2
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	4b50      	ldr	r3, [pc, #320]	; (800a8e0 <__ieee754_pow+0x230>)
 800a79e:	429d      	cmp	r5, r3
 800a7a0:	d114      	bne.n	800a7cc <__ieee754_pow+0x11c>
 800a7a2:	2e00      	cmp	r6, #0
 800a7a4:	f280 8454 	bge.w	800b050 <__ieee754_pow+0x9a0>
 800a7a8:	463a      	mov	r2, r7
 800a7aa:	4643      	mov	r3, r8
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	494c      	ldr	r1, [pc, #304]	; (800a8e0 <__ieee754_pow+0x230>)
 800a7b0:	f7f5 ffbc 	bl	800072c <__aeabi_ddiv>
 800a7b4:	e013      	b.n	800a7de <__ieee754_pow+0x12e>
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	e7c3      	b.n	800a742 <__ieee754_pow+0x92>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e7c1      	b.n	800a742 <__ieee754_pow+0x92>
 800a7be:	2e00      	cmp	r6, #0
 800a7c0:	dad3      	bge.n	800a76a <__ieee754_pow+0xba>
 800a7c2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a7c6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a7ca:	e7d2      	b.n	800a772 <__ieee754_pow+0xc2>
 800a7cc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a7d0:	d108      	bne.n	800a7e4 <__ieee754_pow+0x134>
 800a7d2:	463a      	mov	r2, r7
 800a7d4:	4643      	mov	r3, r8
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	4641      	mov	r1, r8
 800a7da:	f7f5 fe7d 	bl	80004d8 <__aeabi_dmul>
 800a7de:	4683      	mov	fp, r0
 800a7e0:	468c      	mov	ip, r1
 800a7e2:	e7c6      	b.n	800a772 <__ieee754_pow+0xc2>
 800a7e4:	4b3f      	ldr	r3, [pc, #252]	; (800a8e4 <__ieee754_pow+0x234>)
 800a7e6:	429e      	cmp	r6, r3
 800a7e8:	d10b      	bne.n	800a802 <__ieee754_pow+0x152>
 800a7ea:	f1b9 0f00 	cmp.w	r9, #0
 800a7ee:	db08      	blt.n	800a802 <__ieee754_pow+0x152>
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	4641      	mov	r1, r8
 800a7f4:	b011      	add	sp, #68	; 0x44
 800a7f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fa:	f000 be55 	b.w	800b4a8 <__ieee754_sqrt>
 800a7fe:	2300      	movs	r3, #0
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	4638      	mov	r0, r7
 800a804:	4641      	mov	r1, r8
 800a806:	f7ff fd65 	bl	800a2d4 <fabs>
 800a80a:	4683      	mov	fp, r0
 800a80c:	468c      	mov	ip, r1
 800a80e:	f1ba 0f00 	cmp.w	sl, #0
 800a812:	d12b      	bne.n	800a86c <__ieee754_pow+0x1bc>
 800a814:	b124      	cbz	r4, 800a820 <__ieee754_pow+0x170>
 800a816:	4b32      	ldr	r3, [pc, #200]	; (800a8e0 <__ieee754_pow+0x230>)
 800a818:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d125      	bne.n	800a86c <__ieee754_pow+0x1bc>
 800a820:	2e00      	cmp	r6, #0
 800a822:	da07      	bge.n	800a834 <__ieee754_pow+0x184>
 800a824:	465a      	mov	r2, fp
 800a826:	4663      	mov	r3, ip
 800a828:	2000      	movs	r0, #0
 800a82a:	492d      	ldr	r1, [pc, #180]	; (800a8e0 <__ieee754_pow+0x230>)
 800a82c:	f7f5 ff7e 	bl	800072c <__aeabi_ddiv>
 800a830:	4683      	mov	fp, r0
 800a832:	468c      	mov	ip, r1
 800a834:	f1b9 0f00 	cmp.w	r9, #0
 800a838:	da9b      	bge.n	800a772 <__ieee754_pow+0xc2>
 800a83a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a83e:	9b00      	ldr	r3, [sp, #0]
 800a840:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a844:	4323      	orrs	r3, r4
 800a846:	d108      	bne.n	800a85a <__ieee754_pow+0x1aa>
 800a848:	465a      	mov	r2, fp
 800a84a:	4663      	mov	r3, ip
 800a84c:	4658      	mov	r0, fp
 800a84e:	4661      	mov	r1, ip
 800a850:	f7f5 fc8a 	bl	8000168 <__aeabi_dsub>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	e7aa      	b.n	800a7b0 <__ieee754_pow+0x100>
 800a85a:	9b00      	ldr	r3, [sp, #0]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d188      	bne.n	800a772 <__ieee754_pow+0xc2>
 800a860:	4658      	mov	r0, fp
 800a862:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a866:	4683      	mov	fp, r0
 800a868:	469c      	mov	ip, r3
 800a86a:	e782      	b.n	800a772 <__ieee754_pow+0xc2>
 800a86c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800a870:	f109 33ff 	add.w	r3, r9, #4294967295
 800a874:	930d      	str	r3, [sp, #52]	; 0x34
 800a876:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	d104      	bne.n	800a888 <__ieee754_pow+0x1d8>
 800a87e:	463a      	mov	r2, r7
 800a880:	4643      	mov	r3, r8
 800a882:	4638      	mov	r0, r7
 800a884:	4641      	mov	r1, r8
 800a886:	e7e3      	b.n	800a850 <__ieee754_pow+0x1a0>
 800a888:	4b17      	ldr	r3, [pc, #92]	; (800a8e8 <__ieee754_pow+0x238>)
 800a88a:	429d      	cmp	r5, r3
 800a88c:	f340 80fe 	ble.w	800aa8c <__ieee754_pow+0x3dc>
 800a890:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a894:	429d      	cmp	r5, r3
 800a896:	dd0b      	ble.n	800a8b0 <__ieee754_pow+0x200>
 800a898:	4b10      	ldr	r3, [pc, #64]	; (800a8dc <__ieee754_pow+0x22c>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	dc0e      	bgt.n	800a8bc <__ieee754_pow+0x20c>
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	f6bf af63 	bge.w	800a76a <__ieee754_pow+0xba>
 800a8a4:	a308      	add	r3, pc, #32	; (adr r3, 800a8c8 <__ieee754_pow+0x218>)
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	e794      	b.n	800a7da <__ieee754_pow+0x12a>
 800a8b0:	4b0e      	ldr	r3, [pc, #56]	; (800a8ec <__ieee754_pow+0x23c>)
 800a8b2:	429c      	cmp	r4, r3
 800a8b4:	ddf3      	ble.n	800a89e <__ieee754_pow+0x1ee>
 800a8b6:	4b0a      	ldr	r3, [pc, #40]	; (800a8e0 <__ieee754_pow+0x230>)
 800a8b8:	429c      	cmp	r4, r3
 800a8ba:	dd19      	ble.n	800a8f0 <__ieee754_pow+0x240>
 800a8bc:	2e00      	cmp	r6, #0
 800a8be:	dcf1      	bgt.n	800a8a4 <__ieee754_pow+0x1f4>
 800a8c0:	e753      	b.n	800a76a <__ieee754_pow+0xba>
 800a8c2:	bf00      	nop
 800a8c4:	f3af 8000 	nop.w
 800a8c8:	8800759c 	.word	0x8800759c
 800a8cc:	7e37e43c 	.word	0x7e37e43c
 800a8d0:	7ff00000 	.word	0x7ff00000
 800a8d4:	0800c761 	.word	0x0800c761
 800a8d8:	433fffff 	.word	0x433fffff
 800a8dc:	3fefffff 	.word	0x3fefffff
 800a8e0:	3ff00000 	.word	0x3ff00000
 800a8e4:	3fe00000 	.word	0x3fe00000
 800a8e8:	41e00000 	.word	0x41e00000
 800a8ec:	3feffffe 	.word	0x3feffffe
 800a8f0:	4661      	mov	r1, ip
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4b60      	ldr	r3, [pc, #384]	; (800aa78 <__ieee754_pow+0x3c8>)
 800a8f6:	4658      	mov	r0, fp
 800a8f8:	f7f5 fc36 	bl	8000168 <__aeabi_dsub>
 800a8fc:	a354      	add	r3, pc, #336	; (adr r3, 800aa50 <__ieee754_pow+0x3a0>)
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	4604      	mov	r4, r0
 800a904:	460d      	mov	r5, r1
 800a906:	f7f5 fde7 	bl	80004d8 <__aeabi_dmul>
 800a90a:	a353      	add	r3, pc, #332	; (adr r3, 800aa58 <__ieee754_pow+0x3a8>)
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	4620      	mov	r0, r4
 800a916:	4629      	mov	r1, r5
 800a918:	f7f5 fdde 	bl	80004d8 <__aeabi_dmul>
 800a91c:	2200      	movs	r2, #0
 800a91e:	4682      	mov	sl, r0
 800a920:	468b      	mov	fp, r1
 800a922:	4b56      	ldr	r3, [pc, #344]	; (800aa7c <__ieee754_pow+0x3cc>)
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fdd6 	bl	80004d8 <__aeabi_dmul>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	a14b      	add	r1, pc, #300	; (adr r1, 800aa60 <__ieee754_pow+0x3b0>)
 800a932:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a936:	f7f5 fc17 	bl	8000168 <__aeabi_dsub>
 800a93a:	4622      	mov	r2, r4
 800a93c:	462b      	mov	r3, r5
 800a93e:	f7f5 fdcb 	bl	80004d8 <__aeabi_dmul>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	2000      	movs	r0, #0
 800a948:	494d      	ldr	r1, [pc, #308]	; (800aa80 <__ieee754_pow+0x3d0>)
 800a94a:	f7f5 fc0d 	bl	8000168 <__aeabi_dsub>
 800a94e:	4622      	mov	r2, r4
 800a950:	462b      	mov	r3, r5
 800a952:	4680      	mov	r8, r0
 800a954:	4689      	mov	r9, r1
 800a956:	4620      	mov	r0, r4
 800a958:	4629      	mov	r1, r5
 800a95a:	f7f5 fdbd 	bl	80004d8 <__aeabi_dmul>
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	4640      	mov	r0, r8
 800a964:	4649      	mov	r1, r9
 800a966:	f7f5 fdb7 	bl	80004d8 <__aeabi_dmul>
 800a96a:	a33f      	add	r3, pc, #252	; (adr r3, 800aa68 <__ieee754_pow+0x3b8>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	f7f5 fdb2 	bl	80004d8 <__aeabi_dmul>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4650      	mov	r0, sl
 800a97a:	4659      	mov	r1, fp
 800a97c:	f7f5 fbf4 	bl	8000168 <__aeabi_dsub>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f5 fbee 	bl	800016c <__adddf3>
 800a990:	2000      	movs	r0, #0
 800a992:	468b      	mov	fp, r1
 800a994:	4682      	mov	sl, r0
 800a996:	4632      	mov	r2, r6
 800a998:	463b      	mov	r3, r7
 800a99a:	f7f5 fbe5 	bl	8000168 <__aeabi_dsub>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	f7f5 fbdf 	bl	8000168 <__aeabi_dsub>
 800a9aa:	9b00      	ldr	r3, [sp, #0]
 800a9ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	bf0c      	ite	eq
 800a9b8:	4c32      	ldreq	r4, [pc, #200]	; (800aa84 <__ieee754_pow+0x3d4>)
 800a9ba:	4c2f      	ldrne	r4, [pc, #188]	; (800aa78 <__ieee754_pow+0x3c8>)
 800a9bc:	4606      	mov	r6, r0
 800a9be:	e9cd 3400 	strd	r3, r4, [sp]
 800a9c2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a9c6:	2400      	movs	r4, #0
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	462b      	mov	r3, r5
 800a9d2:	f7f5 fbc9 	bl	8000168 <__aeabi_dsub>
 800a9d6:	4652      	mov	r2, sl
 800a9d8:	465b      	mov	r3, fp
 800a9da:	f7f5 fd7d 	bl	80004d8 <__aeabi_dmul>
 800a9de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	4639      	mov	r1, r7
 800a9ea:	f7f5 fd75 	bl	80004d8 <__aeabi_dmul>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	f7f5 fbb9 	bl	800016c <__adddf3>
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	4680      	mov	r8, r0
 800aa00:	4689      	mov	r9, r1
 800aa02:	4650      	mov	r0, sl
 800aa04:	4659      	mov	r1, fp
 800aa06:	f7f5 fd67 	bl	80004d8 <__aeabi_dmul>
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4602      	mov	r2, r0
 800aa12:	4649      	mov	r1, r9
 800aa14:	4640      	mov	r0, r8
 800aa16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aa1a:	f7f5 fba7 	bl	800016c <__adddf3>
 800aa1e:	4b1a      	ldr	r3, [pc, #104]	; (800aa88 <__ieee754_pow+0x3d8>)
 800aa20:	4682      	mov	sl, r0
 800aa22:	4299      	cmp	r1, r3
 800aa24:	460f      	mov	r7, r1
 800aa26:	460e      	mov	r6, r1
 800aa28:	f340 82e1 	ble.w	800afee <__ieee754_pow+0x93e>
 800aa2c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aa30:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aa34:	4303      	orrs	r3, r0
 800aa36:	f000 81db 	beq.w	800adf0 <__ieee754_pow+0x740>
 800aa3a:	a30d      	add	r3, pc, #52	; (adr r3, 800aa70 <__ieee754_pow+0x3c0>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa44:	f7f5 fd48 	bl	80004d8 <__aeabi_dmul>
 800aa48:	a309      	add	r3, pc, #36	; (adr r3, 800aa70 <__ieee754_pow+0x3c0>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	e6c4      	b.n	800a7da <__ieee754_pow+0x12a>
 800aa50:	60000000 	.word	0x60000000
 800aa54:	3ff71547 	.word	0x3ff71547
 800aa58:	f85ddf44 	.word	0xf85ddf44
 800aa5c:	3e54ae0b 	.word	0x3e54ae0b
 800aa60:	55555555 	.word	0x55555555
 800aa64:	3fd55555 	.word	0x3fd55555
 800aa68:	652b82fe 	.word	0x652b82fe
 800aa6c:	3ff71547 	.word	0x3ff71547
 800aa70:	8800759c 	.word	0x8800759c
 800aa74:	7e37e43c 	.word	0x7e37e43c
 800aa78:	3ff00000 	.word	0x3ff00000
 800aa7c:	3fd00000 	.word	0x3fd00000
 800aa80:	3fe00000 	.word	0x3fe00000
 800aa84:	bff00000 	.word	0xbff00000
 800aa88:	408fffff 	.word	0x408fffff
 800aa8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aa90:	f04f 0200 	mov.w	r2, #0
 800aa94:	da08      	bge.n	800aaa8 <__ieee754_pow+0x3f8>
 800aa96:	4658      	mov	r0, fp
 800aa98:	4bcd      	ldr	r3, [pc, #820]	; (800add0 <__ieee754_pow+0x720>)
 800aa9a:	4661      	mov	r1, ip
 800aa9c:	f7f5 fd1c 	bl	80004d8 <__aeabi_dmul>
 800aaa0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aaa4:	4683      	mov	fp, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	1523      	asrs	r3, r4, #20
 800aaaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aaae:	4413      	add	r3, r2
 800aab0:	930c      	str	r3, [sp, #48]	; 0x30
 800aab2:	4bc8      	ldr	r3, [pc, #800]	; (800add4 <__ieee754_pow+0x724>)
 800aab4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aab8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aabc:	429c      	cmp	r4, r3
 800aabe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aac2:	dd08      	ble.n	800aad6 <__ieee754_pow+0x426>
 800aac4:	4bc4      	ldr	r3, [pc, #784]	; (800add8 <__ieee754_pow+0x728>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	f340 815b 	ble.w	800ad82 <__ieee754_pow+0x6d2>
 800aacc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aace:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aad2:	3301      	adds	r3, #1
 800aad4:	930c      	str	r3, [sp, #48]	; 0x30
 800aad6:	f04f 0800 	mov.w	r8, #0
 800aada:	4658      	mov	r0, fp
 800aadc:	4629      	mov	r1, r5
 800aade:	4bbf      	ldr	r3, [pc, #764]	; (800addc <__ieee754_pow+0x72c>)
 800aae0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800aae4:	444b      	add	r3, r9
 800aae6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	4623      	mov	r3, r4
 800aaf2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aaf6:	f7f5 fb37 	bl	8000168 <__aeabi_dsub>
 800aafa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aafe:	4606      	mov	r6, r0
 800ab00:	460f      	mov	r7, r1
 800ab02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab06:	f7f5 fb31 	bl	800016c <__adddf3>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	2000      	movs	r0, #0
 800ab10:	49b3      	ldr	r1, [pc, #716]	; (800ade0 <__ieee754_pow+0x730>)
 800ab12:	f7f5 fe0b 	bl	800072c <__aeabi_ddiv>
 800ab16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4630      	mov	r0, r6
 800ab20:	4639      	mov	r1, r7
 800ab22:	f7f5 fcd9 	bl	80004d8 <__aeabi_dmul>
 800ab26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab2a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ab2e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab32:	2300      	movs	r3, #0
 800ab34:	2200      	movs	r2, #0
 800ab36:	106d      	asrs	r5, r5, #1
 800ab38:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ab42:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ab46:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800ab4a:	4650      	mov	r0, sl
 800ab4c:	4659      	mov	r1, fp
 800ab4e:	4614      	mov	r4, r2
 800ab50:	461d      	mov	r5, r3
 800ab52:	f7f5 fcc1 	bl	80004d8 <__aeabi_dmul>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f5 fb03 	bl	8000168 <__aeabi_dsub>
 800ab62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab66:	4606      	mov	r6, r0
 800ab68:	460f      	mov	r7, r1
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7f5 fafb 	bl	8000168 <__aeabi_dsub>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab7a:	f7f5 faf5 	bl	8000168 <__aeabi_dsub>
 800ab7e:	4652      	mov	r2, sl
 800ab80:	465b      	mov	r3, fp
 800ab82:	f7f5 fca9 	bl	80004d8 <__aeabi_dmul>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 faeb 	bl	8000168 <__aeabi_dsub>
 800ab92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ab96:	f7f5 fc9f 	bl	80004d8 <__aeabi_dmul>
 800ab9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aba2:	4610      	mov	r0, r2
 800aba4:	4619      	mov	r1, r3
 800aba6:	f7f5 fc97 	bl	80004d8 <__aeabi_dmul>
 800abaa:	a377      	add	r3, pc, #476	; (adr r3, 800ad88 <__ieee754_pow+0x6d8>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	4604      	mov	r4, r0
 800abb2:	460d      	mov	r5, r1
 800abb4:	f7f5 fc90 	bl	80004d8 <__aeabi_dmul>
 800abb8:	a375      	add	r3, pc, #468	; (adr r3, 800ad90 <__ieee754_pow+0x6e0>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fad5 	bl	800016c <__adddf3>
 800abc2:	4622      	mov	r2, r4
 800abc4:	462b      	mov	r3, r5
 800abc6:	f7f5 fc87 	bl	80004d8 <__aeabi_dmul>
 800abca:	a373      	add	r3, pc, #460	; (adr r3, 800ad98 <__ieee754_pow+0x6e8>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 facc 	bl	800016c <__adddf3>
 800abd4:	4622      	mov	r2, r4
 800abd6:	462b      	mov	r3, r5
 800abd8:	f7f5 fc7e 	bl	80004d8 <__aeabi_dmul>
 800abdc:	a370      	add	r3, pc, #448	; (adr r3, 800ada0 <__ieee754_pow+0x6f0>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f7f5 fac3 	bl	800016c <__adddf3>
 800abe6:	4622      	mov	r2, r4
 800abe8:	462b      	mov	r3, r5
 800abea:	f7f5 fc75 	bl	80004d8 <__aeabi_dmul>
 800abee:	a36e      	add	r3, pc, #440	; (adr r3, 800ada8 <__ieee754_pow+0x6f8>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f7f5 faba 	bl	800016c <__adddf3>
 800abf8:	4622      	mov	r2, r4
 800abfa:	462b      	mov	r3, r5
 800abfc:	f7f5 fc6c 	bl	80004d8 <__aeabi_dmul>
 800ac00:	a36b      	add	r3, pc, #428	; (adr r3, 800adb0 <__ieee754_pow+0x700>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 fab1 	bl	800016c <__adddf3>
 800ac0a:	4622      	mov	r2, r4
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	460f      	mov	r7, r1
 800ac10:	462b      	mov	r3, r5
 800ac12:	4620      	mov	r0, r4
 800ac14:	4629      	mov	r1, r5
 800ac16:	f7f5 fc5f 	bl	80004d8 <__aeabi_dmul>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4630      	mov	r0, r6
 800ac20:	4639      	mov	r1, r7
 800ac22:	f7f5 fc59 	bl	80004d8 <__aeabi_dmul>
 800ac26:	4604      	mov	r4, r0
 800ac28:	460d      	mov	r5, r1
 800ac2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac2e:	4652      	mov	r2, sl
 800ac30:	465b      	mov	r3, fp
 800ac32:	f7f5 fa9b 	bl	800016c <__adddf3>
 800ac36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac3a:	f7f5 fc4d 	bl	80004d8 <__aeabi_dmul>
 800ac3e:	4622      	mov	r2, r4
 800ac40:	462b      	mov	r3, r5
 800ac42:	f7f5 fa93 	bl	800016c <__adddf3>
 800ac46:	4652      	mov	r2, sl
 800ac48:	4606      	mov	r6, r0
 800ac4a:	460f      	mov	r7, r1
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	4650      	mov	r0, sl
 800ac50:	4659      	mov	r1, fp
 800ac52:	f7f5 fc41 	bl	80004d8 <__aeabi_dmul>
 800ac56:	2200      	movs	r2, #0
 800ac58:	4b62      	ldr	r3, [pc, #392]	; (800ade4 <__ieee754_pow+0x734>)
 800ac5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac5e:	f7f5 fa85 	bl	800016c <__adddf3>
 800ac62:	4632      	mov	r2, r6
 800ac64:	463b      	mov	r3, r7
 800ac66:	f7f5 fa81 	bl	800016c <__adddf3>
 800ac6a:	9804      	ldr	r0, [sp, #16]
 800ac6c:	460d      	mov	r5, r1
 800ac6e:	4604      	mov	r4, r0
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4650      	mov	r0, sl
 800ac76:	4659      	mov	r1, fp
 800ac78:	f7f5 fc2e 	bl	80004d8 <__aeabi_dmul>
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	4682      	mov	sl, r0
 800ac80:	468b      	mov	fp, r1
 800ac82:	4b58      	ldr	r3, [pc, #352]	; (800ade4 <__ieee754_pow+0x734>)
 800ac84:	4620      	mov	r0, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	f7f5 fa6e 	bl	8000168 <__aeabi_dsub>
 800ac8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac90:	f7f5 fa6a 	bl	8000168 <__aeabi_dsub>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4630      	mov	r0, r6
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	f7f5 fa64 	bl	8000168 <__aeabi_dsub>
 800aca0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aca4:	f7f5 fc18 	bl	80004d8 <__aeabi_dmul>
 800aca8:	4622      	mov	r2, r4
 800acaa:	4606      	mov	r6, r0
 800acac:	460f      	mov	r7, r1
 800acae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acb2:	462b      	mov	r3, r5
 800acb4:	f7f5 fc10 	bl	80004d8 <__aeabi_dmul>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4630      	mov	r0, r6
 800acbe:	4639      	mov	r1, r7
 800acc0:	f7f5 fa54 	bl	800016c <__adddf3>
 800acc4:	4606      	mov	r6, r0
 800acc6:	460f      	mov	r7, r1
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4650      	mov	r0, sl
 800acce:	4659      	mov	r1, fp
 800acd0:	f7f5 fa4c 	bl	800016c <__adddf3>
 800acd4:	a338      	add	r3, pc, #224	; (adr r3, 800adb8 <__ieee754_pow+0x708>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	9804      	ldr	r0, [sp, #16]
 800acdc:	460d      	mov	r5, r1
 800acde:	4604      	mov	r4, r0
 800ace0:	f7f5 fbfa 	bl	80004d8 <__aeabi_dmul>
 800ace4:	4652      	mov	r2, sl
 800ace6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acea:	465b      	mov	r3, fp
 800acec:	4620      	mov	r0, r4
 800acee:	4629      	mov	r1, r5
 800acf0:	f7f5 fa3a 	bl	8000168 <__aeabi_dsub>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4630      	mov	r0, r6
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 fa34 	bl	8000168 <__aeabi_dsub>
 800ad00:	a32f      	add	r3, pc, #188	; (adr r3, 800adc0 <__ieee754_pow+0x710>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fbe7 	bl	80004d8 <__aeabi_dmul>
 800ad0a:	a32f      	add	r3, pc, #188	; (adr r3, 800adc8 <__ieee754_pow+0x718>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	4606      	mov	r6, r0
 800ad12:	460f      	mov	r7, r1
 800ad14:	4620      	mov	r0, r4
 800ad16:	4629      	mov	r1, r5
 800ad18:	f7f5 fbde 	bl	80004d8 <__aeabi_dmul>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4630      	mov	r0, r6
 800ad22:	4639      	mov	r1, r7
 800ad24:	f7f5 fa22 	bl	800016c <__adddf3>
 800ad28:	4b2f      	ldr	r3, [pc, #188]	; (800ade8 <__ieee754_pow+0x738>)
 800ad2a:	444b      	add	r3, r9
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 fa1c 	bl	800016c <__adddf3>
 800ad34:	4604      	mov	r4, r0
 800ad36:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad38:	460d      	mov	r5, r1
 800ad3a:	f7f5 fb63 	bl	8000404 <__aeabi_i2d>
 800ad3e:	4606      	mov	r6, r0
 800ad40:	460f      	mov	r7, r1
 800ad42:	4b2a      	ldr	r3, [pc, #168]	; (800adec <__ieee754_pow+0x73c>)
 800ad44:	4622      	mov	r2, r4
 800ad46:	444b      	add	r3, r9
 800ad48:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad4c:	462b      	mov	r3, r5
 800ad4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad52:	f7f5 fa0b 	bl	800016c <__adddf3>
 800ad56:	4642      	mov	r2, r8
 800ad58:	464b      	mov	r3, r9
 800ad5a:	f7f5 fa07 	bl	800016c <__adddf3>
 800ad5e:	4632      	mov	r2, r6
 800ad60:	463b      	mov	r3, r7
 800ad62:	f7f5 fa03 	bl	800016c <__adddf3>
 800ad66:	9804      	ldr	r0, [sp, #16]
 800ad68:	4632      	mov	r2, r6
 800ad6a:	463b      	mov	r3, r7
 800ad6c:	4682      	mov	sl, r0
 800ad6e:	468b      	mov	fp, r1
 800ad70:	f7f5 f9fa 	bl	8000168 <__aeabi_dsub>
 800ad74:	4642      	mov	r2, r8
 800ad76:	464b      	mov	r3, r9
 800ad78:	f7f5 f9f6 	bl	8000168 <__aeabi_dsub>
 800ad7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad80:	e60b      	b.n	800a99a <__ieee754_pow+0x2ea>
 800ad82:	f04f 0801 	mov.w	r8, #1
 800ad86:	e6a8      	b.n	800aada <__ieee754_pow+0x42a>
 800ad88:	4a454eef 	.word	0x4a454eef
 800ad8c:	3fca7e28 	.word	0x3fca7e28
 800ad90:	93c9db65 	.word	0x93c9db65
 800ad94:	3fcd864a 	.word	0x3fcd864a
 800ad98:	a91d4101 	.word	0xa91d4101
 800ad9c:	3fd17460 	.word	0x3fd17460
 800ada0:	518f264d 	.word	0x518f264d
 800ada4:	3fd55555 	.word	0x3fd55555
 800ada8:	db6fabff 	.word	0xdb6fabff
 800adac:	3fdb6db6 	.word	0x3fdb6db6
 800adb0:	33333303 	.word	0x33333303
 800adb4:	3fe33333 	.word	0x3fe33333
 800adb8:	e0000000 	.word	0xe0000000
 800adbc:	3feec709 	.word	0x3feec709
 800adc0:	dc3a03fd 	.word	0xdc3a03fd
 800adc4:	3feec709 	.word	0x3feec709
 800adc8:	145b01f5 	.word	0x145b01f5
 800adcc:	be3e2fe0 	.word	0xbe3e2fe0
 800add0:	43400000 	.word	0x43400000
 800add4:	0003988e 	.word	0x0003988e
 800add8:	000bb679 	.word	0x000bb679
 800addc:	0800c8c8 	.word	0x0800c8c8
 800ade0:	3ff00000 	.word	0x3ff00000
 800ade4:	40080000 	.word	0x40080000
 800ade8:	0800c8e8 	.word	0x0800c8e8
 800adec:	0800c8d8 	.word	0x0800c8d8
 800adf0:	a39b      	add	r3, pc, #620	; (adr r3, 800b060 <__ieee754_pow+0x9b0>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	4640      	mov	r0, r8
 800adf8:	4649      	mov	r1, r9
 800adfa:	f7f5 f9b7 	bl	800016c <__adddf3>
 800adfe:	4622      	mov	r2, r4
 800ae00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae04:	462b      	mov	r3, r5
 800ae06:	4650      	mov	r0, sl
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7f5 f9ad 	bl	8000168 <__aeabi_dsub>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae16:	f7f5 fdef 	bl	80009f8 <__aeabi_dcmpgt>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f47f ae0d 	bne.w	800aa3a <__ieee754_pow+0x38a>
 800ae20:	4aa3      	ldr	r2, [pc, #652]	; (800b0b0 <__ieee754_pow+0xa00>)
 800ae22:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ae26:	4293      	cmp	r3, r2
 800ae28:	f340 8103 	ble.w	800b032 <__ieee754_pow+0x982>
 800ae2c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ae30:	2000      	movs	r0, #0
 800ae32:	151b      	asrs	r3, r3, #20
 800ae34:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ae38:	fa4a f303 	asr.w	r3, sl, r3
 800ae3c:	4433      	add	r3, r6
 800ae3e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ae42:	4f9c      	ldr	r7, [pc, #624]	; (800b0b4 <__ieee754_pow+0xa04>)
 800ae44:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae48:	4117      	asrs	r7, r2
 800ae4a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ae4e:	ea23 0107 	bic.w	r1, r3, r7
 800ae52:	f1c2 0214 	rsb	r2, r2, #20
 800ae56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ae5a:	fa4a fa02 	asr.w	sl, sl, r2
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4620      	mov	r0, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	bfb8      	it	lt
 800ae6a:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae6e:	f7f5 f97b 	bl	8000168 <__aeabi_dsub>
 800ae72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7a:	4642      	mov	r2, r8
 800ae7c:	464b      	mov	r3, r9
 800ae7e:	f7f5 f975 	bl	800016c <__adddf3>
 800ae82:	a379      	add	r3, pc, #484	; (adr r3, 800b068 <__ieee754_pow+0x9b8>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	2000      	movs	r0, #0
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	f7f5 fb23 	bl	80004d8 <__aeabi_dmul>
 800ae92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae96:	4606      	mov	r6, r0
 800ae98:	460f      	mov	r7, r1
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	f7f5 f963 	bl	8000168 <__aeabi_dsub>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	4640      	mov	r0, r8
 800aea8:	4649      	mov	r1, r9
 800aeaa:	f7f5 f95d 	bl	8000168 <__aeabi_dsub>
 800aeae:	a370      	add	r3, pc, #448	; (adr r3, 800b070 <__ieee754_pow+0x9c0>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f7f5 fb10 	bl	80004d8 <__aeabi_dmul>
 800aeb8:	a36f      	add	r3, pc, #444	; (adr r3, 800b078 <__ieee754_pow+0x9c8>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	4680      	mov	r8, r0
 800aec0:	4689      	mov	r9, r1
 800aec2:	4620      	mov	r0, r4
 800aec4:	4629      	mov	r1, r5
 800aec6:	f7f5 fb07 	bl	80004d8 <__aeabi_dmul>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4640      	mov	r0, r8
 800aed0:	4649      	mov	r1, r9
 800aed2:	f7f5 f94b 	bl	800016c <__adddf3>
 800aed6:	4604      	mov	r4, r0
 800aed8:	460d      	mov	r5, r1
 800aeda:	4602      	mov	r2, r0
 800aedc:	460b      	mov	r3, r1
 800aede:	4630      	mov	r0, r6
 800aee0:	4639      	mov	r1, r7
 800aee2:	f7f5 f943 	bl	800016c <__adddf3>
 800aee6:	4632      	mov	r2, r6
 800aee8:	463b      	mov	r3, r7
 800aeea:	4680      	mov	r8, r0
 800aeec:	4689      	mov	r9, r1
 800aeee:	f7f5 f93b 	bl	8000168 <__aeabi_dsub>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4620      	mov	r0, r4
 800aef8:	4629      	mov	r1, r5
 800aefa:	f7f5 f935 	bl	8000168 <__aeabi_dsub>
 800aefe:	4642      	mov	r2, r8
 800af00:	4606      	mov	r6, r0
 800af02:	460f      	mov	r7, r1
 800af04:	464b      	mov	r3, r9
 800af06:	4640      	mov	r0, r8
 800af08:	4649      	mov	r1, r9
 800af0a:	f7f5 fae5 	bl	80004d8 <__aeabi_dmul>
 800af0e:	a35c      	add	r3, pc, #368	; (adr r3, 800b080 <__ieee754_pow+0x9d0>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
 800af18:	f7f5 fade 	bl	80004d8 <__aeabi_dmul>
 800af1c:	a35a      	add	r3, pc, #360	; (adr r3, 800b088 <__ieee754_pow+0x9d8>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	f7f5 f921 	bl	8000168 <__aeabi_dsub>
 800af26:	4622      	mov	r2, r4
 800af28:	462b      	mov	r3, r5
 800af2a:	f7f5 fad5 	bl	80004d8 <__aeabi_dmul>
 800af2e:	a358      	add	r3, pc, #352	; (adr r3, 800b090 <__ieee754_pow+0x9e0>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	f7f5 f91a 	bl	800016c <__adddf3>
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	f7f5 facc 	bl	80004d8 <__aeabi_dmul>
 800af40:	a355      	add	r3, pc, #340	; (adr r3, 800b098 <__ieee754_pow+0x9e8>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 f90f 	bl	8000168 <__aeabi_dsub>
 800af4a:	4622      	mov	r2, r4
 800af4c:	462b      	mov	r3, r5
 800af4e:	f7f5 fac3 	bl	80004d8 <__aeabi_dmul>
 800af52:	a353      	add	r3, pc, #332	; (adr r3, 800b0a0 <__ieee754_pow+0x9f0>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f7f5 f908 	bl	800016c <__adddf3>
 800af5c:	4622      	mov	r2, r4
 800af5e:	462b      	mov	r3, r5
 800af60:	f7f5 faba 	bl	80004d8 <__aeabi_dmul>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	4640      	mov	r0, r8
 800af6a:	4649      	mov	r1, r9
 800af6c:	f7f5 f8fc 	bl	8000168 <__aeabi_dsub>
 800af70:	4604      	mov	r4, r0
 800af72:	460d      	mov	r5, r1
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4640      	mov	r0, r8
 800af7a:	4649      	mov	r1, r9
 800af7c:	f7f5 faac 	bl	80004d8 <__aeabi_dmul>
 800af80:	2200      	movs	r2, #0
 800af82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af8a:	4620      	mov	r0, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7f5 f8eb 	bl	8000168 <__aeabi_dsub>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af9a:	f7f5 fbc7 	bl	800072c <__aeabi_ddiv>
 800af9e:	4632      	mov	r2, r6
 800afa0:	4604      	mov	r4, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	463b      	mov	r3, r7
 800afa6:	4640      	mov	r0, r8
 800afa8:	4649      	mov	r1, r9
 800afaa:	f7f5 fa95 	bl	80004d8 <__aeabi_dmul>
 800afae:	4632      	mov	r2, r6
 800afb0:	463b      	mov	r3, r7
 800afb2:	f7f5 f8db 	bl	800016c <__adddf3>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4620      	mov	r0, r4
 800afbc:	4629      	mov	r1, r5
 800afbe:	f7f5 f8d3 	bl	8000168 <__aeabi_dsub>
 800afc2:	4642      	mov	r2, r8
 800afc4:	464b      	mov	r3, r9
 800afc6:	f7f5 f8cf 	bl	8000168 <__aeabi_dsub>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	2000      	movs	r0, #0
 800afd0:	4939      	ldr	r1, [pc, #228]	; (800b0b8 <__ieee754_pow+0xa08>)
 800afd2:	f7f5 f8c9 	bl	8000168 <__aeabi_dsub>
 800afd6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800afda:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800afde:	da2b      	bge.n	800b038 <__ieee754_pow+0x988>
 800afe0:	4652      	mov	r2, sl
 800afe2:	f001 f8e9 	bl	800c1b8 <scalbn>
 800afe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afea:	f7ff bbf6 	b.w	800a7da <__ieee754_pow+0x12a>
 800afee:	4b33      	ldr	r3, [pc, #204]	; (800b0bc <__ieee754_pow+0xa0c>)
 800aff0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800aff4:	429f      	cmp	r7, r3
 800aff6:	f77f af13 	ble.w	800ae20 <__ieee754_pow+0x770>
 800affa:	4b31      	ldr	r3, [pc, #196]	; (800b0c0 <__ieee754_pow+0xa10>)
 800affc:	440b      	add	r3, r1
 800affe:	4303      	orrs	r3, r0
 800b000:	d00b      	beq.n	800b01a <__ieee754_pow+0x96a>
 800b002:	a329      	add	r3, pc, #164	; (adr r3, 800b0a8 <__ieee754_pow+0x9f8>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b00c:	f7f5 fa64 	bl	80004d8 <__aeabi_dmul>
 800b010:	a325      	add	r3, pc, #148	; (adr r3, 800b0a8 <__ieee754_pow+0x9f8>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7ff bbe0 	b.w	800a7da <__ieee754_pow+0x12a>
 800b01a:	4622      	mov	r2, r4
 800b01c:	462b      	mov	r3, r5
 800b01e:	f7f5 f8a3 	bl	8000168 <__aeabi_dsub>
 800b022:	4642      	mov	r2, r8
 800b024:	464b      	mov	r3, r9
 800b026:	f7f5 fcdd 	bl	80009e4 <__aeabi_dcmpge>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	f43f aef8 	beq.w	800ae20 <__ieee754_pow+0x770>
 800b030:	e7e7      	b.n	800b002 <__ieee754_pow+0x952>
 800b032:	f04f 0a00 	mov.w	sl, #0
 800b036:	e71e      	b.n	800ae76 <__ieee754_pow+0x7c6>
 800b038:	4621      	mov	r1, r4
 800b03a:	e7d4      	b.n	800afe6 <__ieee754_pow+0x936>
 800b03c:	f04f 0b00 	mov.w	fp, #0
 800b040:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b0b8 <__ieee754_pow+0xa08>
 800b044:	f7ff bb95 	b.w	800a772 <__ieee754_pow+0xc2>
 800b048:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b04c:	f7ff bb91 	b.w	800a772 <__ieee754_pow+0xc2>
 800b050:	4638      	mov	r0, r7
 800b052:	4641      	mov	r1, r8
 800b054:	f7ff bbc3 	b.w	800a7de <__ieee754_pow+0x12e>
 800b058:	9200      	str	r2, [sp, #0]
 800b05a:	f7ff bb9f 	b.w	800a79c <__ieee754_pow+0xec>
 800b05e:	bf00      	nop
 800b060:	652b82fe 	.word	0x652b82fe
 800b064:	3c971547 	.word	0x3c971547
 800b068:	00000000 	.word	0x00000000
 800b06c:	3fe62e43 	.word	0x3fe62e43
 800b070:	fefa39ef 	.word	0xfefa39ef
 800b074:	3fe62e42 	.word	0x3fe62e42
 800b078:	0ca86c39 	.word	0x0ca86c39
 800b07c:	be205c61 	.word	0xbe205c61
 800b080:	72bea4d0 	.word	0x72bea4d0
 800b084:	3e663769 	.word	0x3e663769
 800b088:	c5d26bf1 	.word	0xc5d26bf1
 800b08c:	3ebbbd41 	.word	0x3ebbbd41
 800b090:	af25de2c 	.word	0xaf25de2c
 800b094:	3f11566a 	.word	0x3f11566a
 800b098:	16bebd93 	.word	0x16bebd93
 800b09c:	3f66c16c 	.word	0x3f66c16c
 800b0a0:	5555553e 	.word	0x5555553e
 800b0a4:	3fc55555 	.word	0x3fc55555
 800b0a8:	c2f8f359 	.word	0xc2f8f359
 800b0ac:	01a56e1f 	.word	0x01a56e1f
 800b0b0:	3fe00000 	.word	0x3fe00000
 800b0b4:	000fffff 	.word	0x000fffff
 800b0b8:	3ff00000 	.word	0x3ff00000
 800b0bc:	4090cbff 	.word	0x4090cbff
 800b0c0:	3f6f3400 	.word	0x3f6f3400
 800b0c4:	00000000 	.word	0x00000000

0800b0c8 <__ieee754_rem_pio2>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	4614      	mov	r4, r2
 800b0ce:	4ac2      	ldr	r2, [pc, #776]	; (800b3d8 <__ieee754_rem_pio2+0x310>)
 800b0d0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b0d4:	4592      	cmp	sl, r2
 800b0d6:	b08d      	sub	sp, #52	; 0x34
 800b0d8:	468b      	mov	fp, r1
 800b0da:	dc07      	bgt.n	800b0ec <__ieee754_rem_pio2+0x24>
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e9c4 0100 	strd	r0, r1, [r4]
 800b0e4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b0e8:	2500      	movs	r5, #0
 800b0ea:	e023      	b.n	800b134 <__ieee754_rem_pio2+0x6c>
 800b0ec:	4abb      	ldr	r2, [pc, #748]	; (800b3dc <__ieee754_rem_pio2+0x314>)
 800b0ee:	4592      	cmp	sl, r2
 800b0f0:	dc71      	bgt.n	800b1d6 <__ieee754_rem_pio2+0x10e>
 800b0f2:	a3ab      	add	r3, pc, #684	; (adr r3, 800b3a0 <__ieee754_rem_pio2+0x2d8>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	2900      	cmp	r1, #0
 800b0fa:	4db9      	ldr	r5, [pc, #740]	; (800b3e0 <__ieee754_rem_pio2+0x318>)
 800b0fc:	dd36      	ble.n	800b16c <__ieee754_rem_pio2+0xa4>
 800b0fe:	f7f5 f833 	bl	8000168 <__aeabi_dsub>
 800b102:	45aa      	cmp	sl, r5
 800b104:	4606      	mov	r6, r0
 800b106:	460f      	mov	r7, r1
 800b108:	d018      	beq.n	800b13c <__ieee754_rem_pio2+0x74>
 800b10a:	a3a7      	add	r3, pc, #668	; (adr r3, 800b3a8 <__ieee754_rem_pio2+0x2e0>)
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f7f5 f82a 	bl	8000168 <__aeabi_dsub>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4630      	mov	r0, r6
 800b11a:	e9c4 2300 	strd	r2, r3, [r4]
 800b11e:	4639      	mov	r1, r7
 800b120:	f7f5 f822 	bl	8000168 <__aeabi_dsub>
 800b124:	a3a0      	add	r3, pc, #640	; (adr r3, 800b3a8 <__ieee754_rem_pio2+0x2e0>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f7f5 f81d 	bl	8000168 <__aeabi_dsub>
 800b12e:	2501      	movs	r5, #1
 800b130:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b134:	4628      	mov	r0, r5
 800b136:	b00d      	add	sp, #52	; 0x34
 800b138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13c:	a39c      	add	r3, pc, #624	; (adr r3, 800b3b0 <__ieee754_rem_pio2+0x2e8>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f7f5 f811 	bl	8000168 <__aeabi_dsub>
 800b146:	a39c      	add	r3, pc, #624	; (adr r3, 800b3b8 <__ieee754_rem_pio2+0x2f0>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	4606      	mov	r6, r0
 800b14e:	460f      	mov	r7, r1
 800b150:	f7f5 f80a 	bl	8000168 <__aeabi_dsub>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4630      	mov	r0, r6
 800b15a:	e9c4 2300 	strd	r2, r3, [r4]
 800b15e:	4639      	mov	r1, r7
 800b160:	f7f5 f802 	bl	8000168 <__aeabi_dsub>
 800b164:	a394      	add	r3, pc, #592	; (adr r3, 800b3b8 <__ieee754_rem_pio2+0x2f0>)
 800b166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16a:	e7de      	b.n	800b12a <__ieee754_rem_pio2+0x62>
 800b16c:	f7f4 fffe 	bl	800016c <__adddf3>
 800b170:	45aa      	cmp	sl, r5
 800b172:	4606      	mov	r6, r0
 800b174:	460f      	mov	r7, r1
 800b176:	d016      	beq.n	800b1a6 <__ieee754_rem_pio2+0xde>
 800b178:	a38b      	add	r3, pc, #556	; (adr r3, 800b3a8 <__ieee754_rem_pio2+0x2e0>)
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	f7f4 fff5 	bl	800016c <__adddf3>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4630      	mov	r0, r6
 800b188:	e9c4 2300 	strd	r2, r3, [r4]
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f4 ffeb 	bl	8000168 <__aeabi_dsub>
 800b192:	a385      	add	r3, pc, #532	; (adr r3, 800b3a8 <__ieee754_rem_pio2+0x2e0>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f7f4 ffe8 	bl	800016c <__adddf3>
 800b19c:	f04f 35ff 	mov.w	r5, #4294967295
 800b1a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1a4:	e7c6      	b.n	800b134 <__ieee754_rem_pio2+0x6c>
 800b1a6:	a382      	add	r3, pc, #520	; (adr r3, 800b3b0 <__ieee754_rem_pio2+0x2e8>)
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	f7f4 ffde 	bl	800016c <__adddf3>
 800b1b0:	a381      	add	r3, pc, #516	; (adr r3, 800b3b8 <__ieee754_rem_pio2+0x2f0>)
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	f7f4 ffd7 	bl	800016c <__adddf3>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	e9c4 2300 	strd	r2, r3, [r4]
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	f7f4 ffcd 	bl	8000168 <__aeabi_dsub>
 800b1ce:	a37a      	add	r3, pc, #488	; (adr r3, 800b3b8 <__ieee754_rem_pio2+0x2f0>)
 800b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d4:	e7e0      	b.n	800b198 <__ieee754_rem_pio2+0xd0>
 800b1d6:	4a83      	ldr	r2, [pc, #524]	; (800b3e4 <__ieee754_rem_pio2+0x31c>)
 800b1d8:	4592      	cmp	sl, r2
 800b1da:	f300 80d2 	bgt.w	800b382 <__ieee754_rem_pio2+0x2ba>
 800b1de:	f7ff f879 	bl	800a2d4 <fabs>
 800b1e2:	a377      	add	r3, pc, #476	; (adr r3, 800b3c0 <__ieee754_rem_pio2+0x2f8>)
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	460f      	mov	r7, r1
 800b1ec:	f7f5 f974 	bl	80004d8 <__aeabi_dmul>
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	4b7d      	ldr	r3, [pc, #500]	; (800b3e8 <__ieee754_rem_pio2+0x320>)
 800b1f4:	f7f4 ffba 	bl	800016c <__adddf3>
 800b1f8:	f7f5 fc1e 	bl	8000a38 <__aeabi_d2iz>
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	f7f5 f901 	bl	8000404 <__aeabi_i2d>
 800b202:	a367      	add	r3, pc, #412	; (adr r3, 800b3a0 <__ieee754_rem_pio2+0x2d8>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b20c:	f7f5 f964 	bl	80004d8 <__aeabi_dmul>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4630      	mov	r0, r6
 800b216:	4639      	mov	r1, r7
 800b218:	f7f4 ffa6 	bl	8000168 <__aeabi_dsub>
 800b21c:	a362      	add	r3, pc, #392	; (adr r3, 800b3a8 <__ieee754_rem_pio2+0x2e0>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	4606      	mov	r6, r0
 800b224:	460f      	mov	r7, r1
 800b226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b22a:	f7f5 f955 	bl	80004d8 <__aeabi_dmul>
 800b22e:	2d1f      	cmp	r5, #31
 800b230:	4680      	mov	r8, r0
 800b232:	4689      	mov	r9, r1
 800b234:	dc0e      	bgt.n	800b254 <__ieee754_rem_pio2+0x18c>
 800b236:	4b6d      	ldr	r3, [pc, #436]	; (800b3ec <__ieee754_rem_pio2+0x324>)
 800b238:	1e6a      	subs	r2, r5, #1
 800b23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23e:	4553      	cmp	r3, sl
 800b240:	d008      	beq.n	800b254 <__ieee754_rem_pio2+0x18c>
 800b242:	4642      	mov	r2, r8
 800b244:	464b      	mov	r3, r9
 800b246:	4630      	mov	r0, r6
 800b248:	4639      	mov	r1, r7
 800b24a:	f7f4 ff8d 	bl	8000168 <__aeabi_dsub>
 800b24e:	e9c4 0100 	strd	r0, r1, [r4]
 800b252:	e011      	b.n	800b278 <__ieee754_rem_pio2+0x1b0>
 800b254:	464b      	mov	r3, r9
 800b256:	4642      	mov	r2, r8
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f4 ff84 	bl	8000168 <__aeabi_dsub>
 800b260:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b264:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b268:	ebaa 0303 	sub.w	r3, sl, r3
 800b26c:	2b10      	cmp	r3, #16
 800b26e:	dc1f      	bgt.n	800b2b0 <__ieee754_rem_pio2+0x1e8>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	e9c4 2300 	strd	r2, r3, [r4]
 800b278:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b27c:	4630      	mov	r0, r6
 800b27e:	4653      	mov	r3, sl
 800b280:	4639      	mov	r1, r7
 800b282:	f7f4 ff71 	bl	8000168 <__aeabi_dsub>
 800b286:	4642      	mov	r2, r8
 800b288:	464b      	mov	r3, r9
 800b28a:	f7f4 ff6d 	bl	8000168 <__aeabi_dsub>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	f1bb 0f00 	cmp.w	fp, #0
 800b296:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b29a:	f6bf af4b 	bge.w	800b134 <__ieee754_rem_pio2+0x6c>
 800b29e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b2a2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800b2a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b2aa:	60e1      	str	r1, [r4, #12]
 800b2ac:	426d      	negs	r5, r5
 800b2ae:	e741      	b.n	800b134 <__ieee754_rem_pio2+0x6c>
 800b2b0:	a33f      	add	r3, pc, #252	; (adr r3, 800b3b0 <__ieee754_rem_pio2+0x2e8>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ba:	f7f5 f90d 	bl	80004d8 <__aeabi_dmul>
 800b2be:	4680      	mov	r8, r0
 800b2c0:	4689      	mov	r9, r1
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	f7f4 ff4d 	bl	8000168 <__aeabi_dsub>
 800b2ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	4639      	mov	r1, r7
 800b2da:	f7f4 ff45 	bl	8000168 <__aeabi_dsub>
 800b2de:	4642      	mov	r2, r8
 800b2e0:	464b      	mov	r3, r9
 800b2e2:	f7f4 ff41 	bl	8000168 <__aeabi_dsub>
 800b2e6:	a334      	add	r3, pc, #208	; (adr r3, 800b3b8 <__ieee754_rem_pio2+0x2f0>)
 800b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	460f      	mov	r7, r1
 800b2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2f4:	f7f5 f8f0 	bl	80004d8 <__aeabi_dmul>
 800b2f8:	4632      	mov	r2, r6
 800b2fa:	463b      	mov	r3, r7
 800b2fc:	f7f4 ff34 	bl	8000168 <__aeabi_dsub>
 800b300:	460b      	mov	r3, r1
 800b302:	4602      	mov	r2, r0
 800b304:	4680      	mov	r8, r0
 800b306:	4689      	mov	r9, r1
 800b308:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b30c:	f7f4 ff2c 	bl	8000168 <__aeabi_dsub>
 800b310:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b314:	ebaa 0a03 	sub.w	sl, sl, r3
 800b318:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b31c:	dc06      	bgt.n	800b32c <__ieee754_rem_pio2+0x264>
 800b31e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	e9c4 2300 	strd	r2, r3, [r4]
 800b32a:	e7a5      	b.n	800b278 <__ieee754_rem_pio2+0x1b0>
 800b32c:	a326      	add	r3, pc, #152	; (adr r3, 800b3c8 <__ieee754_rem_pio2+0x300>)
 800b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b336:	f7f5 f8cf 	bl	80004d8 <__aeabi_dmul>
 800b33a:	4680      	mov	r8, r0
 800b33c:	4689      	mov	r9, r1
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b346:	f7f4 ff0f 	bl	8000168 <__aeabi_dsub>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4606      	mov	r6, r0
 800b350:	460f      	mov	r7, r1
 800b352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b356:	f7f4 ff07 	bl	8000168 <__aeabi_dsub>
 800b35a:	4642      	mov	r2, r8
 800b35c:	464b      	mov	r3, r9
 800b35e:	f7f4 ff03 	bl	8000168 <__aeabi_dsub>
 800b362:	a31b      	add	r3, pc, #108	; (adr r3, 800b3d0 <__ieee754_rem_pio2+0x308>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	4680      	mov	r8, r0
 800b36a:	4689      	mov	r9, r1
 800b36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b370:	f7f5 f8b2 	bl	80004d8 <__aeabi_dmul>
 800b374:	4642      	mov	r2, r8
 800b376:	464b      	mov	r3, r9
 800b378:	f7f4 fef6 	bl	8000168 <__aeabi_dsub>
 800b37c:	4680      	mov	r8, r0
 800b37e:	4689      	mov	r9, r1
 800b380:	e75f      	b.n	800b242 <__ieee754_rem_pio2+0x17a>
 800b382:	4a1b      	ldr	r2, [pc, #108]	; (800b3f0 <__ieee754_rem_pio2+0x328>)
 800b384:	4592      	cmp	sl, r2
 800b386:	dd35      	ble.n	800b3f4 <__ieee754_rem_pio2+0x32c>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	f7f4 feec 	bl	8000168 <__aeabi_dsub>
 800b390:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b394:	e9c4 0100 	strd	r0, r1, [r4]
 800b398:	e6a6      	b.n	800b0e8 <__ieee754_rem_pio2+0x20>
 800b39a:	bf00      	nop
 800b39c:	f3af 8000 	nop.w
 800b3a0:	54400000 	.word	0x54400000
 800b3a4:	3ff921fb 	.word	0x3ff921fb
 800b3a8:	1a626331 	.word	0x1a626331
 800b3ac:	3dd0b461 	.word	0x3dd0b461
 800b3b0:	1a600000 	.word	0x1a600000
 800b3b4:	3dd0b461 	.word	0x3dd0b461
 800b3b8:	2e037073 	.word	0x2e037073
 800b3bc:	3ba3198a 	.word	0x3ba3198a
 800b3c0:	6dc9c883 	.word	0x6dc9c883
 800b3c4:	3fe45f30 	.word	0x3fe45f30
 800b3c8:	2e000000 	.word	0x2e000000
 800b3cc:	3ba3198a 	.word	0x3ba3198a
 800b3d0:	252049c1 	.word	0x252049c1
 800b3d4:	397b839a 	.word	0x397b839a
 800b3d8:	3fe921fb 	.word	0x3fe921fb
 800b3dc:	4002d97b 	.word	0x4002d97b
 800b3e0:	3ff921fb 	.word	0x3ff921fb
 800b3e4:	413921fb 	.word	0x413921fb
 800b3e8:	3fe00000 	.word	0x3fe00000
 800b3ec:	0800c8f8 	.word	0x0800c8f8
 800b3f0:	7fefffff 	.word	0x7fefffff
 800b3f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b3f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b3fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b400:	460f      	mov	r7, r1
 800b402:	4606      	mov	r6, r0
 800b404:	f7f5 fb18 	bl	8000a38 <__aeabi_d2iz>
 800b408:	f7f4 fffc 	bl	8000404 <__aeabi_i2d>
 800b40c:	4602      	mov	r2, r0
 800b40e:	460b      	mov	r3, r1
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b418:	f7f4 fea6 	bl	8000168 <__aeabi_dsub>
 800b41c:	2200      	movs	r2, #0
 800b41e:	4b20      	ldr	r3, [pc, #128]	; (800b4a0 <__ieee754_rem_pio2+0x3d8>)
 800b420:	f7f5 f85a 	bl	80004d8 <__aeabi_dmul>
 800b424:	460f      	mov	r7, r1
 800b426:	4606      	mov	r6, r0
 800b428:	f7f5 fb06 	bl	8000a38 <__aeabi_d2iz>
 800b42c:	f7f4 ffea 	bl	8000404 <__aeabi_i2d>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b43c:	f7f4 fe94 	bl	8000168 <__aeabi_dsub>
 800b440:	2200      	movs	r2, #0
 800b442:	4b17      	ldr	r3, [pc, #92]	; (800b4a0 <__ieee754_rem_pio2+0x3d8>)
 800b444:	f7f5 f848 	bl	80004d8 <__aeabi_dmul>
 800b448:	f04f 0803 	mov.w	r8, #3
 800b44c:	2600      	movs	r6, #0
 800b44e:	2700      	movs	r7, #0
 800b450:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b454:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b458:	4632      	mov	r2, r6
 800b45a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b45e:	463b      	mov	r3, r7
 800b460:	f108 3aff 	add.w	sl, r8, #4294967295
 800b464:	f7f5 faa0 	bl	80009a8 <__aeabi_dcmpeq>
 800b468:	b9b8      	cbnz	r0, 800b49a <__ieee754_rem_pio2+0x3d2>
 800b46a:	4b0e      	ldr	r3, [pc, #56]	; (800b4a4 <__ieee754_rem_pio2+0x3dc>)
 800b46c:	462a      	mov	r2, r5
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	2302      	movs	r3, #2
 800b472:	4621      	mov	r1, r4
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	a806      	add	r0, sp, #24
 800b478:	4643      	mov	r3, r8
 800b47a:	f000 f97f 	bl	800b77c <__kernel_rem_pio2>
 800b47e:	f1bb 0f00 	cmp.w	fp, #0
 800b482:	4605      	mov	r5, r0
 800b484:	f6bf ae56 	bge.w	800b134 <__ieee754_rem_pio2+0x6c>
 800b488:	6863      	ldr	r3, [r4, #4]
 800b48a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b48e:	6063      	str	r3, [r4, #4]
 800b490:	68e3      	ldr	r3, [r4, #12]
 800b492:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b496:	60e3      	str	r3, [r4, #12]
 800b498:	e708      	b.n	800b2ac <__ieee754_rem_pio2+0x1e4>
 800b49a:	46d0      	mov	r8, sl
 800b49c:	e7dc      	b.n	800b458 <__ieee754_rem_pio2+0x390>
 800b49e:	bf00      	nop
 800b4a0:	41700000 	.word	0x41700000
 800b4a4:	0800c978 	.word	0x0800c978

0800b4a8 <__ieee754_sqrt>:
 800b4a8:	4b54      	ldr	r3, [pc, #336]	; (800b5fc <__ieee754_sqrt+0x154>)
 800b4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	438b      	bics	r3, r1
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	460a      	mov	r2, r1
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	d10f      	bne.n	800b4da <__ieee754_sqrt+0x32>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	f7f5 f80b 	bl	80004d8 <__aeabi_dmul>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f4 fe4f 	bl	800016c <__adddf3>
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460d      	mov	r5, r1
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4da:	2900      	cmp	r1, #0
 800b4dc:	4607      	mov	r7, r0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	dc0e      	bgt.n	800b500 <__ieee754_sqrt+0x58>
 800b4e2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b4e6:	ea5c 0707 	orrs.w	r7, ip, r7
 800b4ea:	d0f2      	beq.n	800b4d2 <__ieee754_sqrt+0x2a>
 800b4ec:	b141      	cbz	r1, 800b500 <__ieee754_sqrt+0x58>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	f7f4 fe39 	bl	8000168 <__aeabi_dsub>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	f7f5 f917 	bl	800072c <__aeabi_ddiv>
 800b4fe:	e7e6      	b.n	800b4ce <__ieee754_sqrt+0x26>
 800b500:	1512      	asrs	r2, r2, #20
 800b502:	d074      	beq.n	800b5ee <__ieee754_sqrt+0x146>
 800b504:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b508:	07d5      	lsls	r5, r2, #31
 800b50a:	f04f 0500 	mov.w	r5, #0
 800b50e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b512:	bf48      	it	mi
 800b514:	0fd9      	lsrmi	r1, r3, #31
 800b516:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b51a:	bf44      	itt	mi
 800b51c:	005b      	lslmi	r3, r3, #1
 800b51e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b522:	1051      	asrs	r1, r2, #1
 800b524:	0fda      	lsrs	r2, r3, #31
 800b526:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b52a:	4628      	mov	r0, r5
 800b52c:	2216      	movs	r2, #22
 800b52e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	1987      	adds	r7, r0, r6
 800b536:	42a7      	cmp	r7, r4
 800b538:	bfde      	ittt	le
 800b53a:	19b8      	addle	r0, r7, r6
 800b53c:	1be4      	suble	r4, r4, r7
 800b53e:	19ad      	addle	r5, r5, r6
 800b540:	0fdf      	lsrs	r7, r3, #31
 800b542:	3a01      	subs	r2, #1
 800b544:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b54c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b550:	d1f0      	bne.n	800b534 <__ieee754_sqrt+0x8c>
 800b552:	f04f 0c20 	mov.w	ip, #32
 800b556:	4696      	mov	lr, r2
 800b558:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b55c:	4284      	cmp	r4, r0
 800b55e:	eb06 070e 	add.w	r7, r6, lr
 800b562:	dc02      	bgt.n	800b56a <__ieee754_sqrt+0xc2>
 800b564:	d112      	bne.n	800b58c <__ieee754_sqrt+0xe4>
 800b566:	429f      	cmp	r7, r3
 800b568:	d810      	bhi.n	800b58c <__ieee754_sqrt+0xe4>
 800b56a:	2f00      	cmp	r7, #0
 800b56c:	eb07 0e06 	add.w	lr, r7, r6
 800b570:	da42      	bge.n	800b5f8 <__ieee754_sqrt+0x150>
 800b572:	f1be 0f00 	cmp.w	lr, #0
 800b576:	db3f      	blt.n	800b5f8 <__ieee754_sqrt+0x150>
 800b578:	f100 0801 	add.w	r8, r0, #1
 800b57c:	1a24      	subs	r4, r4, r0
 800b57e:	4640      	mov	r0, r8
 800b580:	429f      	cmp	r7, r3
 800b582:	bf88      	it	hi
 800b584:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800b588:	1bdb      	subs	r3, r3, r7
 800b58a:	4432      	add	r2, r6
 800b58c:	0064      	lsls	r4, r4, #1
 800b58e:	f1bc 0c01 	subs.w	ip, ip, #1
 800b592:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b596:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b59a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b59e:	d1dd      	bne.n	800b55c <__ieee754_sqrt+0xb4>
 800b5a0:	4323      	orrs	r3, r4
 800b5a2:	d006      	beq.n	800b5b2 <__ieee754_sqrt+0x10a>
 800b5a4:	1c54      	adds	r4, r2, #1
 800b5a6:	bf0b      	itete	eq
 800b5a8:	4662      	moveq	r2, ip
 800b5aa:	3201      	addne	r2, #1
 800b5ac:	3501      	addeq	r5, #1
 800b5ae:	f022 0201 	bicne.w	r2, r2, #1
 800b5b2:	106b      	asrs	r3, r5, #1
 800b5b4:	0852      	lsrs	r2, r2, #1
 800b5b6:	07e8      	lsls	r0, r5, #31
 800b5b8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b5bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b5c0:	bf48      	it	mi
 800b5c2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b5c6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b5ca:	4616      	mov	r6, r2
 800b5cc:	e781      	b.n	800b4d2 <__ieee754_sqrt+0x2a>
 800b5ce:	0adc      	lsrs	r4, r3, #11
 800b5d0:	3915      	subs	r1, #21
 800b5d2:	055b      	lsls	r3, r3, #21
 800b5d4:	2c00      	cmp	r4, #0
 800b5d6:	d0fa      	beq.n	800b5ce <__ieee754_sqrt+0x126>
 800b5d8:	02e6      	lsls	r6, r4, #11
 800b5da:	d50a      	bpl.n	800b5f2 <__ieee754_sqrt+0x14a>
 800b5dc:	f1c2 0020 	rsb	r0, r2, #32
 800b5e0:	fa23 f000 	lsr.w	r0, r3, r0
 800b5e4:	1e55      	subs	r5, r2, #1
 800b5e6:	4093      	lsls	r3, r2
 800b5e8:	4304      	orrs	r4, r0
 800b5ea:	1b4a      	subs	r2, r1, r5
 800b5ec:	e78a      	b.n	800b504 <__ieee754_sqrt+0x5c>
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	e7f0      	b.n	800b5d4 <__ieee754_sqrt+0x12c>
 800b5f2:	0064      	lsls	r4, r4, #1
 800b5f4:	3201      	adds	r2, #1
 800b5f6:	e7ef      	b.n	800b5d8 <__ieee754_sqrt+0x130>
 800b5f8:	4680      	mov	r8, r0
 800b5fa:	e7bf      	b.n	800b57c <__ieee754_sqrt+0xd4>
 800b5fc:	7ff00000 	.word	0x7ff00000

0800b600 <__kernel_cos>:
 800b600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b608:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b60c:	4680      	mov	r8, r0
 800b60e:	460f      	mov	r7, r1
 800b610:	e9cd 2300 	strd	r2, r3, [sp]
 800b614:	da04      	bge.n	800b620 <__kernel_cos+0x20>
 800b616:	f7f5 fa0f 	bl	8000a38 <__aeabi_d2iz>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	f000 8086 	beq.w	800b72c <__kernel_cos+0x12c>
 800b620:	4642      	mov	r2, r8
 800b622:	463b      	mov	r3, r7
 800b624:	4640      	mov	r0, r8
 800b626:	4639      	mov	r1, r7
 800b628:	f7f4 ff56 	bl	80004d8 <__aeabi_dmul>
 800b62c:	2200      	movs	r2, #0
 800b62e:	4b4e      	ldr	r3, [pc, #312]	; (800b768 <__kernel_cos+0x168>)
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	f7f4 ff50 	bl	80004d8 <__aeabi_dmul>
 800b638:	a33f      	add	r3, pc, #252	; (adr r3, 800b738 <__kernel_cos+0x138>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	4682      	mov	sl, r0
 800b640:	468b      	mov	fp, r1
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	f7f4 ff47 	bl	80004d8 <__aeabi_dmul>
 800b64a:	a33d      	add	r3, pc, #244	; (adr r3, 800b740 <__kernel_cos+0x140>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fd8c 	bl	800016c <__adddf3>
 800b654:	4622      	mov	r2, r4
 800b656:	462b      	mov	r3, r5
 800b658:	f7f4 ff3e 	bl	80004d8 <__aeabi_dmul>
 800b65c:	a33a      	add	r3, pc, #232	; (adr r3, 800b748 <__kernel_cos+0x148>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fd81 	bl	8000168 <__aeabi_dsub>
 800b666:	4622      	mov	r2, r4
 800b668:	462b      	mov	r3, r5
 800b66a:	f7f4 ff35 	bl	80004d8 <__aeabi_dmul>
 800b66e:	a338      	add	r3, pc, #224	; (adr r3, 800b750 <__kernel_cos+0x150>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 fd7a 	bl	800016c <__adddf3>
 800b678:	4622      	mov	r2, r4
 800b67a:	462b      	mov	r3, r5
 800b67c:	f7f4 ff2c 	bl	80004d8 <__aeabi_dmul>
 800b680:	a335      	add	r3, pc, #212	; (adr r3, 800b758 <__kernel_cos+0x158>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 fd6f 	bl	8000168 <__aeabi_dsub>
 800b68a:	4622      	mov	r2, r4
 800b68c:	462b      	mov	r3, r5
 800b68e:	f7f4 ff23 	bl	80004d8 <__aeabi_dmul>
 800b692:	a333      	add	r3, pc, #204	; (adr r3, 800b760 <__kernel_cos+0x160>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 fd68 	bl	800016c <__adddf3>
 800b69c:	4622      	mov	r2, r4
 800b69e:	462b      	mov	r3, r5
 800b6a0:	f7f4 ff1a 	bl	80004d8 <__aeabi_dmul>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	f7f4 ff16 	bl	80004d8 <__aeabi_dmul>
 800b6ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f4 ff0e 	bl	80004d8 <__aeabi_dmul>
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4602      	mov	r2, r0
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7f4 fd50 	bl	8000168 <__aeabi_dsub>
 800b6c8:	4b28      	ldr	r3, [pc, #160]	; (800b76c <__kernel_cos+0x16c>)
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	429e      	cmp	r6, r3
 800b6ce:	4689      	mov	r9, r1
 800b6d0:	dc0e      	bgt.n	800b6f0 <__kernel_cos+0xf0>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4659      	mov	r1, fp
 800b6da:	f7f4 fd45 	bl	8000168 <__aeabi_dsub>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4922      	ldr	r1, [pc, #136]	; (800b770 <__kernel_cos+0x170>)
 800b6e6:	f7f4 fd3f 	bl	8000168 <__aeabi_dsub>
 800b6ea:	b003      	add	sp, #12
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	4b20      	ldr	r3, [pc, #128]	; (800b774 <__kernel_cos+0x174>)
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	429e      	cmp	r6, r3
 800b6f8:	bfcc      	ite	gt
 800b6fa:	4d1f      	ldrgt	r5, [pc, #124]	; (800b778 <__kernel_cos+0x178>)
 800b6fc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b700:	462b      	mov	r3, r5
 800b702:	2000      	movs	r0, #0
 800b704:	491a      	ldr	r1, [pc, #104]	; (800b770 <__kernel_cos+0x170>)
 800b706:	f7f4 fd2f 	bl	8000168 <__aeabi_dsub>
 800b70a:	4622      	mov	r2, r4
 800b70c:	4606      	mov	r6, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	462b      	mov	r3, r5
 800b712:	4650      	mov	r0, sl
 800b714:	4659      	mov	r1, fp
 800b716:	f7f4 fd27 	bl	8000168 <__aeabi_dsub>
 800b71a:	4642      	mov	r2, r8
 800b71c:	464b      	mov	r3, r9
 800b71e:	f7f4 fd23 	bl	8000168 <__aeabi_dsub>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	e7dc      	b.n	800b6e6 <__kernel_cos+0xe6>
 800b72c:	2000      	movs	r0, #0
 800b72e:	4910      	ldr	r1, [pc, #64]	; (800b770 <__kernel_cos+0x170>)
 800b730:	e7db      	b.n	800b6ea <__kernel_cos+0xea>
 800b732:	bf00      	nop
 800b734:	f3af 8000 	nop.w
 800b738:	be8838d4 	.word	0xbe8838d4
 800b73c:	bda8fae9 	.word	0xbda8fae9
 800b740:	bdb4b1c4 	.word	0xbdb4b1c4
 800b744:	3e21ee9e 	.word	0x3e21ee9e
 800b748:	809c52ad 	.word	0x809c52ad
 800b74c:	3e927e4f 	.word	0x3e927e4f
 800b750:	19cb1590 	.word	0x19cb1590
 800b754:	3efa01a0 	.word	0x3efa01a0
 800b758:	16c15177 	.word	0x16c15177
 800b75c:	3f56c16c 	.word	0x3f56c16c
 800b760:	5555554c 	.word	0x5555554c
 800b764:	3fa55555 	.word	0x3fa55555
 800b768:	3fe00000 	.word	0x3fe00000
 800b76c:	3fd33332 	.word	0x3fd33332
 800b770:	3ff00000 	.word	0x3ff00000
 800b774:	3fe90000 	.word	0x3fe90000
 800b778:	3fd20000 	.word	0x3fd20000

0800b77c <__kernel_rem_pio2>:
 800b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b784:	9307      	str	r3, [sp, #28]
 800b786:	9104      	str	r1, [sp, #16]
 800b788:	4bbf      	ldr	r3, [pc, #764]	; (800ba88 <__kernel_rem_pio2+0x30c>)
 800b78a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b78c:	1ed4      	subs	r4, r2, #3
 800b78e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b792:	2500      	movs	r5, #0
 800b794:	9302      	str	r3, [sp, #8]
 800b796:	9b07      	ldr	r3, [sp, #28]
 800b798:	9008      	str	r0, [sp, #32]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	9306      	str	r3, [sp, #24]
 800b79e:	2318      	movs	r3, #24
 800b7a0:	fb94 f4f3 	sdiv	r4, r4, r3
 800b7a4:	f06f 0317 	mvn.w	r3, #23
 800b7a8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b7ac:	fb04 3303 	mla	r3, r4, r3, r3
 800b7b0:	eb03 0a02 	add.w	sl, r3, r2
 800b7b4:	9a06      	ldr	r2, [sp, #24]
 800b7b6:	9b02      	ldr	r3, [sp, #8]
 800b7b8:	1aa7      	subs	r7, r4, r2
 800b7ba:	eb03 0802 	add.w	r8, r3, r2
 800b7be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	ae1e      	add	r6, sp, #120	; 0x78
 800b7ca:	4545      	cmp	r5, r8
 800b7cc:	dd14      	ble.n	800b7f8 <__kernel_rem_pio2+0x7c>
 800b7ce:	2600      	movs	r6, #0
 800b7d0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	429e      	cmp	r6, r3
 800b7d8:	dc39      	bgt.n	800b84e <__kernel_rem_pio2+0xd2>
 800b7da:	9b08      	ldr	r3, [sp, #32]
 800b7dc:	f04f 0800 	mov.w	r8, #0
 800b7e0:	3b08      	subs	r3, #8
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	9b07      	ldr	r3, [sp, #28]
 800b7e6:	f04f 0900 	mov.w	r9, #0
 800b7ea:	199d      	adds	r5, r3, r6
 800b7ec:	ab20      	add	r3, sp, #128	; 0x80
 800b7ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	2700      	movs	r7, #0
 800b7f6:	e023      	b.n	800b840 <__kernel_rem_pio2+0xc4>
 800b7f8:	42ef      	cmn	r7, r5
 800b7fa:	d40b      	bmi.n	800b814 <__kernel_rem_pio2+0x98>
 800b7fc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b800:	e9cd 2300 	strd	r2, r3, [sp]
 800b804:	f7f4 fdfe 	bl	8000404 <__aeabi_i2d>
 800b808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b80c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800b810:	3501      	adds	r5, #1
 800b812:	e7da      	b.n	800b7ca <__kernel_rem_pio2+0x4e>
 800b814:	4610      	mov	r0, r2
 800b816:	4619      	mov	r1, r3
 800b818:	e7f8      	b.n	800b80c <__kernel_rem_pio2+0x90>
 800b81a:	9905      	ldr	r1, [sp, #20]
 800b81c:	9d00      	ldr	r5, [sp, #0]
 800b81e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b822:	9105      	str	r1, [sp, #20]
 800b824:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b828:	9500      	str	r5, [sp, #0]
 800b82a:	f7f4 fe55 	bl	80004d8 <__aeabi_dmul>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4640      	mov	r0, r8
 800b834:	4649      	mov	r1, r9
 800b836:	f7f4 fc99 	bl	800016c <__adddf3>
 800b83a:	4680      	mov	r8, r0
 800b83c:	4689      	mov	r9, r1
 800b83e:	3701      	adds	r7, #1
 800b840:	9b06      	ldr	r3, [sp, #24]
 800b842:	429f      	cmp	r7, r3
 800b844:	dde9      	ble.n	800b81a <__kernel_rem_pio2+0x9e>
 800b846:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b84a:	3601      	adds	r6, #1
 800b84c:	e7c2      	b.n	800b7d4 <__kernel_rem_pio2+0x58>
 800b84e:	9b02      	ldr	r3, [sp, #8]
 800b850:	aa0c      	add	r2, sp, #48	; 0x30
 800b852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b856:	930b      	str	r3, [sp, #44]	; 0x2c
 800b858:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b85a:	9f02      	ldr	r7, [sp, #8]
 800b85c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b860:	930a      	str	r3, [sp, #40]	; 0x28
 800b862:	2600      	movs	r6, #0
 800b864:	ab98      	add	r3, sp, #608	; 0x260
 800b866:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800b86a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b86e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b872:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b876:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b87a:	ab98      	add	r3, sp, #608	; 0x260
 800b87c:	445b      	add	r3, fp
 800b87e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800b882:	1bbb      	subs	r3, r7, r6
 800b884:	2b00      	cmp	r3, #0
 800b886:	dc71      	bgt.n	800b96c <__kernel_rem_pio2+0x1f0>
 800b888:	4652      	mov	r2, sl
 800b88a:	4640      	mov	r0, r8
 800b88c:	4649      	mov	r1, r9
 800b88e:	f000 fc93 	bl	800c1b8 <scalbn>
 800b892:	2200      	movs	r2, #0
 800b894:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	f7f4 fe1c 	bl	80004d8 <__aeabi_dmul>
 800b8a0:	f000 fb72 	bl	800bf88 <floor>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	4b79      	ldr	r3, [pc, #484]	; (800ba8c <__kernel_rem_pio2+0x310>)
 800b8a8:	f7f4 fe16 	bl	80004d8 <__aeabi_dmul>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f4 fc58 	bl	8000168 <__aeabi_dsub>
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	f7f5 f8bc 	bl	8000a38 <__aeabi_d2iz>
 800b8c0:	9005      	str	r0, [sp, #20]
 800b8c2:	f7f4 fd9f 	bl	8000404 <__aeabi_i2d>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	f7f4 fc4b 	bl	8000168 <__aeabi_dsub>
 800b8d2:	f1ba 0f00 	cmp.w	sl, #0
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	4689      	mov	r9, r1
 800b8da:	dd6c      	ble.n	800b9b6 <__kernel_rem_pio2+0x23a>
 800b8dc:	1e7a      	subs	r2, r7, #1
 800b8de:	ab0c      	add	r3, sp, #48	; 0x30
 800b8e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b8e4:	f1ca 0118 	rsb	r1, sl, #24
 800b8e8:	9c05      	ldr	r4, [sp, #20]
 800b8ea:	fa40 f301 	asr.w	r3, r0, r1
 800b8ee:	441c      	add	r4, r3
 800b8f0:	408b      	lsls	r3, r1
 800b8f2:	1ac0      	subs	r0, r0, r3
 800b8f4:	ab0c      	add	r3, sp, #48	; 0x30
 800b8f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b8fa:	f1ca 0317 	rsb	r3, sl, #23
 800b8fe:	9405      	str	r4, [sp, #20]
 800b900:	fa40 f303 	asr.w	r3, r0, r3
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	9b00      	ldr	r3, [sp, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dd62      	ble.n	800b9d2 <__kernel_rem_pio2+0x256>
 800b90c:	2200      	movs	r2, #0
 800b90e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b912:	4614      	mov	r4, r2
 800b914:	9b05      	ldr	r3, [sp, #20]
 800b916:	3301      	adds	r3, #1
 800b918:	9305      	str	r3, [sp, #20]
 800b91a:	4297      	cmp	r7, r2
 800b91c:	f300 809f 	bgt.w	800ba5e <__kernel_rem_pio2+0x2e2>
 800b920:	f1ba 0f00 	cmp.w	sl, #0
 800b924:	dd07      	ble.n	800b936 <__kernel_rem_pio2+0x1ba>
 800b926:	f1ba 0f01 	cmp.w	sl, #1
 800b92a:	f000 80bb 	beq.w	800baa4 <__kernel_rem_pio2+0x328>
 800b92e:	f1ba 0f02 	cmp.w	sl, #2
 800b932:	f000 80c1 	beq.w	800bab8 <__kernel_rem_pio2+0x33c>
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d14a      	bne.n	800b9d2 <__kernel_rem_pio2+0x256>
 800b93c:	4642      	mov	r2, r8
 800b93e:	464b      	mov	r3, r9
 800b940:	2000      	movs	r0, #0
 800b942:	4953      	ldr	r1, [pc, #332]	; (800ba90 <__kernel_rem_pio2+0x314>)
 800b944:	f7f4 fc10 	bl	8000168 <__aeabi_dsub>
 800b948:	4680      	mov	r8, r0
 800b94a:	4689      	mov	r9, r1
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	d040      	beq.n	800b9d2 <__kernel_rem_pio2+0x256>
 800b950:	4652      	mov	r2, sl
 800b952:	2000      	movs	r0, #0
 800b954:	494e      	ldr	r1, [pc, #312]	; (800ba90 <__kernel_rem_pio2+0x314>)
 800b956:	f000 fc2f 	bl	800c1b8 <scalbn>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fc01 	bl	8000168 <__aeabi_dsub>
 800b966:	4680      	mov	r8, r0
 800b968:	4689      	mov	r9, r1
 800b96a:	e032      	b.n	800b9d2 <__kernel_rem_pio2+0x256>
 800b96c:	2200      	movs	r2, #0
 800b96e:	4b49      	ldr	r3, [pc, #292]	; (800ba94 <__kernel_rem_pio2+0x318>)
 800b970:	4640      	mov	r0, r8
 800b972:	4649      	mov	r1, r9
 800b974:	f7f4 fdb0 	bl	80004d8 <__aeabi_dmul>
 800b978:	f7f5 f85e 	bl	8000a38 <__aeabi_d2iz>
 800b97c:	f7f4 fd42 	bl	8000404 <__aeabi_i2d>
 800b980:	2200      	movs	r2, #0
 800b982:	4b45      	ldr	r3, [pc, #276]	; (800ba98 <__kernel_rem_pio2+0x31c>)
 800b984:	e9cd 0100 	strd	r0, r1, [sp]
 800b988:	f7f4 fda6 	bl	80004d8 <__aeabi_dmul>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	4640      	mov	r0, r8
 800b992:	4649      	mov	r1, r9
 800b994:	f7f4 fbe8 	bl	8000168 <__aeabi_dsub>
 800b998:	f7f5 f84e 	bl	8000a38 <__aeabi_d2iz>
 800b99c:	ab0c      	add	r3, sp, #48	; 0x30
 800b99e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b9a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9aa:	f7f4 fbdf 	bl	800016c <__adddf3>
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	e765      	b.n	800b882 <__kernel_rem_pio2+0x106>
 800b9b6:	d105      	bne.n	800b9c4 <__kernel_rem_pio2+0x248>
 800b9b8:	1e7b      	subs	r3, r7, #1
 800b9ba:	aa0c      	add	r2, sp, #48	; 0x30
 800b9bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b9c0:	15c3      	asrs	r3, r0, #23
 800b9c2:	e79f      	b.n	800b904 <__kernel_rem_pio2+0x188>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4b35      	ldr	r3, [pc, #212]	; (800ba9c <__kernel_rem_pio2+0x320>)
 800b9c8:	f7f5 f80c 	bl	80009e4 <__aeabi_dcmpge>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d143      	bne.n	800ba58 <__kernel_rem_pio2+0x2dc>
 800b9d0:	9000      	str	r0, [sp, #0]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	4649      	mov	r1, r9
 800b9da:	f7f4 ffe5 	bl	80009a8 <__aeabi_dcmpeq>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f000 80c3 	beq.w	800bb6a <__kernel_rem_pio2+0x3ee>
 800b9e4:	1e7c      	subs	r4, r7, #1
 800b9e6:	4623      	mov	r3, r4
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	9902      	ldr	r1, [sp, #8]
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	da6a      	bge.n	800bac6 <__kernel_rem_pio2+0x34a>
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	f000 8084 	beq.w	800bafe <__kernel_rem_pio2+0x382>
 800b9f6:	ab0c      	add	r3, sp, #48	; 0x30
 800b9f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b9fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 80b0 	beq.w	800bb66 <__kernel_rem_pio2+0x3ea>
 800ba06:	4652      	mov	r2, sl
 800ba08:	2000      	movs	r0, #0
 800ba0a:	4921      	ldr	r1, [pc, #132]	; (800ba90 <__kernel_rem_pio2+0x314>)
 800ba0c:	f000 fbd4 	bl	800c1b8 <scalbn>
 800ba10:	4625      	mov	r5, r4
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	f04f 0a00 	mov.w	sl, #0
 800ba1a:	00e3      	lsls	r3, r4, #3
 800ba1c:	aa98      	add	r2, sp, #608	; 0x260
 800ba1e:	eb02 0803 	add.w	r8, r2, r3
 800ba22:	f8df b070 	ldr.w	fp, [pc, #112]	; 800ba94 <__kernel_rem_pio2+0x318>
 800ba26:	9306      	str	r3, [sp, #24]
 800ba28:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800ba2c:	2d00      	cmp	r5, #0
 800ba2e:	f280 80d2 	bge.w	800bbd6 <__kernel_rem_pio2+0x45a>
 800ba32:	2500      	movs	r5, #0
 800ba34:	9a06      	ldr	r2, [sp, #24]
 800ba36:	ab98      	add	r3, sp, #608	; 0x260
 800ba38:	189e      	adds	r6, r3, r2
 800ba3a:	3ea8      	subs	r6, #168	; 0xa8
 800ba3c:	1b63      	subs	r3, r4, r5
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f2c0 80f9 	blt.w	800bc36 <__kernel_rem_pio2+0x4ba>
 800ba44:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800baa0 <__kernel_rem_pio2+0x324>
 800ba48:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800ba4c:	f04f 0a00 	mov.w	sl, #0
 800ba50:	f04f 0b00 	mov.w	fp, #0
 800ba54:	2700      	movs	r7, #0
 800ba56:	e0e2      	b.n	800bc1e <__kernel_rem_pio2+0x4a2>
 800ba58:	2302      	movs	r3, #2
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	e756      	b.n	800b90c <__kernel_rem_pio2+0x190>
 800ba5e:	ab0c      	add	r3, sp, #48	; 0x30
 800ba60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba64:	b94c      	cbnz	r4, 800ba7a <__kernel_rem_pio2+0x2fe>
 800ba66:	b12b      	cbz	r3, 800ba74 <__kernel_rem_pio2+0x2f8>
 800ba68:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ba6c:	a80c      	add	r0, sp, #48	; 0x30
 800ba6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ba72:	2301      	movs	r3, #1
 800ba74:	3201      	adds	r2, #1
 800ba76:	461c      	mov	r4, r3
 800ba78:	e74f      	b.n	800b91a <__kernel_rem_pio2+0x19e>
 800ba7a:	1acb      	subs	r3, r1, r3
 800ba7c:	a80c      	add	r0, sp, #48	; 0x30
 800ba7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ba82:	4623      	mov	r3, r4
 800ba84:	e7f6      	b.n	800ba74 <__kernel_rem_pio2+0x2f8>
 800ba86:	bf00      	nop
 800ba88:	0800cac0 	.word	0x0800cac0
 800ba8c:	40200000 	.word	0x40200000
 800ba90:	3ff00000 	.word	0x3ff00000
 800ba94:	3e700000 	.word	0x3e700000
 800ba98:	41700000 	.word	0x41700000
 800ba9c:	3fe00000 	.word	0x3fe00000
 800baa0:	0800ca78 	.word	0x0800ca78
 800baa4:	1e7a      	subs	r2, r7, #1
 800baa6:	ab0c      	add	r3, sp, #48	; 0x30
 800baa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bab0:	a90c      	add	r1, sp, #48	; 0x30
 800bab2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bab6:	e73e      	b.n	800b936 <__kernel_rem_pio2+0x1ba>
 800bab8:	1e7a      	subs	r2, r7, #1
 800baba:	ab0c      	add	r3, sp, #48	; 0x30
 800babc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bac4:	e7f4      	b.n	800bab0 <__kernel_rem_pio2+0x334>
 800bac6:	a90c      	add	r1, sp, #48	; 0x30
 800bac8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bacc:	3b01      	subs	r3, #1
 800bace:	430a      	orrs	r2, r1
 800bad0:	e78b      	b.n	800b9ea <__kernel_rem_pio2+0x26e>
 800bad2:	3401      	adds	r4, #1
 800bad4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bad8:	2a00      	cmp	r2, #0
 800bada:	d0fa      	beq.n	800bad2 <__kernel_rem_pio2+0x356>
 800badc:	ab98      	add	r3, sp, #608	; 0x260
 800bade:	449b      	add	fp, r3
 800bae0:	9b07      	ldr	r3, [sp, #28]
 800bae2:	1c7e      	adds	r6, r7, #1
 800bae4:	19dd      	adds	r5, r3, r7
 800bae6:	ab98      	add	r3, sp, #608	; 0x260
 800bae8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800baec:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800baf0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800baf4:	443c      	add	r4, r7
 800baf6:	42b4      	cmp	r4, r6
 800baf8:	da04      	bge.n	800bb04 <__kernel_rem_pio2+0x388>
 800bafa:	4627      	mov	r7, r4
 800bafc:	e6b1      	b.n	800b862 <__kernel_rem_pio2+0xe6>
 800bafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb00:	2401      	movs	r4, #1
 800bb02:	e7e7      	b.n	800bad4 <__kernel_rem_pio2+0x358>
 800bb04:	f105 0308 	add.w	r3, r5, #8
 800bb08:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb0c:	2700      	movs	r7, #0
 800bb0e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb12:	f7f4 fc77 	bl	8000404 <__aeabi_i2d>
 800bb16:	f04f 0800 	mov.w	r8, #0
 800bb1a:	f04f 0900 	mov.w	r9, #0
 800bb1e:	9b08      	ldr	r3, [sp, #32]
 800bb20:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bb24:	3b08      	subs	r3, #8
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	f105 0310 	add.w	r3, r5, #16
 800bb2c:	9305      	str	r3, [sp, #20]
 800bb2e:	9b06      	ldr	r3, [sp, #24]
 800bb30:	429f      	cmp	r7, r3
 800bb32:	dd04      	ble.n	800bb3e <__kernel_rem_pio2+0x3c2>
 800bb34:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800bb38:	3601      	adds	r6, #1
 800bb3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bb3c:	e7db      	b.n	800baf6 <__kernel_rem_pio2+0x37a>
 800bb3e:	9905      	ldr	r1, [sp, #20]
 800bb40:	9d00      	ldr	r5, [sp, #0]
 800bb42:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bb46:	9105      	str	r1, [sp, #20]
 800bb48:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800bb4c:	9500      	str	r5, [sp, #0]
 800bb4e:	f7f4 fcc3 	bl	80004d8 <__aeabi_dmul>
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 fb07 	bl	800016c <__adddf3>
 800bb5e:	3701      	adds	r7, #1
 800bb60:	4680      	mov	r8, r0
 800bb62:	4689      	mov	r9, r1
 800bb64:	e7e3      	b.n	800bb2e <__kernel_rem_pio2+0x3b2>
 800bb66:	3c01      	subs	r4, #1
 800bb68:	e745      	b.n	800b9f6 <__kernel_rem_pio2+0x27a>
 800bb6a:	f1ca 0200 	rsb	r2, sl, #0
 800bb6e:	4640      	mov	r0, r8
 800bb70:	4649      	mov	r1, r9
 800bb72:	f000 fb21 	bl	800c1b8 <scalbn>
 800bb76:	2200      	movs	r2, #0
 800bb78:	4ba3      	ldr	r3, [pc, #652]	; (800be08 <__kernel_rem_pio2+0x68c>)
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	f7f4 ff31 	bl	80009e4 <__aeabi_dcmpge>
 800bb82:	b1f8      	cbz	r0, 800bbc4 <__kernel_rem_pio2+0x448>
 800bb84:	2200      	movs	r2, #0
 800bb86:	4ba1      	ldr	r3, [pc, #644]	; (800be0c <__kernel_rem_pio2+0x690>)
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fca4 	bl	80004d8 <__aeabi_dmul>
 800bb90:	f7f4 ff52 	bl	8000a38 <__aeabi_d2iz>
 800bb94:	4606      	mov	r6, r0
 800bb96:	f7f4 fc35 	bl	8000404 <__aeabi_i2d>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4b9a      	ldr	r3, [pc, #616]	; (800be08 <__kernel_rem_pio2+0x68c>)
 800bb9e:	f7f4 fc9b 	bl	80004d8 <__aeabi_dmul>
 800bba2:	460b      	mov	r3, r1
 800bba4:	4602      	mov	r2, r0
 800bba6:	4629      	mov	r1, r5
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7f4 fadd 	bl	8000168 <__aeabi_dsub>
 800bbae:	f7f4 ff43 	bl	8000a38 <__aeabi_d2iz>
 800bbb2:	1c7c      	adds	r4, r7, #1
 800bbb4:	ab0c      	add	r3, sp, #48	; 0x30
 800bbb6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bbba:	f10a 0a18 	add.w	sl, sl, #24
 800bbbe:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800bbc2:	e720      	b.n	800ba06 <__kernel_rem_pio2+0x28a>
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 ff36 	bl	8000a38 <__aeabi_d2iz>
 800bbcc:	ab0c      	add	r3, sp, #48	; 0x30
 800bbce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bbd2:	463c      	mov	r4, r7
 800bbd4:	e717      	b.n	800ba06 <__kernel_rem_pio2+0x28a>
 800bbd6:	ab0c      	add	r3, sp, #48	; 0x30
 800bbd8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbdc:	f7f4 fc12 	bl	8000404 <__aeabi_i2d>
 800bbe0:	4632      	mov	r2, r6
 800bbe2:	463b      	mov	r3, r7
 800bbe4:	f7f4 fc78 	bl	80004d8 <__aeabi_dmul>
 800bbe8:	4652      	mov	r2, sl
 800bbea:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bbee:	465b      	mov	r3, fp
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	f7f4 fc70 	bl	80004d8 <__aeabi_dmul>
 800bbf8:	3d01      	subs	r5, #1
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	e715      	b.n	800ba2c <__kernel_rem_pio2+0x2b0>
 800bc00:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800bc04:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800bc08:	f7f4 fc66 	bl	80004d8 <__aeabi_dmul>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4650      	mov	r0, sl
 800bc12:	4659      	mov	r1, fp
 800bc14:	f7f4 faaa 	bl	800016c <__adddf3>
 800bc18:	4682      	mov	sl, r0
 800bc1a:	468b      	mov	fp, r1
 800bc1c:	3701      	adds	r7, #1
 800bc1e:	9b02      	ldr	r3, [sp, #8]
 800bc20:	429f      	cmp	r7, r3
 800bc22:	dc01      	bgt.n	800bc28 <__kernel_rem_pio2+0x4ac>
 800bc24:	42bd      	cmp	r5, r7
 800bc26:	daeb      	bge.n	800bc00 <__kernel_rem_pio2+0x484>
 800bc28:	ab48      	add	r3, sp, #288	; 0x120
 800bc2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc2e:	e9c3 ab00 	strd	sl, fp, [r3]
 800bc32:	3501      	adds	r5, #1
 800bc34:	e702      	b.n	800ba3c <__kernel_rem_pio2+0x2c0>
 800bc36:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d86c      	bhi.n	800bd16 <__kernel_rem_pio2+0x59a>
 800bc3c:	e8df f003 	tbb	[pc, r3]
 800bc40:	022f2f59 	.word	0x022f2f59
 800bc44:	9a06      	ldr	r2, [sp, #24]
 800bc46:	ab48      	add	r3, sp, #288	; 0x120
 800bc48:	189d      	adds	r5, r3, r2
 800bc4a:	46aa      	mov	sl, r5
 800bc4c:	46a3      	mov	fp, r4
 800bc4e:	f1bb 0f00 	cmp.w	fp, #0
 800bc52:	f300 8087 	bgt.w	800bd64 <__kernel_rem_pio2+0x5e8>
 800bc56:	46a2      	mov	sl, r4
 800bc58:	f1ba 0f01 	cmp.w	sl, #1
 800bc5c:	f300 809f 	bgt.w	800bd9e <__kernel_rem_pio2+0x622>
 800bc60:	2700      	movs	r7, #0
 800bc62:	463e      	mov	r6, r7
 800bc64:	9d06      	ldr	r5, [sp, #24]
 800bc66:	ab48      	add	r3, sp, #288	; 0x120
 800bc68:	3508      	adds	r5, #8
 800bc6a:	441d      	add	r5, r3
 800bc6c:	2c01      	cmp	r4, #1
 800bc6e:	f300 80b3 	bgt.w	800bdd8 <__kernel_rem_pio2+0x65c>
 800bc72:	9b00      	ldr	r3, [sp, #0]
 800bc74:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800bc76:	9849      	ldr	r0, [sp, #292]	; 0x124
 800bc78:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800bc7a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f040 80b5 	bne.w	800bdec <__kernel_rem_pio2+0x670>
 800bc82:	4603      	mov	r3, r0
 800bc84:	462a      	mov	r2, r5
 800bc86:	9804      	ldr	r0, [sp, #16]
 800bc88:	e9c0 2300 	strd	r2, r3, [r0]
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	460b      	mov	r3, r1
 800bc90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bc94:	463a      	mov	r2, r7
 800bc96:	4633      	mov	r3, r6
 800bc98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bc9c:	e03b      	b.n	800bd16 <__kernel_rem_pio2+0x59a>
 800bc9e:	f04f 0c00 	mov.w	ip, #0
 800bca2:	4626      	mov	r6, r4
 800bca4:	4667      	mov	r7, ip
 800bca6:	9d06      	ldr	r5, [sp, #24]
 800bca8:	ab48      	add	r3, sp, #288	; 0x120
 800bcaa:	3508      	adds	r5, #8
 800bcac:	441d      	add	r5, r3
 800bcae:	2e00      	cmp	r6, #0
 800bcb0:	da42      	bge.n	800bd38 <__kernel_rem_pio2+0x5bc>
 800bcb2:	9b00      	ldr	r3, [sp, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d049      	beq.n	800bd4c <__kernel_rem_pio2+0x5d0>
 800bcb8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800bcbc:	4662      	mov	r2, ip
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	9904      	ldr	r1, [sp, #16]
 800bcc2:	2601      	movs	r6, #1
 800bcc4:	e9c1 2300 	strd	r2, r3, [r1]
 800bcc8:	a948      	add	r1, sp, #288	; 0x120
 800bcca:	463b      	mov	r3, r7
 800bccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd0:	f7f4 fa4a 	bl	8000168 <__aeabi_dsub>
 800bcd4:	4684      	mov	ip, r0
 800bcd6:	460f      	mov	r7, r1
 800bcd8:	ad48      	add	r5, sp, #288	; 0x120
 800bcda:	42b4      	cmp	r4, r6
 800bcdc:	da38      	bge.n	800bd50 <__kernel_rem_pio2+0x5d4>
 800bcde:	9b00      	ldr	r3, [sp, #0]
 800bce0:	b10b      	cbz	r3, 800bce6 <__kernel_rem_pio2+0x56a>
 800bce2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bce6:	4662      	mov	r2, ip
 800bce8:	463b      	mov	r3, r7
 800bcea:	9904      	ldr	r1, [sp, #16]
 800bcec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bcf0:	e011      	b.n	800bd16 <__kernel_rem_pio2+0x59a>
 800bcf2:	2700      	movs	r7, #0
 800bcf4:	463d      	mov	r5, r7
 800bcf6:	9b06      	ldr	r3, [sp, #24]
 800bcf8:	aa98      	add	r2, sp, #608	; 0x260
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800bd00:	2c00      	cmp	r4, #0
 800bd02:	da0f      	bge.n	800bd24 <__kernel_rem_pio2+0x5a8>
 800bd04:	9b00      	ldr	r3, [sp, #0]
 800bd06:	b10b      	cbz	r3, 800bd0c <__kernel_rem_pio2+0x590>
 800bd08:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800bd0c:	463a      	mov	r2, r7
 800bd0e:	462b      	mov	r3, r5
 800bd10:	9904      	ldr	r1, [sp, #16]
 800bd12:	e9c1 2300 	strd	r2, r3, [r1]
 800bd16:	9b05      	ldr	r3, [sp, #20]
 800bd18:	f003 0007 	and.w	r0, r3, #7
 800bd1c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	4638      	mov	r0, r7
 800bd26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 fa1e 	bl	800016c <__adddf3>
 800bd30:	3c01      	subs	r4, #1
 800bd32:	4607      	mov	r7, r0
 800bd34:	460d      	mov	r5, r1
 800bd36:	e7e3      	b.n	800bd00 <__kernel_rem_pio2+0x584>
 800bd38:	4660      	mov	r0, ip
 800bd3a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bd3e:	4639      	mov	r1, r7
 800bd40:	f7f4 fa14 	bl	800016c <__adddf3>
 800bd44:	3e01      	subs	r6, #1
 800bd46:	4684      	mov	ip, r0
 800bd48:	460f      	mov	r7, r1
 800bd4a:	e7b0      	b.n	800bcae <__kernel_rem_pio2+0x532>
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	e7b5      	b.n	800bcbc <__kernel_rem_pio2+0x540>
 800bd50:	4660      	mov	r0, ip
 800bd52:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800bd56:	4639      	mov	r1, r7
 800bd58:	f7f4 fa08 	bl	800016c <__adddf3>
 800bd5c:	3601      	adds	r6, #1
 800bd5e:	4684      	mov	ip, r0
 800bd60:	460f      	mov	r7, r1
 800bd62:	e7ba      	b.n	800bcda <__kernel_rem_pio2+0x55e>
 800bd64:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800bd68:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	4649      	mov	r1, r9
 800bd70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd74:	f7f4 f9fa 	bl	800016c <__adddf3>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	460f      	mov	r7, r1
 800bd80:	4640      	mov	r0, r8
 800bd82:	4649      	mov	r1, r9
 800bd84:	f7f4 f9f0 	bl	8000168 <__aeabi_dsub>
 800bd88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd8c:	f7f4 f9ee 	bl	800016c <__adddf3>
 800bd90:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd98:	e9ca 6700 	strd	r6, r7, [sl]
 800bd9c:	e757      	b.n	800bc4e <__kernel_rem_pio2+0x4d2>
 800bd9e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800bda2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800bda6:	4630      	mov	r0, r6
 800bda8:	4639      	mov	r1, r7
 800bdaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdae:	f7f4 f9dd 	bl	800016c <__adddf3>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	4680      	mov	r8, r0
 800bdb8:	4689      	mov	r9, r1
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	f7f4 f9d3 	bl	8000168 <__aeabi_dsub>
 800bdc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdc6:	f7f4 f9d1 	bl	800016c <__adddf3>
 800bdca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bdd2:	e9c5 8900 	strd	r8, r9, [r5]
 800bdd6:	e73f      	b.n	800bc58 <__kernel_rem_pio2+0x4dc>
 800bdd8:	4638      	mov	r0, r7
 800bdda:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bdde:	4631      	mov	r1, r6
 800bde0:	f7f4 f9c4 	bl	800016c <__adddf3>
 800bde4:	3c01      	subs	r4, #1
 800bde6:	4607      	mov	r7, r0
 800bde8:	460e      	mov	r6, r1
 800bdea:	e73f      	b.n	800bc6c <__kernel_rem_pio2+0x4f0>
 800bdec:	9b04      	ldr	r3, [sp, #16]
 800bdee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bdf2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bdf6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800bdfa:	601d      	str	r5, [r3, #0]
 800bdfc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800be00:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800be04:	615e      	str	r6, [r3, #20]
 800be06:	e786      	b.n	800bd16 <__kernel_rem_pio2+0x59a>
 800be08:	41700000 	.word	0x41700000
 800be0c:	3e700000 	.word	0x3e700000

0800be10 <__kernel_sin>:
 800be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	e9cd 2300 	strd	r2, r3, [sp]
 800be1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be1e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800be22:	4682      	mov	sl, r0
 800be24:	460c      	mov	r4, r1
 800be26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800be28:	da03      	bge.n	800be32 <__kernel_sin+0x22>
 800be2a:	f7f4 fe05 	bl	8000a38 <__aeabi_d2iz>
 800be2e:	2800      	cmp	r0, #0
 800be30:	d050      	beq.n	800bed4 <__kernel_sin+0xc4>
 800be32:	4652      	mov	r2, sl
 800be34:	4623      	mov	r3, r4
 800be36:	4650      	mov	r0, sl
 800be38:	4621      	mov	r1, r4
 800be3a:	f7f4 fb4d 	bl	80004d8 <__aeabi_dmul>
 800be3e:	4606      	mov	r6, r0
 800be40:	460f      	mov	r7, r1
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4650      	mov	r0, sl
 800be48:	4621      	mov	r1, r4
 800be4a:	f7f4 fb45 	bl	80004d8 <__aeabi_dmul>
 800be4e:	a33e      	add	r3, pc, #248	; (adr r3, 800bf48 <__kernel_sin+0x138>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	4630      	mov	r0, r6
 800be5a:	4639      	mov	r1, r7
 800be5c:	f7f4 fb3c 	bl	80004d8 <__aeabi_dmul>
 800be60:	a33b      	add	r3, pc, #236	; (adr r3, 800bf50 <__kernel_sin+0x140>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f7f4 f97f 	bl	8000168 <__aeabi_dsub>
 800be6a:	4632      	mov	r2, r6
 800be6c:	463b      	mov	r3, r7
 800be6e:	f7f4 fb33 	bl	80004d8 <__aeabi_dmul>
 800be72:	a339      	add	r3, pc, #228	; (adr r3, 800bf58 <__kernel_sin+0x148>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 f978 	bl	800016c <__adddf3>
 800be7c:	4632      	mov	r2, r6
 800be7e:	463b      	mov	r3, r7
 800be80:	f7f4 fb2a 	bl	80004d8 <__aeabi_dmul>
 800be84:	a336      	add	r3, pc, #216	; (adr r3, 800bf60 <__kernel_sin+0x150>)
 800be86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8a:	f7f4 f96d 	bl	8000168 <__aeabi_dsub>
 800be8e:	4632      	mov	r2, r6
 800be90:	463b      	mov	r3, r7
 800be92:	f7f4 fb21 	bl	80004d8 <__aeabi_dmul>
 800be96:	a334      	add	r3, pc, #208	; (adr r3, 800bf68 <__kernel_sin+0x158>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 f966 	bl	800016c <__adddf3>
 800bea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bea4:	b9dd      	cbnz	r5, 800bede <__kernel_sin+0xce>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4630      	mov	r0, r6
 800beac:	4639      	mov	r1, r7
 800beae:	f7f4 fb13 	bl	80004d8 <__aeabi_dmul>
 800beb2:	a32f      	add	r3, pc, #188	; (adr r3, 800bf70 <__kernel_sin+0x160>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f7f4 f956 	bl	8000168 <__aeabi_dsub>
 800bebc:	4642      	mov	r2, r8
 800bebe:	464b      	mov	r3, r9
 800bec0:	f7f4 fb0a 	bl	80004d8 <__aeabi_dmul>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4650      	mov	r0, sl
 800beca:	4621      	mov	r1, r4
 800becc:	f7f4 f94e 	bl	800016c <__adddf3>
 800bed0:	4682      	mov	sl, r0
 800bed2:	460c      	mov	r4, r1
 800bed4:	4650      	mov	r0, sl
 800bed6:	4621      	mov	r1, r4
 800bed8:	b006      	add	sp, #24
 800beda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bede:	2200      	movs	r2, #0
 800bee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bee4:	4b24      	ldr	r3, [pc, #144]	; (800bf78 <__kernel_sin+0x168>)
 800bee6:	f7f4 faf7 	bl	80004d8 <__aeabi_dmul>
 800beea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800beee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bef2:	4640      	mov	r0, r8
 800bef4:	4649      	mov	r1, r9
 800bef6:	f7f4 faef 	bl	80004d8 <__aeabi_dmul>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf02:	f7f4 f931 	bl	8000168 <__aeabi_dsub>
 800bf06:	4632      	mov	r2, r6
 800bf08:	463b      	mov	r3, r7
 800bf0a:	f7f4 fae5 	bl	80004d8 <__aeabi_dmul>
 800bf0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf12:	f7f4 f929 	bl	8000168 <__aeabi_dsub>
 800bf16:	a316      	add	r3, pc, #88	; (adr r3, 800bf70 <__kernel_sin+0x160>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460f      	mov	r7, r1
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 fad8 	bl	80004d8 <__aeabi_dmul>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	4639      	mov	r1, r7
 800bf30:	f7f4 f91c 	bl	800016c <__adddf3>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4650      	mov	r0, sl
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	f7f4 f914 	bl	8000168 <__aeabi_dsub>
 800bf40:	e7c6      	b.n	800bed0 <__kernel_sin+0xc0>
 800bf42:	bf00      	nop
 800bf44:	f3af 8000 	nop.w
 800bf48:	5acfd57c 	.word	0x5acfd57c
 800bf4c:	3de5d93a 	.word	0x3de5d93a
 800bf50:	8a2b9ceb 	.word	0x8a2b9ceb
 800bf54:	3e5ae5e6 	.word	0x3e5ae5e6
 800bf58:	57b1fe7d 	.word	0x57b1fe7d
 800bf5c:	3ec71de3 	.word	0x3ec71de3
 800bf60:	19c161d5 	.word	0x19c161d5
 800bf64:	3f2a01a0 	.word	0x3f2a01a0
 800bf68:	1110f8a6 	.word	0x1110f8a6
 800bf6c:	3f811111 	.word	0x3f811111
 800bf70:	55555549 	.word	0x55555549
 800bf74:	3fc55555 	.word	0x3fc55555
 800bf78:	3fe00000 	.word	0x3fe00000

0800bf7c <finite>:
 800bf7c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800bf80:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800bf84:	0fc0      	lsrs	r0, r0, #31
 800bf86:	4770      	bx	lr

0800bf88 <floor>:
 800bf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bf90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bf94:	2e13      	cmp	r6, #19
 800bf96:	4607      	mov	r7, r0
 800bf98:	460b      	mov	r3, r1
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	dc35      	bgt.n	800c00c <floor+0x84>
 800bfa0:	2e00      	cmp	r6, #0
 800bfa2:	da16      	bge.n	800bfd2 <floor+0x4a>
 800bfa4:	a336      	add	r3, pc, #216	; (adr r3, 800c080 <floor+0xf8>)
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	f7f4 f8df 	bl	800016c <__adddf3>
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f7f4 fd21 	bl	80009f8 <__aeabi_dcmpgt>
 800bfb6:	b148      	cbz	r0, 800bfcc <floor+0x44>
 800bfb8:	2c00      	cmp	r4, #0
 800bfba:	da5b      	bge.n	800c074 <floor+0xec>
 800bfbc:	2500      	movs	r5, #0
 800bfbe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bfc2:	4a31      	ldr	r2, [pc, #196]	; (800c088 <floor+0x100>)
 800bfc4:	433b      	orrs	r3, r7
 800bfc6:	42ab      	cmp	r3, r5
 800bfc8:	bf18      	it	ne
 800bfca:	4614      	movne	r4, r2
 800bfcc:	4623      	mov	r3, r4
 800bfce:	462f      	mov	r7, r5
 800bfd0:	e026      	b.n	800c020 <floor+0x98>
 800bfd2:	4a2e      	ldr	r2, [pc, #184]	; (800c08c <floor+0x104>)
 800bfd4:	fa42 f806 	asr.w	r8, r2, r6
 800bfd8:	ea01 0208 	and.w	r2, r1, r8
 800bfdc:	4302      	orrs	r2, r0
 800bfde:	d01f      	beq.n	800c020 <floor+0x98>
 800bfe0:	a327      	add	r3, pc, #156	; (adr r3, 800c080 <floor+0xf8>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f7f4 f8c1 	bl	800016c <__adddf3>
 800bfea:	2200      	movs	r2, #0
 800bfec:	2300      	movs	r3, #0
 800bfee:	f7f4 fd03 	bl	80009f8 <__aeabi_dcmpgt>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d0ea      	beq.n	800bfcc <floor+0x44>
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	bfbe      	ittt	lt
 800bffa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bffe:	fa43 f606 	asrlt.w	r6, r3, r6
 800c002:	19a4      	addlt	r4, r4, r6
 800c004:	ea24 0408 	bic.w	r4, r4, r8
 800c008:	2500      	movs	r5, #0
 800c00a:	e7df      	b.n	800bfcc <floor+0x44>
 800c00c:	2e33      	cmp	r6, #51	; 0x33
 800c00e:	dd0b      	ble.n	800c028 <floor+0xa0>
 800c010:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c014:	d104      	bne.n	800c020 <floor+0x98>
 800c016:	4602      	mov	r2, r0
 800c018:	f7f4 f8a8 	bl	800016c <__adddf3>
 800c01c:	4607      	mov	r7, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4638      	mov	r0, r7
 800c022:	4619      	mov	r1, r3
 800c024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c028:	f04f 32ff 	mov.w	r2, #4294967295
 800c02c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c030:	fa22 f808 	lsr.w	r8, r2, r8
 800c034:	ea18 0f00 	tst.w	r8, r0
 800c038:	d0f2      	beq.n	800c020 <floor+0x98>
 800c03a:	a311      	add	r3, pc, #68	; (adr r3, 800c080 <floor+0xf8>)
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	f7f4 f894 	bl	800016c <__adddf3>
 800c044:	2200      	movs	r2, #0
 800c046:	2300      	movs	r3, #0
 800c048:	f7f4 fcd6 	bl	80009f8 <__aeabi_dcmpgt>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d0bd      	beq.n	800bfcc <floor+0x44>
 800c050:	2c00      	cmp	r4, #0
 800c052:	da02      	bge.n	800c05a <floor+0xd2>
 800c054:	2e14      	cmp	r6, #20
 800c056:	d103      	bne.n	800c060 <floor+0xd8>
 800c058:	3401      	adds	r4, #1
 800c05a:	ea25 0508 	bic.w	r5, r5, r8
 800c05e:	e7b5      	b.n	800bfcc <floor+0x44>
 800c060:	2301      	movs	r3, #1
 800c062:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c066:	fa03 f606 	lsl.w	r6, r3, r6
 800c06a:	4435      	add	r5, r6
 800c06c:	42bd      	cmp	r5, r7
 800c06e:	bf38      	it	cc
 800c070:	18e4      	addcc	r4, r4, r3
 800c072:	e7f2      	b.n	800c05a <floor+0xd2>
 800c074:	2500      	movs	r5, #0
 800c076:	462c      	mov	r4, r5
 800c078:	e7a8      	b.n	800bfcc <floor+0x44>
 800c07a:	bf00      	nop
 800c07c:	f3af 8000 	nop.w
 800c080:	8800759c 	.word	0x8800759c
 800c084:	7e37e43c 	.word	0x7e37e43c
 800c088:	bff00000 	.word	0xbff00000
 800c08c:	000fffff 	.word	0x000fffff

0800c090 <matherr>:
 800c090:	2000      	movs	r0, #0
 800c092:	4770      	bx	lr

0800c094 <nan>:
 800c094:	2000      	movs	r0, #0
 800c096:	4901      	ldr	r1, [pc, #4]	; (800c09c <nan+0x8>)
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	7ff80000 	.word	0x7ff80000

0800c0a0 <rint>:
 800c0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c0a6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800c0aa:	f1bc 0f13 	cmp.w	ip, #19
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800c0ba:	dc5a      	bgt.n	800c172 <rint+0xd2>
 800c0bc:	f1bc 0f00 	cmp.w	ip, #0
 800c0c0:	da2b      	bge.n	800c11a <rint+0x7a>
 800c0c2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c0c6:	4302      	orrs	r2, r0
 800c0c8:	d023      	beq.n	800c112 <rint+0x72>
 800c0ca:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c0ce:	4302      	orrs	r2, r0
 800c0d0:	4256      	negs	r6, r2
 800c0d2:	4316      	orrs	r6, r2
 800c0d4:	0c4b      	lsrs	r3, r1, #17
 800c0d6:	0b36      	lsrs	r6, r6, #12
 800c0d8:	4934      	ldr	r1, [pc, #208]	; (800c1ac <rint+0x10c>)
 800c0da:	045b      	lsls	r3, r3, #17
 800c0dc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800c0e0:	ea46 0503 	orr.w	r5, r6, r3
 800c0e4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	462b      	mov	r3, r5
 800c0ec:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	f7f4 f83a 	bl	800016c <__adddf3>
 800c0f8:	e9cd 0100 	strd	r0, r1, [sp]
 800c0fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c100:	462b      	mov	r3, r5
 800c102:	4622      	mov	r2, r4
 800c104:	f7f4 f830 	bl	8000168 <__aeabi_dsub>
 800c108:	4604      	mov	r4, r0
 800c10a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c10e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800c112:	4620      	mov	r0, r4
 800c114:	4629      	mov	r1, r5
 800c116:	b003      	add	sp, #12
 800c118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c11a:	4a25      	ldr	r2, [pc, #148]	; (800c1b0 <rint+0x110>)
 800c11c:	fa42 f20c 	asr.w	r2, r2, ip
 800c120:	4011      	ands	r1, r2
 800c122:	4301      	orrs	r1, r0
 800c124:	d0f5      	beq.n	800c112 <rint+0x72>
 800c126:	0852      	lsrs	r2, r2, #1
 800c128:	ea05 0102 	and.w	r1, r5, r2
 800c12c:	ea50 0601 	orrs.w	r6, r0, r1
 800c130:	d00c      	beq.n	800c14c <rint+0xac>
 800c132:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c136:	f1bc 0f13 	cmp.w	ip, #19
 800c13a:	bf0c      	ite	eq
 800c13c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800c140:	2600      	movne	r6, #0
 800c142:	ea25 0202 	bic.w	r2, r5, r2
 800c146:	fa43 f30c 	asr.w	r3, r3, ip
 800c14a:	4313      	orrs	r3, r2
 800c14c:	4917      	ldr	r1, [pc, #92]	; (800c1ac <rint+0x10c>)
 800c14e:	4632      	mov	r2, r6
 800c150:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800c154:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c158:	4620      	mov	r0, r4
 800c15a:	4629      	mov	r1, r5
 800c15c:	f7f4 f806 	bl	800016c <__adddf3>
 800c160:	e9cd 0100 	strd	r0, r1, [sp]
 800c164:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c168:	4622      	mov	r2, r4
 800c16a:	462b      	mov	r3, r5
 800c16c:	f7f3 fffc 	bl	8000168 <__aeabi_dsub>
 800c170:	e008      	b.n	800c184 <rint+0xe4>
 800c172:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800c176:	dd08      	ble.n	800c18a <rint+0xea>
 800c178:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800c17c:	d1c9      	bne.n	800c112 <rint+0x72>
 800c17e:	4602      	mov	r2, r0
 800c180:	f7f3 fff4 	bl	800016c <__adddf3>
 800c184:	4604      	mov	r4, r0
 800c186:	460d      	mov	r5, r1
 800c188:	e7c3      	b.n	800c112 <rint+0x72>
 800c18a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800c18e:	f04f 32ff 	mov.w	r2, #4294967295
 800c192:	40ca      	lsrs	r2, r1
 800c194:	4210      	tst	r0, r2
 800c196:	d0bc      	beq.n	800c112 <rint+0x72>
 800c198:	0852      	lsrs	r2, r2, #1
 800c19a:	4210      	tst	r0, r2
 800c19c:	bf1f      	itttt	ne
 800c19e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800c1a2:	ea20 0202 	bicne.w	r2, r0, r2
 800c1a6:	410e      	asrne	r6, r1
 800c1a8:	4316      	orrne	r6, r2
 800c1aa:	e7cf      	b.n	800c14c <rint+0xac>
 800c1ac:	0800cad0 	.word	0x0800cad0
 800c1b0:	000fffff 	.word	0x000fffff
 800c1b4:	00000000 	.word	0x00000000

0800c1b8 <scalbn>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	4616      	mov	r6, r2
 800c1bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	460d      	mov	r5, r1
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	b982      	cbnz	r2, 800c1ea <scalbn+0x32>
 800c1c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1cc:	4303      	orrs	r3, r0
 800c1ce:	d034      	beq.n	800c23a <scalbn+0x82>
 800c1d0:	4b2d      	ldr	r3, [pc, #180]	; (800c288 <scalbn+0xd0>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 f980 	bl	80004d8 <__aeabi_dmul>
 800c1d8:	4b2c      	ldr	r3, [pc, #176]	; (800c28c <scalbn+0xd4>)
 800c1da:	4604      	mov	r4, r0
 800c1dc:	429e      	cmp	r6, r3
 800c1de:	460d      	mov	r5, r1
 800c1e0:	da0d      	bge.n	800c1fe <scalbn+0x46>
 800c1e2:	a325      	add	r3, pc, #148	; (adr r3, 800c278 <scalbn+0xc0>)
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	e01c      	b.n	800c224 <scalbn+0x6c>
 800c1ea:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c1ee:	42ba      	cmp	r2, r7
 800c1f0:	d109      	bne.n	800c206 <scalbn+0x4e>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	f7f3 ffba 	bl	800016c <__adddf3>
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	460d      	mov	r5, r1
 800c1fc:	e01d      	b.n	800c23a <scalbn+0x82>
 800c1fe:	460b      	mov	r3, r1
 800c200:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c204:	3a36      	subs	r2, #54	; 0x36
 800c206:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c20a:	4432      	add	r2, r6
 800c20c:	428a      	cmp	r2, r1
 800c20e:	dd0c      	ble.n	800c22a <scalbn+0x72>
 800c210:	4622      	mov	r2, r4
 800c212:	462b      	mov	r3, r5
 800c214:	a11a      	add	r1, pc, #104	; (adr r1, 800c280 <scalbn+0xc8>)
 800c216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c21a:	f000 f83b 	bl	800c294 <copysign>
 800c21e:	a318      	add	r3, pc, #96	; (adr r3, 800c280 <scalbn+0xc8>)
 800c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c224:	f7f4 f958 	bl	80004d8 <__aeabi_dmul>
 800c228:	e7e6      	b.n	800c1f8 <scalbn+0x40>
 800c22a:	2a00      	cmp	r2, #0
 800c22c:	dd08      	ble.n	800c240 <scalbn+0x88>
 800c22e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c232:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c236:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c23a:	4620      	mov	r0, r4
 800c23c:	4629      	mov	r1, r5
 800c23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c240:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c244:	da0b      	bge.n	800c25e <scalbn+0xa6>
 800c246:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c24a:	429e      	cmp	r6, r3
 800c24c:	4622      	mov	r2, r4
 800c24e:	462b      	mov	r3, r5
 800c250:	dce0      	bgt.n	800c214 <scalbn+0x5c>
 800c252:	a109      	add	r1, pc, #36	; (adr r1, 800c278 <scalbn+0xc0>)
 800c254:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c258:	f000 f81c 	bl	800c294 <copysign>
 800c25c:	e7c1      	b.n	800c1e2 <scalbn+0x2a>
 800c25e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c262:	3236      	adds	r2, #54	; 0x36
 800c264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c268:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c26c:	4620      	mov	r0, r4
 800c26e:	4629      	mov	r1, r5
 800c270:	2200      	movs	r2, #0
 800c272:	4b07      	ldr	r3, [pc, #28]	; (800c290 <scalbn+0xd8>)
 800c274:	e7d6      	b.n	800c224 <scalbn+0x6c>
 800c276:	bf00      	nop
 800c278:	c2f8f359 	.word	0xc2f8f359
 800c27c:	01a56e1f 	.word	0x01a56e1f
 800c280:	8800759c 	.word	0x8800759c
 800c284:	7e37e43c 	.word	0x7e37e43c
 800c288:	43500000 	.word	0x43500000
 800c28c:	ffff3cb0 	.word	0xffff3cb0
 800c290:	3c900000 	.word	0x3c900000

0800c294 <copysign>:
 800c294:	b530      	push	{r4, r5, lr}
 800c296:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c29a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c29e:	ea42 0503 	orr.w	r5, r2, r3
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	bd30      	pop	{r4, r5, pc}
	...

0800c2a8 <_init>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	bf00      	nop
 800c2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ae:	bc08      	pop	{r3}
 800c2b0:	469e      	mov	lr, r3
 800c2b2:	4770      	bx	lr

0800c2b4 <_fini>:
 800c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b6:	bf00      	nop
 800c2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ba:	bc08      	pop	{r3}
 800c2bc:	469e      	mov	lr, r3
 800c2be:	4770      	bx	lr
